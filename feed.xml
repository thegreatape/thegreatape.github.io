<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en">
<title type="text">Duct Tape and Turing Machines</title>
<subtitle type="text"></subtitle>
<generator uri="https://github.com/mojombo/jekyll">Jekyll</generator>
<link rel="self" type="application/atom+xml" href="https://thegreata.pe/feed.xml" />
<link rel="alternate" type="text/html" href="https://thegreata.pe" />
<updated>2018-06-06T20:37:17-04:00</updated>
<id>https://thegreata.pe/</id>
<author>
  <name>Thomas Mayfield</name>
  <uri>https://thegreata.pe/</uri>
  <email>Thomas.Mayfield@gmail.com</email>
</author>


<entry>
  <title type="html"><![CDATA[Interlude - Furball]]></title>
  <link rel="alternate" type="text/html" href="https://thegreata.pe/articles/2018/05/25/interlude-furball/" />
  <id>https://thegreata.pe/articles/2018/05/25/interlude-furball</id>
  <published>2018-05-25T00:00:00-04:00</published>
  <updated>2018-05-25T00:00:00-04:00</updated>
  <author>
    <name>Thomas Mayfield</name>
    <uri>https://thegreata.pe</uri>
    <email>Thomas.Mayfield@gmail.com</email>
  </author>
  <content type="html">&lt;p&gt;First, I’d like to introduce Ripley, one of the reasons my attention is a little scarce at the moment:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/ripley.png&quot; alt=&quot;Ripley&quot; /&gt;&lt;/p&gt;

&lt;p&gt;A nine-week old puppy is a joyous thing, and will happily hoover up every spare second you have.&lt;/p&gt;

&lt;p&gt;Focused time for learning and study will resume probably around the time this little furball starts sleeping through the night without pee breaks. But even before we adopted her, it was pretty clear at this point that my goal of hitting a once-a-week writeup on things I’m learning isn’t going to happen. I do think striving for that cadence has still proven a push in the right direction. I’m going to continue tacking towards that goal even if the year-end average is probably going to come out lower than I hoped.&lt;/p&gt;

&lt;p&gt;A few reflections from the last few weeks:&lt;/p&gt;

&lt;p&gt;I’ve been leaning on &lt;a href=&quot;https://habitica.com/&quot;&gt;Habitica&lt;/a&gt; as a way to help myself build daily habits and get through my todo list. It’s been working surprisingly—I’d even say embarrassingly—well. Progression systems and magic pixels, man. The part of me that fed a good chunk of my 20s into World of Warcraft is rolling its eyes in not-surprise.&lt;/p&gt;

&lt;p&gt;Prior to doggo adoption, I’d gotten a pretty good streak of spending 20 minutes a day working on whatever my current project is… but found myself having a hard of time actually sitting down and writing about it. I think part of the friction here is how this blog is structured. Aside from a couple about-me pages, it’s a collection of articles. Trying to push my intended log-of-learning writing into this format has wound up making me feel like each entry needs to have a focused point and something to teach others. What I want out of this writing, instead, is just a nudge towards spending time deliberately learning and a bit of the clarity that comes from having to structure my thoughts to write them down. So, I’m going to try splitting this blog into two sections: a collection of articles/essays (which is most of the existing stuff) and a looser stream of thoughts and updates. Should be an interesting experiment to see if it helps shake loose writing more frequently.&lt;/p&gt;


  &lt;p&gt;&lt;a href=&quot;https://thegreata.pe/articles/2018/05/25/interlude-furball/&quot;&gt;Interlude - Furball&lt;/a&gt; was originally published by Thomas Mayfield at &lt;a href=&quot;https://thegreata.pe&quot;&gt;Duct Tape and Turing Machines&lt;/a&gt; on May 25, 2018.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[The Elements Of Computing Systems: Resisting An Avengers Joke]]></title>
  <link rel="alternate" type="text/html" href="https://thegreata.pe/articles/2018/04/19/resisting-an-avengers-joke/" />
  <id>https://thegreata.pe/articles/2018/04/19/resisting-an-avengers-joke</id>
  <published>2018-04-19T00:00:00-04:00</published>
  <updated>2018-04-19T00:00:00-04:00</updated>
  <author>
    <name>Thomas Mayfield</name>
    <uri>https://thegreata.pe</uri>
    <email>Thomas.Mayfield@gmail.com</email>
  </author>
  <content type="html">&lt;p&gt;Out of the wiring swamp, on to the &lt;a href=&quot;https://plus.google.com/+JeanBaptisteQueru/posts/dfydM2Cnepe&quot;&gt;dizzying but invisible depths&lt;/a&gt; of software abstraction.&lt;/p&gt;

&lt;p&gt;I was actually a little surprised that there was a full chapter devoted to writing an assembler—it’s just mechanically translating assembly code to machine code, word for word, right? As it turns out, while command translation itself is super straightforward, location labels for branching and variable declaration added a little fun. We wound up with a two pass design: a first pas to allow for memory address allocation for each variable and label, then a second pass to generate the machine code itself.&lt;/p&gt;

&lt;p&gt;The system isn’t self hosting—that is, we now don’t use the tools we’re writing to directly build the next level of software (which would laborious, since we haven’t built an operating system yet, much less a text editor!). This means we get to use whatever outside-of-Hack language we want to build the assembler. So now instead of fighting with HDL, I’m writing Ruby! I write Ruby most of the day for work and have for the last seven years or so.  It’s DARN NICE for text chomping.&lt;/p&gt;

&lt;p&gt;Onwards!&lt;/p&gt;

  &lt;p&gt;&lt;a href=&quot;https://thegreata.pe/articles/2018/04/19/resisting-an-avengers-joke/&quot;&gt;The Elements Of Computing Systems: Resisting An Avengers Joke&lt;/a&gt; was originally published by Thomas Mayfield at &lt;a href=&quot;https://thegreata.pe&quot;&gt;Duct Tape and Turing Machines&lt;/a&gt; on April 19, 2018.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[The Elements of Computing Systems: Hardware, Complete]]></title>
  <link rel="alternate" type="text/html" href="https://thegreata.pe/articles/2018/04/09/hardware-complete/" />
  <id>https://thegreata.pe/articles/2018/04/09/hardware-complete</id>
  <published>2018-04-09T00:00:00-04:00</published>
  <updated>2018-04-09T00:00:00-04:00</updated>
  <author>
    <name>Thomas Mayfield</name>
    <uri>https://thegreata.pe</uri>
    <email>Thomas.Mayfield@gmail.com</email>
  </author>
  <content type="html">&lt;p&gt;Holy crap, we’re done with the hardware part. I built a computer!&lt;/p&gt;

&lt;h2 id=&quot;chapter-4&quot;&gt;Chapter 4&lt;/h2&gt;
&lt;p&gt;A cool aspect of each chapter’s material being a self-contained abstraction is that the book can skip between levels for pedagogical reasons. So we wound up learning to write some programs in the machine language for our fully-built computer, before the final phase of actually wiring up the complete computer.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/images/assembly.png&quot;&gt;&lt;img src=&quot;/images/assembly.png&quot; alt=&quot;hack assembly language&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It’s… definitely for machines. Messing around with the assembly language was pretty important for the next chapter. Without that experience, I don’t think I’d have understood enough of the intent behind how things are accomplished using its limited idioms. Debugging when my CPU wasn’t wired up correctly might have cost me a fair bit more hair!&lt;/p&gt;

&lt;p&gt;Two side notes from spelunking with Hack assembly:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.marksmath.com/tecs/hack-asm/hack-asm.html&quot;&gt;This page&lt;/a&gt; was a super useful companion for dealing with some very picky language stuff.&lt;/li&gt;
  &lt;li&gt;There’s a part where you need to load a 16-bit word that’s all &lt;code class=&quot;highlighter-rouge&quot;&gt;1&lt;/code&gt;s into memory to turn a part of the screen dark. You can actually only load 15-bit words in A-instructions, but the assembler will silently accept constants that are over the size you can express in 15 bits, leading to some serious headscratching.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;chapter-5&quot;&gt;Chapter 5&lt;/h2&gt;
&lt;p&gt;Building the CPU and Memory units were the most challenging bits of HDL wiring so far. Breaking everything that needed to happen down into discrete tasks (and being well rested) was key here. Definitely went back to pen &amp;amp; paper here to make this work.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/images/cpu.jpg&quot;&gt;&lt;img src=&quot;/images/cpu.jpg&quot; alt=&quot;wiring the CPU on paper&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;All that wiring gore boiled down to only 18 lines of HDL to make a simple CPU, using all of the previously built components. Wow.&lt;/p&gt;

&lt;p&gt;I did lots of breaking inputs down into binary to make sense of how to connect logical wires. Plotting numbers out as monospaced binary is another useful form of sketching:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/images/ram-binary.png&quot;&gt;&lt;img src=&quot;/images/ram-binary.png&quot; alt=&quot;writing out RAM addresses in binary&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;An added level of difficult: bus indexing works backwards from how my brain thinks, as traditional array indexes go left to right. Bus indexing, on the other hand, goes from the least significant bit to the most signicant bit… which is right to left when binary is written out. This must have accounted for at least half the bugs I created.&lt;/p&gt;

&lt;h2 id=&quot;meta&quot;&gt;Meta&lt;/h2&gt;
&lt;p&gt;It’s been three weeks since the entry before this; not exactly the pace I set out for myself at the beginning of the year. I was getting a little bored with writing a single entry for each chapter, but trying to get two chapters worth of work done in a single week &lt;em&gt;and&lt;/em&gt; a write up wound up taking much longer.&lt;/p&gt;

&lt;p&gt;I’ve also been having a hard time finding the focus to do this particular project after work, so only the real progress happens on weekends. I figured that going back to the blinking lights part of programming would stretch different brain muscles from what I’m using at work, but I think that’s demonstrably false. I’m still having fun, but probably need to either moderate my expectations of what I can do during the week, and/or get more ok with these writeups being progress updates rather than proof of commpleting milestones.&lt;/p&gt;

  &lt;p&gt;&lt;a href=&quot;https://thegreata.pe/articles/2018/04/09/hardware-complete/&quot;&gt;The Elements of Computing Systems: Hardware, Complete&lt;/a&gt; was originally published by Thomas Mayfield at &lt;a href=&quot;https://thegreata.pe&quot;&gt;Duct Tape and Turing Machines&lt;/a&gt; on April 09, 2018.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[The Elements Of Computing Systems: Time, State & Memory]]></title>
  <link rel="alternate" type="text/html" href="https://thegreata.pe/articles/2018/03/18/time-state-and-memory/" />
  <id>https://thegreata.pe/articles/2018/03/18/time-state-and-memory</id>
  <published>2018-03-18T00:00:00-04:00</published>
  <updated>2018-03-18T00:00:00-04:00</updated>
  <author>
    <name>Thomas Mayfield</name>
    <uri>https://thegreata.pe</uri>
    <email>Thomas.Mayfield@gmail.com</email>
  </author>
  <content type="html">&lt;p&gt;Oh boy, a clock! In this chapter of &lt;a href=&quot;http://www.nand2tetris.org/&quot;&gt;nand2tetris&lt;/a&gt;, we started teaching our logic circuits about time and consequently, memory. We’re introduced to a single new primitive, a data flipflop: all it does is output the value of its input one clock tick ago. With that and the array of combinatorial logic gates from previous chapters, we build all the way up to 16 kilobye RAM chips!&lt;/p&gt;

&lt;p&gt;It was a bit disappointing that DFFs are given as primitives here. Though the book says they can be composed from Nand gates just like the rest of the chips we’ve built so far, it would have been neat to see the gory details of how one goes from combinatorial, stateless logic to sequential, time-based logic. Apparently the construction of DFFs is “intricate”, so I get pedagogically why we aren’t asked to implement them. Still, nandandflipflop2tetris just doesn’t have the same ring…&lt;/p&gt;

&lt;p&gt;That aside, building memory chips felt like like bit twiddling and more like combining of logical components. These chips were easier to get right on the first-ish try without pen and paper; the composing of larger and larger RAM chips felt particularly simple and elegant. It did, however, take a bit for me to shift my thinking abouts values throughout a system being phased time-wise: e.g. you set inputs up, then &lt;em&gt;on the next clock tick&lt;/em&gt; the outputs react.&lt;/p&gt;

&lt;p&gt;Aside: an HDL syntax thing that I didn’t know is that you can declare pin connection twice on the gate. Like, if I wanted to hook up a DFF’s output pin to both the chip’s out pin and something else internally, you can do  &lt;code class=&quot;highlighter-rouge&quot;&gt;DFF(in=something, out=outb, out=out)&lt;/code&gt; . The simulator won’t let you connect pins that touch the outside world to internal pins, so you can’t just use &lt;code class=&quot;highlighter-rouge&quot;&gt;out&lt;/code&gt;. Go figure.&lt;/p&gt;

  &lt;p&gt;&lt;a href=&quot;https://thegreata.pe/articles/2018/03/18/time-state-and-memory/&quot;&gt;The Elements Of Computing Systems: Time, State & Memory&lt;/a&gt; was originally published by Thomas Mayfield at &lt;a href=&quot;https://thegreata.pe&quot;&gt;Duct Tape and Turing Machines&lt;/a&gt; on March 18, 2018.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[The Elements Of Computing Systems: Teaching First-Grade Math To Virtual Sand]]></title>
  <link rel="alternate" type="text/html" href="https://thegreata.pe/articles/2018/03/12/teaching-sand-math/" />
  <id>https://thegreata.pe/articles/2018/03/12/teaching-sand-math</id>
  <published>2018-03-12T00:00:00-04:00</published>
  <updated>2018-03-12T00:00:00-04:00</updated>
  <author>
    <name>Thomas Mayfield</name>
    <uri>https://thegreata.pe</uri>
    <email>Thomas.Mayfield@gmail.com</email>
  </author>
  <content type="html">&lt;p&gt;Continuing my slow plod through TEoCS (also known as &lt;a href=&quot;http://www.nand2tetris.org/&quot;&gt;nand2tetris&lt;/a&gt;), I’ve now reached the part of building in building a computer where I’ve built something that… computes.&lt;/p&gt;

&lt;p&gt;The &lt;em&gt;Arithmetic Logic Unit&lt;/em&gt; chip is the first thing I’ve made that felt like it deserved the label “chip” instead of the mechanical-sounding “gate”.  Just like everything else so far, at its heart it’s a bunch Nand gates with a lot of wires running between them… but it feels like we’ve crossed over from simple logic reified by wires into the real start of a more general purpose computing machine. The chip has a pair of 16-bit inputs, and 6 control bits, which you manipulate to do various combinations of arithmatic, from producing a constant value, addition, subtraction, bitwise boolean operations, negation upon those inputs. We’ll apparently be implementing multiplication and division at a higher level up the stack, but that’s a still a lot for some jumped-up simulated silicon.&lt;/p&gt;

&lt;p&gt;It was, remarkably, only 14 lines of HDL code to implement, using all the gates I’d built so far.&lt;/p&gt;

&lt;p&gt;It would have been pretty easy to rip through this chapter and build the ALU by just blindly implementing the logical operations indicated in the chip’s truth table and control bits, but I wanted to take a step back and work out with pen and paper &lt;em&gt;how&lt;/em&gt; the chip actually accomplished a bunch of this math. It wasn’t obvious at all to me that, “ok, negate the y bus’s bits, then add them to x and then negate the result of that” comes out to &lt;code class=&quot;highlighter-rouge&quot;&gt;x-y&lt;/code&gt;. But it does, and I’ve at least moved past taking it on faith after working out a few of these operations out with ink and dead trees. Pretty elegant design!&lt;/p&gt;

&lt;p&gt;A few tidbits that were helpful for me as I worked through this chapter:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;You can use the literal values &lt;code class=&quot;highlighter-rouge&quot;&gt;true&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;false&lt;/code&gt; if you want a wired to be always on or off.  This eluded me for a bit (heh heh heh).&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;The tests will produce a (relatively) easy to read output file as they go. At least on OS X, it’s difficult to see the entirety of this output in the simulator’s UI, but it’s also available in a file in the current project directory with the &lt;code class=&quot;highlighter-rouge&quot;&gt;.out&lt;/code&gt; extension. You can eyeball or diff each of its lines versus the test script’s &lt;code class=&quot;highlighter-rouge&quot;&gt;.cmp&lt;/code&gt; file to start seeing where things have gone wrong.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Examining the state of each internal pin of the chip in the hardware simulator is a great debugging technique. I found plenty of bugs by just running the test script, waiting for it to fail on a particular case, then stepping through what each internal pin/bus’s value should have been on paper.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

  &lt;p&gt;&lt;a href=&quot;https://thegreata.pe/articles/2018/03/12/teaching-sand-math/&quot;&gt;The Elements Of Computing Systems: Teaching First-Grade Math To Virtual Sand&lt;/a&gt; was originally published by Thomas Mayfield at &lt;a href=&quot;https://thegreata.pe&quot;&gt;Duct Tape and Turing Machines&lt;/a&gt; on March 12, 2018.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[The Elements of Computing Systems: Putting The Blinking Lights Back In Computer Science]]></title>
  <link rel="alternate" type="text/html" href="https://thegreata.pe/articles/2018/02/22/blinking-lights/" />
  <id>https://thegreata.pe/articles/2018/02/22/blinking-lights</id>
  <published>2018-02-22T00:00:00-05:00</published>
  <updated>2018-02-22T00:00:00-05:00</updated>
  <author>
    <name>Thomas Mayfield</name>
    <uri>https://thegreata.pe</uri>
    <email>Thomas.Mayfield@gmail.com</email>
  </author>
  <content type="html">&lt;p&gt;Last week, I cracked open &lt;a href=&quot;http://www.nand2tetris.org/&quot;&gt;The Elements of Computing Systems&lt;/a&gt; and started working through it. It’s a book with a pretty cool idea: it walks you through thirteen projects that all build upon each other to create a complete general-purpose computer. The first chapter starts with transistors and logic gates; the last has Tetris running on an operating system you wrote!&lt;/p&gt;

&lt;p&gt;My posts about work towards this year’s learning-and-doing goal have thus far been either been documenting a finished project or showcasing immediately usable tips and tricks. Working my way through this book is going to be a little different. I want to document my progress—hopefully without these posts sounding like a third-grade book report—so I’m just going to try and call out what was fun or interesting about the material as I work through it. Maybe a work journal like this will be a useful template for how to write about other longer, ongoing projects, but we’ll see! This is all serving as a proxy for habit changes, which is the most important thing to me.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;The first chapter of TEoCS has you building primitive boolean logic gates starting with just a single atom: a &lt;a href=&quot;https://en.wikipedia.org/wiki/NAND_gate&quot;&gt;Nand gate&lt;/a&gt;. You progressively build more and more complicated gates, from the familiar Not/Or/And operators to stuff like multiplexors and n-way version of the earlier gates.&lt;/p&gt;

&lt;p&gt;The book doesn’t come with a soldering iron, so this is all wired up inside a hardware simulator program (that reminds me of being introduced to pointers machine-language first in &lt;a href=&quot;https://www.cs.oberlin.edu/~jdonalds/210/syllabus.html&quot;&gt;CS210&lt;/a&gt;). You wire up the gates by writing code in Hardware Definition Language: basically virtually naming all the chips and how wires connect them.  You can load into the simulator, and then change the value of various wires and see what happens. It’s a baroque-looking program, but pretty useful for exploring and debugging:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/images/xor.png&quot;&gt;&lt;img src=&quot;/images/xor.png&quot; alt=&quot;hardware simulator&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Delightfully, the material has a set of test scripts that you can use to put your gates through their paces and make sure you’ve wired up everything correctly.&lt;/p&gt;

&lt;p&gt;Creating gates like this via code definitely stretched my brain. Sketching them out on pen and paper was was really helpful:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/images/circuit-sketch.jpg&quot;&gt;&lt;img src=&quot;/images/circuit-sketch.jpg&quot; alt=&quot;circuit sketch&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Next week, we teach the circuits to do math!&lt;/p&gt;

  &lt;p&gt;&lt;a href=&quot;https://thegreata.pe/articles/2018/02/22/blinking-lights/&quot;&gt;The Elements of Computing Systems: Putting The Blinking Lights Back In Computer Science&lt;/a&gt; was originally published by Thomas Mayfield at &lt;a href=&quot;https://thegreata.pe&quot;&gt;Duct Tape and Turing Machines&lt;/a&gt; on February 22, 2018.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[Clojure, vim, and tmux: using your editor as a repl scratchpad]]></title>
  <link rel="alternate" type="text/html" href="https://thegreata.pe/articles/2018/02/11/clojure-vim-and-tmux-using-your-editor-as-a-repl-scratchpad/" />
  <id>https://thegreata.pe/articles/2018/02/11/clojure-vim-and-tmux-using-your-editor-as-a-repl-scratchpad</id>
  <published>2018-02-11T00:00:00-05:00</published>
  <updated>2018-02-11T00:00:00-05:00</updated>
  <author>
    <name>Thomas Mayfield</name>
    <uri>https://thegreata.pe</uri>
    <email>Thomas.Mayfield@gmail.com</email>
  </author>
  <content type="html">&lt;p&gt;I use Clojure at work, but the frequency varies—I’ll sometimes go months in between working on a project that uses it. Whenever I come back to using the language after some time away, I try to file a few sharp edges off the tooling I use around it.&lt;/p&gt;

&lt;p&gt;Today’s goal: a better vim to repl flow for when:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;I don’t want to simply save and source an entire file into a repl session’s memory (via &lt;a href=&quot;https://github.com/tpope/vim-fireplace&quot;&gt;vim-fireplace&lt;/a&gt;’s &lt;code class=&quot;highlighter-rouge&quot;&gt;cpr&lt;/code&gt;)&lt;/li&gt;
  &lt;li&gt;I’m mucking around with some exploratory-type coding and the expression is getting too large to edit comfortable in the repl window itself.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Vim-fireplace has a “quasi-repl” that’s intended to let you do this kind of scratchpad code-and-eval, but it’s never worked very well for me. I usually write code inside of a &lt;a href=&quot;https://robots.thoughtbot.com/a-tmux-crash-course&quot;&gt;tmux&lt;/a&gt; session, with a vim window beside with a window with a shell I’m using for a repl or test running. When writing Ruby, I use &lt;a href=&quot;https://github.com/pgr0ss/vimux-ruby-test&quot;&gt;pgr0ss/vimux-ruby-test&lt;/a&gt; to quickly start the test for the file or line my cursor’s on. It’s super simple: rather than trying to run the test as subcommand in Vim and then show the results inside the editor, it just figures out the appropriate shell command, jams it over into the other window, and hits Enter.&lt;/p&gt;

&lt;p&gt;I wanted more or less this same workflow for evaluating Clojure code. If could just get Vim to send a Clojure s-expression over to a running repl wholesale at a keystroke, I could stay over in Vim editing away and run the code I’m writing without even switching windows. Lo and behold, the author of &lt;a href=&quot;https://github.com/benmills/vimux&quot;&gt;vimux&lt;/a&gt; had the same idea—there’s even an example config for setting this up in the project’s docs!&lt;/p&gt;

&lt;p&gt;I’ve tweaked &lt;a href=&quot;https://github.com/benmills/vimux/blob/37f41195e6369ac602a08ec61364906600b771f1/doc/vimux.txt#L245-L273&quot;&gt;the original documentation here slightly&lt;/a&gt;, as it had what I think was a mistake in the function (I opened a PR to change it) and I wanted to put the mappings in an autocmd group so they were only set up for Clojure files. What I would up with:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-vim&quot; data-lang=&quot;vim&quot;&gt;&lt;span class=&quot;k&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;!&lt;/span&gt; VimuxSlime&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;call&lt;/span&gt; VimuxRunCommand&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;@&lt;span class=&quot;k&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;endfunction&lt;/span&gt;

augroup clojure
  autocmd&lt;span class=&quot;p&quot;&gt;!&lt;/span&gt;
  &lt;span class=&quot;c&quot;&gt;&quot; In visual mode, send the currently visually selected text to the repl with &amp;lt;leader&amp;gt;sl&lt;/span&gt;
  autocmd &lt;span class=&quot;nb&quot;&gt;BufEnter&lt;/span&gt; *&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;cljs&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;*&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;clj&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;*&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;cljs&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;hl vmap &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;Leader&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;sl&lt;/span&gt; &quot;vy &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;call&lt;/span&gt; VimuxSlime&lt;span class=&quot;p&quot;&gt;()&amp;lt;&lt;/span&gt;CR&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;c&quot;&gt;&quot; In normal mode, send the current block of code (that's surrounded by empty lines) to the repl with &amp;lt;leader&amp;gt;sl&lt;/span&gt;
  autocmd &lt;span class=&quot;nb&quot;&gt;BufEnter&lt;/span&gt; *&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;cljs&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;*&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;clj&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;*&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;cljs&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;hl nmap &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;Leader&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;sl&lt;/span&gt; vip&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;Leader&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;sl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;CR&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
augroup END&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Simple enough to use that hopefully I’ll remember it in between bouts with Clojure projects.&lt;/p&gt;

  &lt;p&gt;&lt;a href=&quot;https://thegreata.pe/articles/2018/02/11/clojure-vim-and-tmux-using-your-editor-as-a-repl-scratchpad/&quot;&gt;Clojure, vim, and tmux: using your editor as a repl scratchpad&lt;/a&gt; was originally published by Thomas Mayfield at &lt;a href=&quot;https://thegreata.pe&quot;&gt;Duct Tape and Turing Machines&lt;/a&gt; on February 11, 2018.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[Generating Randomized Color Palettes (That Aren’t Clown Vomit)]]></title>
  <link rel="alternate" type="text/html" href="https://thegreata.pe/articles/2018/02/04/generating-randomized-color-palettes/" />
  <id>https://thegreata.pe/articles/2018/02/04/generating-randomized-color-palettes</id>
  <published>2018-02-04T00:00:00-05:00</published>
  <updated>2018-02-04T00:00:00-05:00</updated>
  <author>
    <name>Thomas Mayfield</name>
    <uri>https://thegreata.pe</uri>
    <email>Thomas.Mayfield@gmail.com</email>
  </author>
  <content type="html">&lt;p&gt;Before we dive into randomized color palette generation, a little context on what brought me here:&lt;/p&gt;

&lt;h2 id=&quot;little-and-often&quot;&gt;Little And Often&lt;/h2&gt;
&lt;p&gt;I’ve been spending some time reviving a project that I’d started and abandoned mid-last year. The idea of using small, frequent periods of work to make progress towards big goals is one that’s stuck with me over the years: basically favoring putting in 20 minutes a day on a task versus dedicating an entire Saturday afternoon. It’s effective for chopping up very large projects into manageable pieces, but also has some notably favorable effects on learning/skill acquisition and exercise-induced physical adaptations.&lt;/p&gt;

&lt;p&gt;It’s also a pattern that has been a real challenge for me to undertake on a regular basis, and I was trying to figure out what I could do to boost my adherence to these kind of relatively short, daily sessions. I decided to try building a visualization of them, plotting the time spent across a calendar view—much like Jerry Seinfeld’s &lt;a href=&quot;https://www.writersstore.com/dont-break-the-chain-jerry-seinfeld/&quot;&gt;Don’t Break the Chain&lt;/a&gt;. I wanted something that I could glance at to see where my time was going over a week, a month, a (gulp) year.&lt;/p&gt;

&lt;p&gt;It’s currently in only-usable-by-me alpha mode, but the project is called &lt;a href=&quot;http://littleandoften.club&quot;&gt;Little And Often&lt;/a&gt;, from strength coach Dan John’s advice to &lt;a href=&quot;http://danjohn.net/2017/01/advice-for-the-general-enthusiast/&quot;&gt;“train little and often over the long haul”&lt;/a&gt;. It looks something like this:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/images/lo-calendar.png&quot;&gt;&lt;img src=&quot;/images/lo-calendar.png&quot; alt=&quot;Little And Often Calendar&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Getting this calendar of activities to be aesthetically pleasing proved more interesting than I thought. I initially picked a color palette by hand (using &lt;a href=&quot;https://coolors.co/fe5f55-f0b67f-d6d1b1-c7efcf-eef5db&quot;&gt;this nifty tool at Coolors.co&lt;/a&gt;) to give each of the activities some contrast with each other. But since the palettes were limited to five colors. as I added new activities to track, I had to start repeating colors and the whole thing became harder to read at a glance. I wanted to be able to add more or less arbitrary numbers of activities, and so it became clear I’d need some way to generate randomized color palettes; hopefully ones that wouldn’t look like an acid trip through the Crayola factory.&lt;/p&gt;

&lt;h2 id=&quot;research&quot;&gt;Research&lt;/h2&gt;
&lt;p&gt;The task at hand, then, was to build a system for picking an arbitrary number of colors to form a harmonious palette, so that when a user adds another new activity to their existing set, it’ll show up on their calendar plot and look nice.&lt;/p&gt;

&lt;p&gt;All the inspiration for the system and visualizations I wound up building came from these two articles:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;http://devmag.org.za/2012/07/29/how-to-choose-colours-procedurally-algorithms/&quot;&gt;How to Choose Colours Procedurally&lt;/a&gt;: A bit focused towards game development, but this was useful for thinking about breaking down color selection into picking a varying set of numeric values, be it RGB values or varying hue, saturation, and luminescence.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;http://www.websiteoptimization.com/speed/tweak/color-harmony/&quot;&gt;Automated Color Harmony Tools&lt;/a&gt;: This got me thinking about different ways of limiting the selection space of the colors I’d be generating, so as to wind up with a set of colors whose relations to each other were pleasing to the human eye.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;What I wound up with was an algorithm that does a decent job, at least for 10-20-ish colors. I wrote this in Ruby, and the code is in the &lt;a href=&quot;https://github.com/thegreatape/little-and-often/blob/master/app/models/palette.rb&quot;&gt;Palette class here&lt;/a&gt;. It works as follows:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Gather our inputs:
    &lt;ul&gt;
      &lt;li&gt;A set of arcs around a color wheel to select hues from: this is defined by up to three starting angles, and up to three corresponding ranges (in degrees) starting from them.&lt;/li&gt;
      &lt;li&gt;An angle offset at which to start the initial arc. This was useful to have as a separate value from the angles themselves, as it made it easier to define a harmonious set of arcs, then use the offset to “spin” the color wheel around for random samples of colors from different areas.&lt;/li&gt;
      &lt;li&gt;Initial values for the saturation and lightness values of the colors produced.&lt;/li&gt;
      &lt;li&gt;“Jitter” values for saturation and lightness: the maximum size of random values added or subtracted from the colors’ saturation and lightness.&lt;/li&gt;
      &lt;li&gt;A minimum geometric distance value that the algorithm would attempt to keep between each color produced in the palette.&lt;/li&gt;
      &lt;li&gt;A count of how many colors to generate, and (optionally) a set of pre-existing colors to comprise the start of the palette.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;If no pre-existing colors were given, pick a starting color from within the angle ranges.&lt;/li&gt;
  &lt;li&gt;Until we’ve generated as many colors as requested, do the following:
    &lt;ol&gt;
      &lt;li&gt;Pick a hue from within the specific angle ranges.&lt;/li&gt;
      &lt;li&gt;Pick a saturation using the initial saturation plus or minus a random value between 0 and the saturation jitter.&lt;/li&gt;
      &lt;li&gt;Pick a lightness using the initial lightness plus or minus a random value between 0 and the lightness jitter.&lt;/li&gt;
      &lt;li&gt;If the resulting HSL color is at least the maximum color distance away from each of the other colors in the palette, add it to the palette.&lt;/li&gt;
      &lt;li&gt;Otherwise, try again (up to 100 times) to generate a sufficiently distant color. If the 101st attempt is still too close to the other already selected colors, add it anyway. This is to prevent a palette with small angle ranges and lots of colors from being unable to generate any new colors at all.&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;visualization&quot;&gt;Visualization&lt;/h2&gt;
&lt;p&gt;This has a ton of parameters, and trying to figure out the best or even reasonable values was tough to arrive at by just playing around in code and applying the result to my activity calendar.  It was also hard to tell the difference between a bug in the code and just parameters that weren’t working very well. So, I decided to build a testing sandbox, where I could put a bunch of parameters into a web form and have it spit out a series of resulting palettes based on them.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/images/lo-color-test.png&quot;&gt;&lt;img src=&quot;/images/lo-color-test.png&quot; alt=&quot;Little And Often Calendar&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The only parameter that isn’t on the form was angle offset—I found it more helpful to use the other parameters to draw the shape of the arcs I wanted, then have a randomized 0 to 360 offset on each sample to see what different arcs of the color wheel would look like when selected.&lt;/p&gt;

&lt;p&gt;It’s also worth noting that I wound up developing the code and visualization concurrently. Being able to see the results of a particular approach not only helped tune the parameters and flush out bugs, but it help me figure out where the approach was falling down aesthetically and led to adding ideas like a minimum color distance and constrained randomization of saturation and lightness.&lt;/p&gt;

&lt;p&gt;Another fun bonus to this approach: I could send the link to the page to other people with better artistic eyes than myself and get them to tool around with it and come up with good parameters. You can &lt;a href=&quot;http://littleandoften.club/color_tests?utf8=%E2%9C%93&amp;amp;palette%5Bfirst_angle%5D=0&amp;amp;palette%5Bfirst_range%5D=90&amp;amp;palette%5Bsecond_angle%5D=210&amp;amp;palette%5Bsecond_range%5D=30&amp;amp;palette%5Bthird_angle%5D=&amp;amp;palette%5Bthird_range%5D=&amp;amp;palette%5Blightness_jitter%5D=20&amp;amp;palette%5Bsaturation_jitter%5D=10&amp;amp;palette%5Binitial_lightness%5D=55&amp;amp;palette%5Binitial_saturation%5D=45&amp;amp;palette%5Bminimum_color_distance%5D=15&amp;amp;commit=Save+Palette&quot;&gt;try it for yourself here&lt;/a&gt;!&lt;/p&gt;

  &lt;p&gt;&lt;a href=&quot;https://thegreata.pe/articles/2018/02/04/generating-randomized-color-palettes/&quot;&gt;Generating Randomized Color Palettes (That Aren’t Clown Vomit)&lt;/a&gt; was originally published by Thomas Mayfield at &lt;a href=&quot;https://thegreata.pe&quot;&gt;Duct Tape and Turing Machines&lt;/a&gt; on February 04, 2018.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[Interlude - Vacation]]></title>
  <link rel="alternate" type="text/html" href="https://thegreata.pe/articles/2018/01/20/interlude-vacation/" />
  <id>https://thegreata.pe/articles/2018/01/20/interlude-vacation</id>
  <published>2018-01-20T00:00:00-05:00</published>
  <updated>2018-01-20T00:00:00-05:00</updated>
  <author>
    <name>Thomas Mayfield</name>
    <uri>https://thegreata.pe</uri>
    <email>Thomas.Mayfield@gmail.com</email>
  </author>
  <content type="html">&lt;p&gt;Though I’m generally terrible at taking regular vacations, last week my wife and I got away to Hawaii for some long overdue R&amp;amp;R. We saw whales at sunset, stood 10 feet away from active lava flows, hiked an extinct volcano caldera, relaxed on the beach, and drank a whole bunch of rum drinks.&lt;/p&gt;

&lt;p&gt;Regular learning posts resume next!&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/hawaii/beach-sunset.jpg&quot; alt=&quot;Beach sunset&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/hawaii/botantical-garden-shore.jpg&quot; alt=&quot;Botantical garden shore&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/hawaii/caldera.jpg&quot; alt=&quot;Caldera floor&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/hawaii/hanu.jpg&quot; alt=&quot;Sea turtle&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/hawaii/lava.jpg&quot; alt=&quot;Lava!&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Oh, and we got to experience about 38 minutes of sheer mortal terror.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/hawaii/oh-fuck.png&quot; alt=&quot;Missle alert&quot; /&gt;&lt;/p&gt;

  &lt;p&gt;&lt;a href=&quot;https://thegreata.pe/articles/2018/01/20/interlude-vacation/&quot;&gt;Interlude - Vacation&lt;/a&gt; was originally published by Thomas Mayfield at &lt;a href=&quot;https://thegreata.pe&quot;&gt;Duct Tape and Turing Machines&lt;/a&gt; on January 20, 2018.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[Vim syntax highlighting for SQL strings inside Ruby code]]></title>
  <link rel="alternate" type="text/html" href="https://thegreata.pe/articles/2018/01/01/vim-syntax-highlighting-for-sql-strings-inside-ruby-code/" />
  <id>https://thegreata.pe/articles/2018/01/01/vim-syntax-highlighting-for-sql-strings-inside-ruby-code</id>
  <published>2018-01-01T00:00:00-05:00</published>
  <updated>2018-01-01T00:00:00-05:00</updated>
  <author>
    <name>Thomas Mayfield</name>
    <uri>https://thegreata.pe</uri>
    <email>Thomas.Mayfield@gmail.com</email>
  </author>
  <content type="html">&lt;p&gt;Working in Rails, it’s not uncommon to have database queries that are better off expressed without using ActiveRecord. This usually means stuffing the SQL query itself into a string, and then running it against the database using &lt;code class=&quot;highlighter-rouge&quot;&gt;ActiveRecord::Base.connection.execute&lt;/code&gt;. Unfortunately, these queries tend to be on the large and complex side, so having a big blob of un-highlighted SQL in the middle of your Ruby code isn’t the nicest thing.&lt;/p&gt;

&lt;p&gt;However, there’s a loose convention on many Rails projects to denote such queries as &lt;a href=&quot;[https://infinum.co/the-capsized-eight/multiline-strings-ruby-2-3-0-the-squiggly-heredoc&quot;&gt;heredoc&lt;/a&gt; strings starting with &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;&amp;lt;~SQL&lt;/code&gt;. I wanted to see if I could set up Vim to highlight that kind of heredoc in Ruby as SQL instead of a string. Turns out it’s possible!&lt;/p&gt;

&lt;h2 id=&quot;tldr&quot;&gt;TL;DR&lt;/h2&gt;
&lt;p&gt;Put the following in &lt;code class=&quot;highlighter-rouge&quot;&gt;~/.vim/after/syntax/ruby.vim&lt;/code&gt;&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-vim&quot; data-lang=&quot;vim&quot;&gt;unlet &lt;span class=&quot;nv&quot;&gt;b:current_syntax&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;syn&lt;/span&gt; include @SQL syntax/sql&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;vim&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;syn&lt;/span&gt; region sqlHeredoc &lt;span class=&quot;k&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/\v\&amp;lt;\&amp;lt;[-~]SQL/&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/\vSQL/&lt;/span&gt; keepend contains&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;@SQL
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;b:current_syntax&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;ruby&quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Before:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/ruby-sql-before.png&quot; alt=&quot;Without syntax highlighting&quot; /&gt;&lt;/p&gt;

&lt;p&gt;After:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/ruby-sql-after.png&quot; alt=&quot;With syntax highlighting&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;explanation&quot;&gt;Explanation&lt;/h2&gt;
&lt;p&gt;We’re using the vim &lt;a href=&quot;http://learnvimscriptthehardway.stevelosh.com/chapters/42.html#vimafter&quot;&gt;after directory&lt;/a&gt; to run some extra syntax highlight rules for Ruby after the regular &lt;code class=&quot;highlighter-rouge&quot;&gt;syntax/ruby.vim&lt;/code&gt; rules have been run. We load up the sql syntax rules into a syntax group called &lt;code class=&quot;highlighter-rouge&quot;&gt;@SQL&lt;/code&gt;, then tell Vim that any region starting with a SQL heredoc string and ending with the terminating “SQL” should be highlighed by those imported syntax rules. Not bad for a couple of lines.&lt;/p&gt;

&lt;p&gt;So what’s with the &lt;code class=&quot;highlighter-rouge&quot;&gt;unlet&lt;/code&gt; / &lt;code class=&quot;highlighter-rouge&quot;&gt;let&lt;/code&gt; business? Turns out that most Vimscript syntax files have a guard clause at the top that will bail out if &lt;code class=&quot;highlighter-rouge&quot;&gt;b:current_syntax&lt;/code&gt; is already set (&lt;a href=&quot;https://github.com/vim-ruby/vim-ruby/blob/master/syntax/ruby.vim#L13-L15&quot;&gt;here’s the one&lt;/a&gt; from ruby.vim). I think this is to prevent double-sourcing of the files, but I’m not 100% sure. The practical effect here is that since the sql syntax file also contains such a guard, we needed to make sure that variable was unset so that we could properly execute that file for import here. I believe that’s what going on here, anyway—this is the point where I bailed out of digging further down the rabbithole.&lt;/p&gt;

&lt;h2 id=&quot;resources-i-found-handy-while-figuring-this-out&quot;&gt;Resources I found handy while figuring this out&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://vim.wikia.com/wiki/Different_syntax_highlighting_within_regions_of_a_file&quot;&gt;This article on the VimTips wiki&lt;/a&gt; gave me the initial idea for how this should work.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://learnvimscriptthehardway.stevelosh.com/chapters/45.html&quot;&gt;Learn Vimscript The Hard Way&lt;/a&gt; has a couple great intro chapters on how Vim’s syntax highlighting works.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://vimdoc.sourceforge.net/htmldoc/syntax.html&quot;&gt;Vim syntax documentation&lt;/a&gt; is the comprehensive (if dense) manual on the Vim syntax highlighting commands.&lt;/li&gt;
&lt;/ul&gt;

  &lt;p&gt;&lt;a href=&quot;https://thegreata.pe/articles/2018/01/01/vim-syntax-highlighting-for-sql-strings-inside-ruby-code/&quot;&gt;Vim syntax highlighting for SQL strings inside Ruby code&lt;/a&gt; was originally published by Thomas Mayfield at &lt;a href=&quot;https://thegreata.pe&quot;&gt;Duct Tape and Turing Machines&lt;/a&gt; on January 01, 2018.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[2017 Year End Notes]]></title>
  <link rel="alternate" type="text/html" href="https://thegreata.pe/articles/2017/12/30/2017-year-end-notes/" />
  <id>https://thegreata.pe/articles/2017/12/30/2017-year-end-notes</id>
  <published>2017-12-30T00:00:00-05:00</published>
  <updated>2017-12-30T00:00:00-05:00</updated>
  <author>
    <name>Thomas Mayfield</name>
    <uri>https://thegreata.pe</uri>
    <email>Thomas.Mayfield@gmail.com</email>
  </author>
  <content type="html">&lt;p&gt;Another year, another time for personal reflection and course adjustments.&lt;/p&gt;

&lt;h2 id=&quot;reading&quot;&gt;Reading&lt;/h2&gt;
&lt;p&gt;I noted last year that I’d read mostly books by men (women made up only 23% of my 2016 reading list), and wanted to change that. This year, I did! 25 of the 50 books I read were by women.&lt;/p&gt;

&lt;p&gt;Rough breakdown by genre:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Fantasy: 23 books&lt;/li&gt;
  &lt;li&gt;Other Non-Fiction: 12 books&lt;/li&gt;
  &lt;li&gt;Science Fiction: 7 books&lt;/li&gt;
  &lt;li&gt;Technical	 / Career: 4 books&lt;/li&gt;
  &lt;li&gt;Fitness: 4 books&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Notable books from 2017:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://www.amazon.com/Mistakes-Were-Made-But-Not-ebook/dp/B003K15IOE/&quot;&gt;Mistakes Were Made (But Not by Me)&lt;/a&gt;: A book about self-justification, cognitive dissonance, and how memory works. This had more impact on how I think about human behavior than anything else I’ve read in the last few years.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://www.amazon.com/Weapons-Math-Destruction-Increases-Inequality-ebook/dp/B019B6VCLO&quot;&gt;Weapons of Math Destruction&lt;/a&gt;: A good, nuanced critique of how big data techniques can contribute to social ills. Far from a “big data BAD!” screed, the author lays out a thoughtful set of criteria that we can use to evaluate the impact of individual algorithms and approaches.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://www.amazon.com/Managers-Path-Leaders-Navigating-Growth-ebook/dp/B06XP3GJ7F/&quot;&gt;The Manager’s Path&lt;/a&gt;: An excellent book on tech leadership, and one that I hope individual contributors will read at least the first few chapters of as well.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://www.amazon.com/Infomocracy-Book-One-Centenal-Cycle-ebook/dp/B0151U75ME/&quot;&gt;Infomocracy&lt;/a&gt;: If William Gibson wrote near-future fiction about governments and elections, it might look something like this.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://www.amazon.com/Wheel-Time-14-Book/dp/B00VZIF6VO&quot;&gt;The Wheel of Time&lt;/a&gt; and &lt;a href=&quot;https://www.amazon.com/Dresden-Files-15-books/dp/B00O3HD47C/&quot;&gt;The Dresden Files&lt;/a&gt;: While I’m not normally a big re-reader, this year was a year for revisiting some old favorites.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I’m generally happy with where my reading habits are right now, but I think next year it might be a good idea to start paying more attention to how many books I’m reading by people of color and publicly LGBTQ+ authors.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Updated 2017-12-31: wound up finishing two more books on New Year’s Eve!&lt;/em&gt;&lt;/p&gt;

&lt;h2 id=&quot;fitness&quot;&gt;Fitness&lt;/h2&gt;
&lt;p&gt;Spending the last year focusing on getting healthy and hypertrophy paid off. I didn’t get hurt again, and definitely got bigger: went from 182lbs to 202lbs from March to December, with relatively mild fat gains. I’ll be cutting that down starting post-vacation in January, aiming to get down to 190lbs or so before I start another muscle gain phase.&lt;/p&gt;

&lt;p&gt;I only did 1RM testing once this year (in mid-July, I think) but I got back to my pre-injury strength levels, with a small deadlift PR. Not bad, considering strength was a secondary focus.&lt;/p&gt;

&lt;p&gt;Good things from 2017 I want to continue doing:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;em&gt;Safety Squat Bar&lt;/em&gt;: I got a &lt;a href=&quot;https://www.roguefitness.com/sb-1-rogue-safety-squat-bar&quot;&gt;safety squat bar&lt;/a&gt; for the home gym when both my wife and I had upper body injuries, and I wound up squatting with it exclusively for about six months. Even though I’m back to regular back squats as a main lift, I’ll still be using the SSB for accessory and supplemental lifts for the foreseeable future. Great purchase.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;em&gt;Meal prep + calorie macro tracking&lt;/em&gt;: A flexible diet framework that still seems to work super well for me on both the physical results and mental health fronts.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;em&gt;Giant sets (for accessory work)&lt;/em&gt;: Giant sets are stringing together 3 or more lifts in sequence, without a pause. They’re A+ for time and mild conditioning. I tried to doing them for a while with my main lifts, and got a few minor tweaks that I think were warning shots. I’ll keep doing giant sets but just for isolation-y accessories and not with the main lifts of the day.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;em&gt;Biking and walking for LISS&lt;/em&gt;: I feel like I have to re-learn this one every year: HIIT is fun and time-efficient, but the recovery tax is too high for what they get me. I /mostly/ stuck to biking and hiking for cardio this year, and it improved my work capacity and got me outside, without beating me all to hell.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I have one simple goal for next year: commit to running &lt;a href=&quot;https://www.strongerbyscience.com/training-toolkit/&quot;&gt;Average to Savage&lt;/a&gt; for the whole year. I program-hopped for the last half of the year too much, and it impacted my strength progress. I know AtS works for my goals, and I should stick to just periodically adjusting accessory work if I need variation.&lt;/p&gt;

&lt;h2 id=&quot;time-and-attention&quot;&gt;Time and Attention&lt;/h2&gt;
&lt;p&gt;Even considering the psychological and emotional weight of the country turning into a flaming dumpster full of garbage fires, I’m still unhappy with the job I did spending my time and attention deliberately in 2017.&lt;/p&gt;

&lt;p&gt;That’s reflected in this being the only post I’ve written in this whole year, the lowest number since I started it in 2011.&lt;/p&gt;

&lt;p&gt;Last year, I said:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;So 2017 will probably see less learning of new tools and more general studying of topics I lack depth in. I’m planning to start with working through The Elements of Computing Systems and we’ll see how it goes from there.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I did approximately jack shit towards that goal, or really anything related to it. I struggled to even read books about things I wanted to learn, about computers or &lt;em&gt;anything&lt;/em&gt;, much less actually building anything. I’ve been underestimating how much of a rut I’ve fallen into here, and I’m really not ok with it. Something’s got to give.&lt;/p&gt;

&lt;p&gt;I’ve tried a lot of things to change my habits here and almost all of it has failed. In the past, I’ve focused on trying to suppress distractions, doing stuff like setting up &lt;a href=&quot;http://thegreata.pe/defusing-distracting-defaults&quot;&gt;automated content-blocking&lt;/a&gt;. I think perhaps I haven’t given enough attention to the flip side: filling up that distraction free time with challenging things I want to do. I’m trying some techniques that I’m hopeful will help (chiefly, &lt;a href=&quot;http://calnewport.com/blog/2013/12/21/deep-habits-the-importance-of-planning-every-minute-of-your-work-day/&quot;&gt;variations on time blocking&lt;/a&gt;), but I feel like I need a more concrete goal that’ll give me a hard push in the right direction.&lt;/p&gt;

&lt;p&gt;So: &lt;em&gt;in 2018, I’m going to try averaging one post a week here about something I’m learning, practicing or building&lt;/em&gt;. These can be about any subject, and any length. I’m expecting this to be tough. I think trying for a rough weekly cadence is a good start, though I expect there will be some variation. I’m also giving myself a pass for any week where I’m on vacation, which might be a good incentive to take more of it!&lt;/p&gt;

&lt;h2 id=&quot;onwards&quot;&gt;Onwards&lt;/h2&gt;
&lt;p&gt;Ok, 2018. Let’s do this.&lt;/p&gt;

  &lt;p&gt;&lt;a href=&quot;https://thegreata.pe/articles/2017/12/30/2017-year-end-notes/&quot;&gt;2017 Year End Notes&lt;/a&gt; was originally published by Thomas Mayfield at &lt;a href=&quot;https://thegreata.pe&quot;&gt;Duct Tape and Turing Machines&lt;/a&gt; on December 30, 2017.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[2016 Year End Notes]]></title>
  <link rel="alternate" type="text/html" href="https://thegreata.pe/articles/2016/12/31/2016-year-end-notes/" />
  <id>https://thegreata.pe/articles/2016/12/31/2016-year-end-notes</id>
  <published>2016-12-31T00:00:00-05:00</published>
  <updated>2016-12-31T00:00:00-05:00</updated>
  <author>
    <name>Thomas Mayfield</name>
    <uri>https://thegreata.pe</uri>
    <email>Thomas.Mayfield@gmail.com</email>
  </author>
  <content type="html">&lt;p&gt;I almost didn’t write this. After this year’s US election and the steady global rise of nationalism, well, my usual inward-looking year end review feels a bit trite. But this is the stuff that helps keep me functional and able to take any action at all, so. Here we go.&lt;/p&gt;

&lt;p&gt;I am going to try and set looser goals for next year—more of a direction than specifics. I hope that’ll help me adapt to changes more easily, maybe it’ll just make me lazy. We’ll see.&lt;/p&gt;

&lt;h2 id=&quot;reading&quot;&gt;Reading&lt;/h2&gt;

&lt;p&gt;I read 51 books this year. Hey, I did hit at least one of my &lt;a href=&quot;http://thegreata.pe/2015-year-end-notes&quot;&gt;goals from last year&lt;/a&gt;! Broken down by genre:&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;Genre / Subject&lt;/th&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;Count&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Fantasy&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;28&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Science Fiction&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;9&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Technical&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;5&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Other Non-Fiction&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;5&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Fitness&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;4&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;I’ve joked before that you could plot my chronic stress levels over time by looking at the split of fiction and non-fiction I read. This year, reading mostly fantasy tells the same story: election and post-election stress combined with probably not taking enough vacation tipped me towards reading things that gave my brain a break and good story, instead of challenging it. I’d like to push the ratio a more towards things that make me grow next year, but I don’t regret this year’s choices that helped me not be a rolling emotional breakdown.&lt;/p&gt;

&lt;p&gt;One thing I do regret: I only read 12 books by women, actually doing worse gender ratio-wise than last year. Deciding to start an epic re-read of the Dresden Files after the election accounts for some of the skew here, but not all. I can and should do better next year.&lt;/p&gt;

&lt;p&gt;On a better note, while I’m historically bad at not finishing books even when I’m really disliking them, this year I put down four whole books before the end. That’s almost more than I managed to stop reading in the previous three years combined!&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Favorite Books This Year&lt;/em&gt;:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://www.bookbub.com/books/the-fifth-season-by-n-k-jemisin&quot;&gt;The Fifth Season&lt;/a&gt; / &lt;a href=&quot;https://www.bookbub.com/books/the-obelisk-gate-by-n-k-jemisin&quot;&gt;The Obelisk Gate&lt;/a&gt; by N. K. Jemisin — Absolutely the most powerful works of fiction I read this year. Heartbreaking and mindblowing with great characters, an amazingly realized world, unflinching exploration of empire and oppression, all with brilliantly technically executed storytelling. I can’t wait for The Stone Sky next year.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://www.bookbub.com/books/too-like-the-lightning-by-ada-palmer&quot;&gt;Too Like The Lightning&lt;/a&gt; by Ada Palmer — A wonderful book that I still struggle to &lt;em&gt;describe&lt;/em&gt; well. “Far-future genderqueer Enlightenmentpunk sci-fi” is the closest I can get to an elevator pitch.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://www.bookbub.com/books/children-of-time-by-adrian-tchaikovsky&quot;&gt;Children of Time&lt;/a&gt; by Adrian Tchaikovsky — A great Big Idea sci-fi novel told across the deep time of near-lightspeed travel and the rise and fall of civilizations. Recommended for fans of Vernor Vinge and Charles Stross; NOT recommended for the arachnophobic.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://www.bookbub.com/books/babylon-s-ashes-by-james-s-a-corey&quot;&gt;Babylon’s Ashes&lt;/a&gt; by James S.A. Corey — I truly love when a series I like keeps gets better over time, and The Expanse’s latest entry certainly qualifies. Smart, human-driven space opera.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://www.bookbub.com/books/deep-work-by-cal-newport&quot;&gt;Deep Work&lt;/a&gt; by Cal Newport — A book on the economic and life-statisfaction benefits of developing the ability to deeply focus on hard work for long periods of time. I feel like I’ve been both turning this one over in my head and failing to heed its advice since I read it this January.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Not sure yet whether I won’t set a numeric goal at all for next year or just set a lower one. Either way, I want nudge my brain away from finishing a meh book to hit an arbitrary number and more towards spending time on challenging reads that’ll take longer to digest and work through.&lt;/p&gt;

&lt;h2 id=&quot;fitness&quot;&gt;Fitness&lt;/h2&gt;

&lt;p&gt;A very mixed bag this year.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;First, the bad:&lt;/em&gt; My goal to hit a 1000-pound squat / bench / deadlift total got derailed by injuries in October. I managed to both develop golfer’s elbow and strain an adductor within a week of each other, which sidelined me from training entirely for about a month and a half. Both injuries are slowly improving and I’m back to doing a limited set of movements with low weight and high reps. These were my first serious injuries in about four years of lifting, and not being able to exercise hard around the most of stressful time of the year was not good.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;But, the good:&lt;/em&gt; I think this was the year I figured out how to make nutition work for me. Picking a macro split that’d fuel my training well and tracking what I ate daily via MyFitnessPal actually produced results: I was able to control my weight as I wanted and had much more consistent energy levels. The key is that I’m fine cooking 95% percent of what I eat, and doing so mostly in advance. My wife and I were already in the habit of pre-making dinner ingredients for the week on Sundays (a strategy we picked up from the wonderful Well Fed cookbook series), so our habit changes weren’t huge: just expanding our cookup sessions to include lunches as well. The great thing for me about an &lt;a href=&quot;http://rippedbody.com/clean-eating-vs-iifym-scam/&quot;&gt;IIFYM style of eating&lt;/a&gt; is there’s no food that’s entirely off the table, which is just wonderful psychologically. A slice of pizza or a few drinks out are harder to accurately estimate calorie-wise, so I try to make those a minority of what I consume. But when I do eat them, I just track them with my best guess and keep an eye on the scale to make sure I’m not over or under-estimating my intake.&lt;/p&gt;

&lt;p&gt;Using those strategies, I did my first real cut / bulk cycle, dropping down to about ~14% bodyfat before starting a slow bulk back up. Only downside is that I managed to get hurt right at the peak of said bulk, so I’m carrying a little more body fat than I’d prefer until my weights are back to challenging enough that another cut won’t drop muscle along with fat. So it goes; it bothers me a lot less since I know I’ve got perfectly workable strategies for getting back to where I want to be once I can train harder again.&lt;/p&gt;

&lt;p&gt;Also, I &lt;em&gt;did&lt;/em&gt; get stronger this year. I’d last tested each of the powerlifts in August, winding up with a 425 deadlift, 320 squat and 230 bench, all at a lighter bodyweight than I started the year with. I suspect I’d improved beyond those later, but since I got hurt before I tested again, who knows?&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Lessons for 2017:&lt;/em&gt; I’m really happy with my nutritional strategy; I noted that even when I’d go through periods of not tracking as stringently, the habits I’d developed kept things from going way off the rails. That’s the hallmark of something sustainable, so small adjustments aside, I think batch cooking and calorie/macro tracking are here to stay.&lt;/p&gt;

&lt;p&gt;As far as lifting, getting injured and having to take time off has gotten me to step back a bit and think about what I want out of lifting and how it squares with how I’ve been training. Generally, I want to: feel good, look good, and be strong, in that order. I trained most of last year using programming tailored towards powerlifters; that is, programming designed to specifically increase your one-rep max in the competition lifts: squat, bench, and deadlift. This wasn’t totally unreasonable: performance in those lifts correlates strongly with all of my stated goals, which is why I’d set the 1000-pound total goal in the first place. But I’m not a powerlifter and have no desire to ever actually enter a competition, so while I &lt;em&gt;can&lt;/em&gt; use powerlifting programs to work towards my goals, they might not be the optimal set of risk/reward tradeoffs for them.&lt;/p&gt;

&lt;p&gt;What I’m thinking will be inspiring my training next year:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;http://danjohn.net/&quot;&gt;Dan John&lt;/a&gt; is always right. Focus on the fundamental human movements under load: squat, hinge, push, pull, loaded carry. Emphasize hypertrophy and joint mobility. Spend most of the year doing park bench workouts, not bus bench workouts (seriously, go read &lt;a href=&quot;https://www.amazon.com/Intervention-Course-Corrections-Athlete-Trainer-ebook/dp/B00ABNEN3G/&quot;&gt;Intervention&lt;/a&gt;).&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;http://strengtheory.com/&quot;&gt;Greg Nuckols&lt;/a&gt; agrees that even competitive lifters &lt;a href=&quot;http://strengtheory.com/complete-strength-training-guide/#Implementation&quot;&gt;should get most of their lifting volume from bodybuilding-style hypertrophy training&lt;/a&gt;, because hypertrophy is one of the main predictors of absolute strength (that’s under our control, anyway) and it is a &lt;a href=&quot;https://www.strengthandconditioningresearch.com/2014/07/08/injury-strength-sports/&quot;&gt;remarkably low injury risk style of training&lt;/a&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;I’ve found I really hate it when workouts take over an hour, so I’m going to try to add a lot more circuits/supersetting for my accessory work. Probably will take some ideas from &lt;a href=&quot;https://www.youtube.com/channel/UC8Rt7E2JVz4fPmC8AhjDoaA&quot;&gt;Brian Alsruhe&lt;/a&gt; and &lt;a href=&quot;http://rosstraining.com/&quot;&gt;Ross Enamait&lt;/a&gt; here.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;programming&quot;&gt;Programming&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;Personal:&lt;/em&gt; I didn’t do a great deal of programming in my spare time this year, outside of:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;a toy Clojurescript app&lt;/li&gt;
  &lt;li&gt;some upkeep on Literate Minuteman / lyeberry&lt;/li&gt;
  &lt;li&gt;several fizzled attempts at a lifting tracker&lt;/li&gt;
  &lt;li&gt;a deeper dive into Vimscript&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I think there’s two things going on, neither of which is really a bad thing.&lt;/p&gt;

&lt;p&gt;One, I simply had a challenging year at work (in a good way). Spending most of the day, five days a week pushing my brain and abilities on one thing means I’m not going to have as many cycles for the same thing in my personal time. This is fine and normal.&lt;/p&gt;

&lt;p&gt;Two, for the last decade or so, my model of learning new things tech-wise is to go sideways: I seek out a new spin on something I already know a bit about. This usually manifests itself as learning a new language or framework: a new way to do frontend development, a new high-level concurrency model, a new way to interact with a relational database, and so on. This year, that started to feel a bit flat. It took me a while to realize that I’m feeling a lot more interested in going deep in areas where my knowledge is scattered and ad-hoc: learning about the internals of stuff like operating systems and networking. So 2017 will probably see less learning of new tools and more general studying of topics I lack depth in. I’m planning to start with working through &lt;a href=&quot;https://mitpress.mit.edu/books/elements-computing-systems&quot;&gt;The Elements of Computing Systems
&lt;/a&gt; and we’ll see how it goes from there.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Professional&lt;/em&gt;: I can add Clojure to the list of technologies I’m allowed to complain about, because my team shipped our first production Clojure app this year. Some jumbled thoughts:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Clojure turned out to be a great choice for what we used it for: an API service that had concurrency needs beyond what you could easily do in Ruby (our default language at work). But I’m not sure I want to use it yet for the kind of everyday web development where I’d normally default to Rails. Particularly, I want something more ORM-y for database access than the Clojure community likes (&lt;a href=&quot;http://sqlkorma.com/&quot;&gt;Korma&lt;/a&gt; seems closest) and a better story for full-stack, real-browser web testing (a la Poltergeist/Capybara).&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;If we were using ClojureScript, that’d probably change the calculus a bit, though the JS community seems to be absorbing a lot of the good ideas that ClojureScript trailblazed (immutable global state atoms, live-reloading workflows).&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;core.async is a beautiful way to model concurrency and communication between different parts of a program. It absolutely is in need of a deeper, complete writeup on how to use it, however; the &lt;a href=&quot;http://www.braveclojure.com/core-async/&quot;&gt;CFTBAT chapter on core.async&lt;/a&gt; is great, but you also need to read the entire API docs to really get how to use it.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;I still miss having a debugger.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;The error messages and stacktraces are still way harder to read than they should be. It’s great to see communities like Elixir and Elm making this a priority and it makes me sad that the Cognitect crew don’t seem to feel any urgency about this.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;thats-all-folks&quot;&gt;That’s All, Folks!&lt;/h2&gt;

&lt;p&gt;Let’s whoop 2017’s ass.&lt;/p&gt;

  &lt;p&gt;&lt;a href=&quot;https://thegreata.pe/articles/2016/12/31/2016-year-end-notes/&quot;&gt;2016 Year End Notes&lt;/a&gt; was originally published by Thomas Mayfield at &lt;a href=&quot;https://thegreata.pe&quot;&gt;Duct Tape and Turing Machines&lt;/a&gt; on December 31, 2016.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[Notes On Writing Clojure In Vim]]></title>
  <link rel="alternate" type="text/html" href="https://thegreata.pe/articles/2016/11/25/notes-on-writing-clojure-in-vim/" />
  <id>https://thegreata.pe/articles/2016/11/25/notes-on-writing-clojure-in-vim</id>
  <published>2016-11-25T00:00:00-05:00</published>
  <updated>2016-11-25T00:00:00-05:00</updated>
  <author>
    <name>Thomas Mayfield</name>
    <uri>https://thegreata.pe</uri>
    <email>Thomas.Mayfield@gmail.com</email>
  </author>
  <content type="html">&lt;p&gt;There a lot of things I like about Clojure as a language, but it requires a lot of tooling setup to not have a bad time. There’s a big chunk of the Clojure community that uses Emacs and the admittedly fantastic &lt;a href=&quot;https://github.com/clojure-emacs/cider&quot;&gt;CIDER&lt;/a&gt; environment, but Vim salwarts who don’t want to ditch years of editor customization aren’t left out in the cold. It took a little more digging and research, but I managed to put together a Vim/Clojure setup with the fast feedback loop that’s so important to productive Clojure dev.&lt;/p&gt;

&lt;p&gt;What follows is annotated bits from my .vimrc - you can see the (&lt;a href=&quot;https://github.com/thegreatape/dot-files/blob/master/vimrc&quot;&gt;full source here&lt;/a&gt;). I’m using &lt;a href=&quot;https://github.com/VundleVim/Vundle.vim&quot;&gt;Vundle&lt;/a&gt; to manage my plugins.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-vim&quot; data-lang=&quot;vim&quot;&gt;Plugin &lt;span class=&quot;s1&quot;&gt;'tpope/vim-classpath'&lt;/span&gt;
Plugin &lt;span class=&quot;s1&quot;&gt;'tpope/vim-fireplace.git'&lt;/span&gt;
Plugin &lt;span class=&quot;s1&quot;&gt;'guns/vim-clojure-static.git'&lt;/span&gt;

autocmd Filetype clojure nmap &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;buffer&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; gf &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;Plug&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;FireplaceDjump&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;These plugins are the bare minimum you need to get going. They’ll give you syntax highlighting, indentation and a bunch of useful IDE-like tools. To get the most out of these, you’ll want to start a repl session in another window or tab; fireplace will automatically connect to it if present. The shortcuts I use the most:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;K&lt;/code&gt; - show docs for the function under the cursor.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;gf&lt;/code&gt; - go to source for symbol under the cursor. great for zipping around your project or diving down into a libraries source. (remapped above as &lt;code class=&quot;highlighter-rouge&quot;&gt;gf&lt;/code&gt;, it’s &lt;code class=&quot;highlighter-rouge&quot;&gt;[C-d&lt;/code&gt; by default)&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;cpr&lt;/code&gt; - evals the current buffer into the connected repl; if in a clojure.test buffer, runs the tests and prints any failures to the quickfix buffer.&lt;/li&gt;
&lt;/ul&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-vim&quot; data-lang=&quot;vim&quot;&gt;Plugin &lt;span class=&quot;s1&quot;&gt;'guns/vim-sexp'&lt;/span&gt;
Plugin &lt;span class=&quot;s1&quot;&gt;'tpope/vim-sexp-mappings-for-regular-people'&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;I think structural editing of s-expressions is one of the underrated perks of working in a lisp. You can a long ways with Vim’s built-in text objects (like &lt;code class=&quot;highlighter-rouge&quot;&gt;ci(&lt;/code&gt; for change-inside-parenthesis), but these plugins let you do more advanced stuff like pushing symbols in and out of s-expresions and smartly moving expression boundaries.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-vim&quot; data-lang=&quot;vim&quot;&gt;Plugin &lt;span class=&quot;s1&quot;&gt;'guns/vim-slamhound'&lt;/span&gt;

autocmd Filetype clojure nnoremap &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;buffer&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;leader&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;sh&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;Slamhound&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;cr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/technomancy/slamhound&quot;&gt;Slamhound&lt;/a&gt; is an editor agnostic tool for managing Clojure namespaces’ require statements—run it on a file and it’ll remove unused imports and add requires for un-imported symbols. I bound it to &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;leader&amp;gt;sh&lt;/code&gt;.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-vim&quot; data-lang=&quot;vim&quot;&gt;Plugin &lt;span class=&quot;s1&quot;&gt;'dgrnbrg/vim-redl'&lt;/span&gt;
autocmd Filetype clojure imap &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;buffer&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;Up&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;Plug&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;clj_repl_uphist&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;
autocmd Filetype clojure imap &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;buffer&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;Down&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;Plug&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;clj_repl_downhist&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The Clojure community seems a little hostile to breakpoint debuggers for some reason, but I find them really useful. vim-redl gives you two useful things: a pretty good in-Vim repl (start one in the current file’s namespace with &lt;code class=&quot;highlighter-rouge&quot;&gt;:ReplHere&lt;/code&gt;) and actual, factual breakpoint debugging. See the project’s README for the setup, but once included in your lein profile, you can use &lt;code class=&quot;highlighter-rouge&quot;&gt;redl.core/break&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;redl.core/continue&lt;/code&gt; to debug functions run within Vim’s repl session. I rebound &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;Up&amp;gt;&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;Down&amp;gt;&lt;/code&gt; in insert mode to page through the command history.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-vim&quot; data-lang=&quot;vim&quot;&gt;Plugin &lt;span class=&quot;s1&quot;&gt;'kien/rainbow_parentheses.vim'&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;g:rbpt_colorpairs&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
&lt;span class=&quot;se&quot;&gt;  \&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'blue'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;        &lt;span class=&quot;s1&quot;&gt;'#FF6000'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
&lt;span class=&quot;se&quot;&gt;  \&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'cyan'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;        &lt;span class=&quot;s1&quot;&gt;'#00FFFF'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
&lt;span class=&quot;se&quot;&gt;  \&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'darkgreen'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;   &lt;span class=&quot;s1&quot;&gt;'#00FF00'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
&lt;span class=&quot;se&quot;&gt;  \&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'LightYellow'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'#c0c0c0'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
&lt;span class=&quot;se&quot;&gt;  \&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'blue'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;        &lt;span class=&quot;s1&quot;&gt;'#FF6000'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
&lt;span class=&quot;se&quot;&gt;  \&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'cyan'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;        &lt;span class=&quot;s1&quot;&gt;'#00FFFF'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
&lt;span class=&quot;se&quot;&gt;  \&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'darkgreen'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;   &lt;span class=&quot;s1&quot;&gt;'#00FF00'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
&lt;span class=&quot;se&quot;&gt;  \&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'LightYellow'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'#c0c0c0'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
&lt;span class=&quot;se&quot;&gt;  \&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'blue'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;        &lt;span class=&quot;s1&quot;&gt;'#FF6000'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
&lt;span class=&quot;se&quot;&gt;  \&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'cyan'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;        &lt;span class=&quot;s1&quot;&gt;'#00FFFF'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
&lt;span class=&quot;se&quot;&gt;  \&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'darkgreen'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;   &lt;span class=&quot;s1&quot;&gt;'#00FF00'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
&lt;span class=&quot;se&quot;&gt;  \&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'LightYellow'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'#c0c0c0'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
&lt;span class=&quot;se&quot;&gt;  \&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'blue'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;        &lt;span class=&quot;s1&quot;&gt;'#FF6000'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
&lt;span class=&quot;se&quot;&gt;  \&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'cyan'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;        &lt;span class=&quot;s1&quot;&gt;'#00FFFF'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
&lt;span class=&quot;se&quot;&gt;  \&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'darkgreen'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;   &lt;span class=&quot;s1&quot;&gt;'#00FF00'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
&lt;span class=&quot;se&quot;&gt;  \&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'LightYellow'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'#c0c0c0'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
&lt;span class=&quot;se&quot;&gt;  \&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;g:rbpt_max&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;16&lt;/span&gt;

autocmd &lt;span class=&quot;nb&quot;&gt;BufEnter&lt;/span&gt; *&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;cljs&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;*&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;clj&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;*&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;cljs&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;hl RainbowParenthesesActivate
autocmd &lt;span class=&quot;nb&quot;&gt;BufEnter&lt;/span&gt; *&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;cljs&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;*&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;clj&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;*&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;cljs&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;hl RainbowParenthesesLoadRound
autocmd &lt;span class=&quot;nb&quot;&gt;BufEnter&lt;/span&gt; *&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;cljs&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;*&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;clj&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;*&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;cljs&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;hl RainbowParenthesesLoadSquare
autocmd &lt;span class=&quot;nb&quot;&gt;BufEnter&lt;/span&gt; *&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;cljs&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;*&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;clj&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;*&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;cljs&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;hl RainbowParenthesesLoadBraces&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Rainbow parentheses give you different colored parens by depth of nesting, which is a nice way to eyeball when you’ve got inbalanced s-expressions. The default colors didn’t play great with my color scheme (&lt;a href=&quot;https://github.com/nanotech/jellybeans.vim&quot;&gt;jellybeans&lt;/a&gt;), so I customized the colors a bit here.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-vim&quot; data-lang=&quot;vim&quot;&gt;&lt;span class=&quot;k&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;!&lt;/span&gt; IsFireplaceConnected&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; has_key&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;fireplace#platform&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'connection'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;sr&quot;&gt;/Fireplace: :Connect to a REPL or install classpath.vim/&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt; &quot; false
  &lt;span class=&quot;k&quot;&gt;endtry&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;endfunction&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;!&lt;/span&gt; NreplStatusLine&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; IsFireplaceConnected&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'nREPL Connected'&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'No nREPL Connection'&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;endif&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;endfunction&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;!&lt;/span&gt; SetBasicStatusLine&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;set&lt;/span&gt; statusline&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;%&lt;span class=&quot;k&quot;&gt;f&lt;/span&gt;   &quot; path &lt;span class=&quot;k&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;file&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;set&lt;/span&gt; statusline&lt;span class=&quot;p&quot;&gt;+=&lt;/span&gt;\   &quot; separator
  &lt;span class=&quot;k&quot;&gt;set&lt;/span&gt; statusline&lt;span class=&quot;p&quot;&gt;+=&lt;/span&gt;%&lt;span class=&quot;k&quot;&gt;m&lt;/span&gt;  &quot; modified flag
  &lt;span class=&quot;k&quot;&gt;set&lt;/span&gt; statusline&lt;span class=&quot;p&quot;&gt;+=&lt;/span&gt;%&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;  &quot; switch &lt;span class=&quot;k&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;right&lt;/span&gt; side
  &lt;span class=&quot;k&quot;&gt;set&lt;/span&gt; statusline&lt;span class=&quot;p&quot;&gt;+=&lt;/span&gt;%&lt;span class=&quot;k&quot;&gt;y&lt;/span&gt;  &quot; &lt;span class=&quot;k&quot;&gt;filetype&lt;/span&gt; of &lt;span class=&quot;k&quot;&gt;file&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;endfunction&lt;/span&gt;

autocmd Filetype clojure &lt;span class=&quot;k&quot;&gt;call&lt;/span&gt; SetBasicStatusLine&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
autocmd Filetype clojure &lt;span class=&quot;k&quot;&gt;set&lt;/span&gt; statusline&lt;span class=&quot;p&quot;&gt;+=&lt;/span&gt;\ &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;%&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;NreplStatusLine&lt;span class=&quot;p&quot;&gt;()}]&lt;/span&gt;  &quot; REPL connection status
autocmd &lt;span class=&quot;nb&quot;&gt;BufLeave&lt;/span&gt; *&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;cljs&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;*&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;clj&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;*&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;cljs&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;hl  &lt;span class=&quot;k&quot;&gt;call&lt;/span&gt; SetBasicStatusLine&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;And lastly, I did a little customization of the status line to show whether or not Fireplace was connected to a running Clojure repl. All of the tools above will work without being connected to existing repl process—but because of the JVM’s startup time, running one of their commands cold will freeze Vim while a new process is spun up to eval the code to do whatever you just asked. Running the same command with a warm repl connected is basically instant. I added some functions add either &lt;code class=&quot;highlighter-rouge&quot;&gt;nREPL Connected&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;No nREPL Connection&lt;/code&gt; to the status line so that I remember to start a new repl before I hit K to look up some docs… and grind my teeth while Vim freezes for 10 seconds.&lt;/p&gt;

&lt;h2 id=&quot;repl-integration&quot;&gt;REPL integration&lt;/h2&gt;

&lt;p&gt;While vim doesn’t have a true integrated REPL-as-subprocess like Emacs’s CIDER does, you can get a pretty nice setup within tmux by binding some keys to send s-expressions to a repl running an adjacent pane. I &lt;a href=&quot;/clojure-vim-and-tmux-using-your-editor-as-a-repl-scratchpad/&quot;&gt;wrote up my notes on that strategy here&lt;/a&gt;.&lt;/p&gt;

  &lt;p&gt;&lt;a href=&quot;https://thegreata.pe/articles/2016/11/25/notes-on-writing-clojure-in-vim/&quot;&gt;Notes On Writing Clojure In Vim&lt;/a&gt; was originally published by Thomas Mayfield at &lt;a href=&quot;https://thegreata.pe&quot;&gt;Duct Tape and Turing Machines&lt;/a&gt; on November 25, 2016.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[Defusing Distracting Defaults: An Experiment In Automating Better Habits]]></title>
  <link rel="alternate" type="text/html" href="https://thegreata.pe/articles/2016/08/28/defusing-distracting-defaults/" />
  <id>https://thegreata.pe/articles/2016/08/28/defusing-distracting-defaults</id>
  <published>2016-08-28T00:00:00-04:00</published>
  <updated>2016-08-28T00:00:00-04:00</updated>
  <author>
    <name>Thomas Mayfield</name>
    <uri>https://thegreata.pe</uri>
    <email>Thomas.Mayfield@gmail.com</email>
  </author>
  <content type="html">&lt;p&gt;Ever have one of those moments where you’re browsing Instagram/Facebook/Twitter/whatever, realize you’ve burned an hour you meant to use working on something else, close the tab in disgust… then realize you’ve reopened the same site without even thinking about it?&lt;/p&gt;

&lt;p&gt;Yeah. Long, uninterrupted blocks of focus are incredibly important for creative work. But for me, good intentions alone ain’t gonna get me there.&lt;/p&gt;

&lt;p&gt;There are plenty of distracting things blockers for OS X out there: StayFocusd, Freedom, Focus, and I’m sure tons more. But none that I tried quite worked for me, and I’ve been trying to think about why:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;em&gt;Permanently blocking distractions&lt;/em&gt;: Absolute blocking works for things that I actually get no value out of (Hacker News, I’m looking at you). But the most insidious stuff are sites that I sometimes get value from: keeping up with friends on Twitter, the good parts of Reddit, and so on. I still want to use them, just… deliberately and not instead of what I mean to be working on.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;em&gt;Fixed amount of time per day&lt;/em&gt;: A fixed time allowance for distraction sounds good in theory, but it doesn’t prevent me from absent-mindedly opening distractions at the start of the day, which is typically when I have the most energy I’d like to spend on something else.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;em&gt;Scheduled blocking&lt;/em&gt;: I could never figure out the right schedule that wound up helping, to be honest.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Upon reflection, I think what I wanted was a mindfulness aid. Ideally, I’d have all distractions blocked by default when I open my laptop, and have a command that I run to be able to access distractions for a set period of time, reverting to blocking everything when done: a break with an enforced time limit. I could run as many of these as I want, but each time has to be a deliberate decision.&lt;/p&gt;

&lt;p&gt;None of the existing tools quite did this, but I was able to wire up something that did. Here’s how:&lt;/p&gt;

&lt;h2 id=&quot;1-install-focus&quot;&gt;1. Install Focus&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://heyfocus.com/&quot;&gt;Focus&lt;/a&gt; is a great distraction blocking app for OS X and well worth your money. It has two modes: scheduled blocking or manually enabled periods of blocking, neither of which are quite what I was after.&lt;/p&gt;

&lt;p&gt;Luckily, it’s scriptable.&lt;/p&gt;

&lt;h2 id=&quot;2-install-hammerspoon-and-start-focus-on-wake&quot;&gt;2. Install Hammerspoon and start Focus on wake&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;http://www.hammerspoon.org/&quot;&gt;Hammerspoon&lt;/a&gt; is an automation tool for OS X that can watch for events and run Lua scripts in response. It’s quite powerful and the APIs are pretty extensive. I set it up to start Focus upon system wake, so even if I’ve disabled Focus earlier or closed my laptop in the middle of a break, when I come back, Focus is running.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-lua&quot; data-lang=&quot;lua&quot;&gt;&lt;span class=&quot;c1&quot;&gt;--&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;-- ~/.hammerspoon/init.lua&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;-- start Focus.app on wake&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;--&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;local&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;wakeCallback&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;nil&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;wakeCallback&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;event&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;caffeinate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;watcher&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;systemDidWake&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;hs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;execute&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'open focus://focus'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;wakeWatcher&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;caffeinate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;watcher&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;wakeCallback&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;wakeWatcher&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h2 id=&quot;3-set-up-unfocus-break-script&quot;&gt;3. Set up unfocus break script&lt;/h2&gt;

&lt;p&gt;The final piece is a script I wrote myself—it turns off blocking for a fixed period, then re-enables it at the end, keeping me from turning what I meant to be 5 minutes of break into a lost hour or two.&lt;/p&gt;

&lt;p&gt;Put the following somewhere on your path and make it executable:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;c1&quot;&gt;#!/usr/bin/env ruby&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;unfocus&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;remaining&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;sb&quot;&gt;`open focus://unfocus`&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;remaining&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&amp;gt;&amp;gt; Unfocused, refocusing in &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;format_time&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;remaining&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;     &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\r&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;remaining&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;sleep&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;format_time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;remaining&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;s2&quot;&gt;&quot;%02d:%02d&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;remaining&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;divmod&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;60&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;refocus&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;Break over!&quot;&lt;/span&gt;
  &lt;span class=&quot;sb&quot;&gt;`open focus://focus`&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;unfocus&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;ARGV&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;15&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;to_i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;60&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;refocus&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;rescue&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Interrupt&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;refocus&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;exit&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The break defaults to 15 minutes, but you can pass a custom number as an argument to the script (so &lt;code class=&quot;highlighter-rouge&quot;&gt;unfocus 5&lt;/code&gt; gives you a 5 minute break). When run, it’ll display a countdown timer of how long your break has remaining, then exit and re-enable Focus. It’ll even re-enable Focus if you accidentally kill the script while it’s running.&lt;/p&gt;

&lt;p&gt;And that’s it! I’ve just gotten this set up today, but I’m pleased with how it’s working so far. Time will tell if it’s a good long-term solution for me.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Updated Feb 26th, 2017: A previous solution here used &lt;a href=&quot;http://www.bernhard-baehr.de/&quot;&gt;sleepwatcher&lt;/a&gt;, but it began starting slowly after upgrading to Sierra. I replaced it with with Hammerspoon.&lt;/em&gt;&lt;/p&gt;

  &lt;p&gt;&lt;a href=&quot;https://thegreata.pe/articles/2016/08/28/defusing-distracting-defaults/&quot;&gt;Defusing Distracting Defaults: An Experiment In Automating Better Habits&lt;/a&gt; was originally published by Thomas Mayfield at &lt;a href=&quot;https://thegreata.pe&quot;&gt;Duct Tape and Turing Machines&lt;/a&gt; on August 28, 2016.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[Fitness Resources Megapost]]></title>
  <link rel="alternate" type="text/html" href="https://thegreata.pe/articles/2016/05/28/fitness-resources-megapost/" />
  <id>https://thegreata.pe/articles/2016/05/28/fitness-resources-megapost</id>
  <published>2016-05-28T00:00:00-04:00</published>
  <updated>2016-05-28T00:00:00-04:00</updated>
  <author>
    <name>Thomas Mayfield</name>
    <uri>https://thegreata.pe</uri>
    <email>Thomas.Mayfield@gmail.com</email>
  </author>
  <content type="html">&lt;p&gt;&lt;em&gt;Last updated March 3rd, 2018: see &lt;strong&gt;&lt;a href=&quot;#changelog&quot;&gt;changelog&lt;/a&gt;&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;I’m a huge fitness nerd, and I’ll talk your ear off about all aspects of physical training given half a chance. I frequently wind up sending reading recommendations to people who’re interested in knowing more after chatting, and figured it was time to put together a big list of the fitness resources I’ve gotten the most out of.&lt;/p&gt;

&lt;p&gt;Disclaimer: This is my hobby, not my profession. I don’t train people and I’m not remarkably strong, fast, or flexible. But just as a regular person: this stuff has been lifechanging for me. I hope it helps someone else too.&lt;/p&gt;

&lt;h2 id=&quot;strength&quot;&gt;&lt;a name=&quot;strength&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#strength&quot;&gt;Strength&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;Absolute strength is the athletic attribute that has the most carryover into everything else you do, in sports and in life. Everyone should develop a base level of strength, whether your goal getting jacked, running a faster 5k, or just aging gracefully.&lt;/p&gt;

&lt;h3 id=&quot;general-resources&quot;&gt;&lt;a name=&quot;general-resources&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#general-resources&quot;&gt;General Resources&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;Some books for building a conceptual framework to understand what fitness is all about and how to define and progress towards your individual goals:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;http://www.strongerbyscience.com/art-and-science/&quot;&gt;The Art &amp;amp; Science of Lifting&lt;/a&gt;&lt;/strong&gt; by Greg Nuckols and Omar Isof — Two relatively short ebooks that are probably the best introduction to the principals of successful strength training. As the titles suggest, they cover both practical techniques as well as the backing scientific research. For further reading, &lt;a href=&quot;http://www.strongerbyscience.com&quot;&gt;Greg’s Stronger By Science&lt;/a&gt; is a goldmine of good information.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;http://www.amazon.com/Fit-Lon-Kilgore/dp/0615497063&quot;&gt;Fit&lt;/a&gt;&lt;/strong&gt; by Kilgore, Hartman, Laseck — Another good deep guide to the practice and science of fitness. Where &lt;em&gt;Art &amp;amp; Science&lt;/em&gt; covers mostly getting strong, &lt;em&gt;Fit&lt;/em&gt; goes into conditioning, mobility, and a bit of anatomy as well.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://www.amazon.com/Intervention-Course-Corrections-Athlete-Trainer-ebook/dp/B00ABNEN3G&quot;&gt;Intervention&lt;/a&gt;&lt;/strong&gt; by Dan John — One of those books I keep coming back to. Enough ideas, philosophy and guidelines to keep you busy for a lifetime. I know I’m due for a re-read because I haven’t been doing my loaded carries…&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;beginner-barbell-programs&quot;&gt;&lt;a name=&quot;beginner-barbell-programs&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#beginner-barbell-programs&quot;&gt;Beginner Barbell Programs&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;When you’re new to strength training, you can progress in strength very rapidly. Beginner programs are tailored to take advantage of that. The ones below are all slightly different, but they’ll all get you strong. Pick one, read it, understand how it works, then run it ‘til it stops working for you. This usually takes between 3-9 months.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;http://www.amazon.com/Greyskull-LP-Second-John-Sheaffer/dp/0615635571&quot;&gt;The Greyskull LP&lt;/a&gt;&lt;/strong&gt; by John Sheaffer — This is the program I ran when I started training with barbells. It’s a three-day-a-week, reasonably customizable program that’s a touch more hypertrophy oriented than a many of the commonly recommended beginner programs. &lt;a href=&quot;https://www.reddit.com/r/Fitness/wiki/phraks-gslp&quot;&gt;Phrack’s variant&lt;/a&gt; is a good base for those unsure of how to customize the program.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://www.reddit.com/r/Fitness/comments/44hnbc/strength_training_using_the_gzcl_method_from/&quot;&gt;GZCLP&lt;/a&gt;&lt;/strong&gt; by Cody Lefever — By the same author of the GZCL Method mentioned below, GZCLP is a version of his training methodology designed for new lifters. I really like how it’s set up and it has some features that in retrospect I could have benefitted from during my beginner days. Namely, it has progression across multiple rep ranges, a ton of extra back work, and actual structure around adding/progressing accessory work. The only downside here I can see is that Cody’s writeup is fairly technical and might be daunting for totally new lifters. You’ll want to read and understand the Tier 1/2/3 system from Cody’s original &lt;a href=&quot;http://swoleateveryheight.blogspot.com/2014/07/the-gzcl-method-simplified_13.html&quot;&gt;GZCL method&lt;/a&gt; first; then hopefully the GZCLP adaptation for newer lifters will make sense.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;intermediate--advanced-barbell-programs&quot;&gt;&lt;a name=&quot;intermediate-advanced-barbell-programs&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#intermediate-advanced-barbell-programs&quot;&gt;Intermediate / Advanced Barbell Programs&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;After you’ve exhausted the strength gains a beginner’s program can provide, you’ll want to switch to something that progresses slower. Here are some I like:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;http://swoleateveryheight.blogspot.com/2014/07/the-gzcl-method-simplified_13.html&quot;&gt;The GZCL Method&lt;/a&gt;&lt;/strong&gt; — This is a powerlifting-focused “method” rather than a “program”: for each lift you want to improve, it gives you guidelines for how many total reps at different intensities you should accumulate over the course of a week. Want to spread your squat work out over three days? Just get the reps in. Want just squat one day a week? Just get the reps in. This makes it super adaptable for whatever life throws at you, and lets you keep your daily schedule a bit more varied from training block to training block (if you want) without program hopping entirely.&lt;/p&gt;

    &lt;p&gt;For a starting point, &lt;a href=&quot;http://swoleateveryheight.blogspot.com/2016/02/gzcl-applications-adaptations.html&quot;&gt;Applications and Adapations&lt;/a&gt; has some example GZCL programs written up, along with a longer treatise on different ways to structure and progress work in the various tiers. Fair warning: it’s a higher volume method than most of the LPs above, so you’ll probably want to take some time ramping up the amount of work you’re doing rather than jumping in with both feet.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;http://www.strongerbyscience.com/store/&quot;&gt;Average to Savage&lt;/a&gt;&lt;/strong&gt; — My take on what a good intermediate &lt;a href=&quot;https://www.bikejames.com/strength/park-bench-vs-bus-bench-workouts-which-is-best-for-you/&quot;&gt;park bench&lt;/a&gt; program can look like. Bundled in the Training Toolkit from Greg Nuckols, this is a really solid general strength and hypertrophy program. This would be first recommendation if you’re fresh off a beginner program and trying to figure out what’s next; it’ll really help you develop the work capacity you need to make progress as an intermediate. It’s a 4-day-a-week program that runs in 4 week blocks for 16 total weeks, starting with lighter, very high-rep sets and titrating down to heavier, low-rep sets by the end. I’ve found myself returning to this program over and over after experimenting with other approaches.&lt;/p&gt;

    &lt;p&gt;Also useful: the bundle comes with a guide to sticking points in the big lifts; as in, if you get stuck at this certain point in your squat, these are the muscles that likely the issue and how to bring them up to speed.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;http://www.strongerbyscience.com/train-smarter/&quot;&gt;Greg Nuckols Specialty Programs&lt;/a&gt;&lt;/strong&gt; — Yup, another Greg Nuckols joint. Instead of a single program, these are a collection of specialty programs that for building an individual lift (squat, bench, deadlift) that you can combine depending on your goals. Greg has recommendations on effective ways to combine them, but it’s pretty flexible. Well thought out, good stuff.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://www.amazon.com/Simplest-Effective-Training-System-Strength-ebook/dp/B00B1HOZ6G&quot;&gt;5/3/1&lt;/a&gt;&lt;/strong&gt; — I feel like I have to mention this program here for the sake of completeness as it’s sort of all over every training discussion on the internet. I ran the basic version of 5/3/1 when I finished my linear progression, and I think that was a mistake. It was lower frequency and volume than my beginner’s program and didn’t help me develop much work capacity. I think it could be workable with the addition of a bunch of different modifications from the followup &lt;a href=&quot;https://www.amazon.com/Beyond-Simple-Training-Extraordinary-Results-ebook/dp/B00DT5FIYQ&quot;&gt;Beyond 5/3/1&lt;/a&gt; for extra volume and intensity, but you need to have a little experience under your belt to pick the right modifications (I certainly did not when I tried running it). I’ll probably not use this program again unless I need to dial things way down for a weight cut or some kind of unexpected stressful life situation.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;cardiovascular-conditioning&quot;&gt;&lt;a name=&quot;conditioning&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#conditioning&quot;&gt;Cardiovascular Conditioning&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;Yes, &lt;a href=&quot;http://www.strongerbyscience.com/avoiding-cardio-could-be-holding-you-back/&quot;&gt;you should do cardio&lt;/a&gt; even if your goal is just getting stronger.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://www.amazon.com/Tactical-Barbell-II-Conditioning-Black-ebook/dp/B0143HDCWS&quot;&gt;Tactical Barbell&lt;/a&gt;&lt;/strong&gt; — Second in a series about fitness for police/military/fighters, focusing on how to combine cardiovascular fitness with strength training. Very well thought out, sustainable programming and a good guide (along with the &lt;a href=&quot;https://www.amazon.com/Tactical-Barbell-Definitive-Strength-Operational-ebook/dp/B00VB143ZA&quot;&gt;first volume&lt;/a&gt;) on how to productively integrate cardio workout with strength training.&lt;/p&gt;

    &lt;p&gt;This is tailored for professionals who need to be strong and in shape, but can’t be walking around sore all the time. Probably not the first stop for someone who’s looking to increase their powerlifting numbers, get bigger, or lose weight—this is all about pure performance. It’s also not for the absolute couch potato or someone who’s strong but way out of cardio shape. Apparently the author has a new book coming out this year for raw beginners.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;http://rosstraining.com/blog/never-gymless/&quot;&gt;Never Gymless&lt;/a&gt;&lt;/strong&gt; and &lt;strong&gt;&lt;a href=&quot;http://rosstraining.com/blog/infinite-intensity/&quot;&gt;Infinite Intensity&lt;/a&gt;&lt;/strong&gt; — Ross Enamait is a boxing coach and his guides heavily focus on high-intensity conditioning. Never Gymless got me back into fitness after a 3-year layoff after college, and I owe him a huge debt for that. Both are great resources if you don’t have a gym nearby and need to get some low-tech work done. Fair warning: if you aren’t already in exceptional shape, you’ll almost certainly have to scale down Ross’s workouts at first.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;http://www.amazon.com/Kettlebell-Simple-Sinister-Pavel-Tsatsouline/dp/0989892409&quot;&gt;Simple &amp;amp; Sinister&lt;/a&gt;&lt;/strong&gt; and &lt;strong&gt;&lt;a href=&quot;http://www.amazon.com/Kettlebell-Strength-Secret-Soviet-Supermen/dp/0938045695&quot;&gt;Enter the Kettlebell&lt;/a&gt;&lt;/strong&gt; — Pavel Tsatsouline is credited with intoducing the kettlebell to America. Kettlebell are a tremendous high-intensity conditioning tool and both these books are a great intro to using them. Just ignore the macho Russian shtick and do some swings, comrade.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;mobility--fixing-pain-and-injuries&quot;&gt;&lt;a name=&quot;mobility&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#mobility&quot;&gt;Mobility / Fixing Pain and Injuries&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;I’m a notoriously unlimber person and my 20s were full of the kind of problems you hear people complain about in their 40s: RSI in my wrists, constant low back “tweaks”, and intermittent shooting sciatic nerve pain. Two things helped me fix and keep the these problems at bay:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Getting stronger (see above).&lt;/li&gt;
  &lt;li&gt;Mobility work (see below).&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;As it turns out, the tools you need to move well through the full range of motion while lifting have huge overlap with the tools you can use to fix an awful wide variety of chronic musculur pain.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://www.youtube.com/playlist?list=PLB67wXqPqtMcNVA-UndNUy7bahGJzLQbT&quot;&gt;MobilityWOD videos&lt;/a&gt;&lt;/strong&gt; — Kelly Starrett is a mad scientist of mobility, and the amount of content he has out there is pretty overwhelming. He also has a book out that’s a little more organized, called (sigh) &lt;a href=&quot;http://www.amazon.com/Becoming-Supple-Leopard-2nd-Performance/dp/1628600837&quot;&gt;Becoming A Supple Leopard&lt;/a&gt;, but I’d honestly just recommend hitting up that YouTube channel, doing one video a day and see what you learn about how your body reacts to each session.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;http://www.amazon.com/Trigger-Point-Therapy-Workbook-Self-Treatment/dp/1608824942&quot;&gt;The Trigger Point Therapy Workbook&lt;/a&gt;&lt;/strong&gt; — Picked up an earlier edition of this one to help me with an RSI scare almost a decade ago, and it’s been helping me debug my aches and pains ever since. Incredibly valuable just for the referred pain maps.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://romwod.com/&quot;&gt;ROMWOD&lt;/a&gt;&lt;/strong&gt; — Pretty much Yin Yoga marketed at Crossfitters, but I’ve been finding it valuable enough to stay a subscriber. Lots of long holds and has been doing wonders for my hip mobility. Hardly a one-stop solution: everyone’s mobility is messed up in different ways (my ankles need a ton more work than they program). That said, it’s a good 80/20 routine, and has been helping me free up the rest of mobilizing time to focus on my own worst issues.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=iN-FPh7r1yg&quot;&gt;Yoga for Weightlifters&lt;/a&gt;&lt;/strong&gt; — For a little more active stretching, I really love this particular Vinyasa video. Half an hour, targeted at lifters, and always makes me feel like a million bucks.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;nutrition&quot;&gt;&lt;a name=&quot;nutrition&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#nutrition&quot;&gt;Nutrition&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;Getting my diet on point and actually being accountable for what I’m eating has made a huge difference in my energy levels and how much control I feel I have over how I look. Wish I’d taken it more seriously earlier.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;http://rippedbody.jp/complete-diet-nutrition-set-up-guide/&quot;&gt;Andy Morgan’s Diet Guide&lt;/a&gt;&lt;/strong&gt; — An amazingly thorough, evidence-backed guide to setting up, tracking and adjusting your nutrition depending on your goals. Andy Morgan has put an absolute practical ton of information out on his site for free. Start here.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://renaissanceperiodization.com/shop/the-renaissance-diet/&quot;&gt;The Renessiance Diet&lt;/a&gt;&lt;/strong&gt; — Very much a scientific do-this, eat-that guide to diet, focusing on maximum athletic performance.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://www.amazon.com/Fat-Loss-Happens-Monday-Habit-Based-ebook/dp/B00PKPTRWM&quot;&gt;Fat Loss Starts On Monday&lt;/a&gt;&lt;/strong&gt; — A Dan John collaboration with Josh Hillis; where the above two resources focus mainly on what do to, this book has a lot of useful ideas on the psychological side. Good stuff on building the kind of habits to you need to adhere to a good nutrition plan and still have a loving, healthy relationship with food.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://www.amazon.com/Well-Fed-Paleo-Recipes-People-ebook/dp/B0083LX1EU/&quot;&gt;Well Fed&lt;/a&gt;&lt;/strong&gt; and &lt;strong&gt;&lt;a href=&quot;https://www.amazon.com/Well-Fed-Paleo-Recipes-People-ebook/dp/B00HG3XCBS/&quot;&gt;Well Fed 2&lt;/a&gt;&lt;/strong&gt; — A pair of cookbooks that have been instrumental in how my household cooks these days. You can ignore the Paleo ideology stuff (personally, I empirically don’t react to wheat or dairy one way or another), but pay attention to the Weekly Cookup. Doing the bulk of my cooking in advance has been a HUGE part of turning my nutrition around, and Melissa Joulwan has great ideas around how to do that and keep things fresh and interesting at the same time.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;podcasts&quot;&gt;&lt;a name=&quot;#podcasts&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#podcasts&quot;&gt;Podcasts&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;Fitness podcasts I’ve found worth listening to:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;http://revivestronger.com/podcast/&quot;&gt;Revive Stronger&lt;/a&gt; Powerlifting and bodybuilding podcast that does a lot of good interviews with coaches and sports scientists. The Q&amp;amp;A sessions with regular guests (Mike Israetel in particular) are great.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;http://3dmusclejourney.com/podcast/&quot;&gt;3D Muscle Journey&lt;/a&gt; Weekly roundtables from the coaches at 3DMJ, mostly bodybuilding focused.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://thejugglife.com/&quot;&gt;The Jugg Life&lt;/a&gt; Powerlifting and Olympic weightlifting, more focused on the competitive side of the sports.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;specific-exercises-form-guides-cues-and-tips&quot;&gt;&lt;a name=&quot;#form-guides&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#form-guides&quot;&gt;Specific Exercises: Form Guides, Cues, and Tips&lt;/a&gt;&lt;/h2&gt;

&lt;h3 id=&quot;squat&quot;&gt;Squat&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;http://www.strongerbyscience.com/how-to-squat/&quot;&gt;Stronger By Science: How To Squat&lt;/a&gt;&lt;/strong&gt; Greg Nuckols’ novel-length guide on the squat. If you have a question about squatting, it’s probably answered here.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=U5zrloYWwxw&quot;&gt;How to Squat, With Chris Duffin&lt;/a&gt;&lt;/strong&gt; The tips from this video on how to brace and set up correctly really helped me. The trunk bracing cues are applicable to the deadlift as well.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=DrwiddA_8CQ&quot;&gt;How to Squat Max Aita Style&lt;/a&gt;&lt;/strong&gt; Some cues about how to stay upright in a squat that really clicked for me.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=Fob2wWEC72s&quot;&gt;Hip Structure and the Squat&lt;/a&gt;&lt;/strong&gt; Everyone has to squat a little differently due to the structure of their hips. If you’re struggling to figure out a squat stance that works for you, check out some of these assessments.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;bench&quot;&gt;Bench&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;http://www.strongerbyscience.com/how-to-bench/&quot;&gt;Stronger By Science: How To Bench&lt;/a&gt;&lt;/strong&gt; Another Greg Nuckols tome, this time on the bench. As complete a guide as you’ll find.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=hZPYTIPb2To&quot;&gt;How to Bench Press, with Eric Spoto&lt;/a&gt;&lt;/strong&gt; This video helped me out tremendously with my bench setup.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=iuGsGdwb5TM&quot;&gt;Brian Alsruhe: Identifying and Fixing Weak Points in the Bench&lt;/a&gt;&lt;/strong&gt; Good rundown of what various sticking points in the bench mean, and how to fix them.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;deadlift&quot;&gt;Deadlift&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;http://www.strongerbyscience.com/how-to-deadlift/&quot;&gt;Stronger By Science: How To Deadlift&lt;/a&gt;&lt;/strong&gt; Seeing a theme here? Yet again Greg Nuckols pens the most complete guide to a single movement you’ll see.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=oiDczs9j75E&quot;&gt;Deadlift Like The Mad Scientist Chris Duffin&lt;/a&gt;&lt;/strong&gt; Another set of simple form cues from Chris Duffin, this time for the deadlift.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=bv6dJK11zNQ&quot;&gt;Breathing, Abdominal Bracing &amp;amp; Total Tension&lt;/a&gt;&lt;/strong&gt; Cody Lefever, author of the GZCL Method, talks about breathing, bracing and tension in the deadlift.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;overhead-press&quot;&gt;Overhead Press&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;&lt;a href=&quot;https://youtube.com/watch?v=sqKhLR1zRaU&quot;&gt;Justin Lascek: 3 Press Fixes&lt;/a&gt;&lt;/strong&gt; I still credit this video for giving me the tools to make my overpress press into my best proportional lift.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;pullups&quot;&gt;Pullups&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;&lt;a href=&quot;https://youtube.com/watch?v=kHSJwnBPj-Y&quot;&gt;Make Pullups 10x Easier and More Effective&lt;/a&gt;&lt;/strong&gt; Max Shank talks about scapular retration and shoulder position in the chinup. I’ve seen this help people who couldn’t do a single pullup to being able to do one, just by fixing their starting position.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;kettlebell-swing&quot;&gt;Kettlebell Swing&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=GYHbu2LRqD0&quot;&gt;How to Properly Perform and Teach the Kettlebell Swing&lt;/a&gt;&lt;/strong&gt; Good tutorial on how to learn the hinge motion that’s key to the swing (it’s not a squat!).&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;kettlebell-snatch&quot;&gt;Kettlebell Snatch&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=bkeWDzUMVZI&quot;&gt;How to avoid banging your wrist in Kettlebell Snatch&lt;/a&gt;&lt;/strong&gt; This Steve Cotter was one of those “oooooh” moments for me—I could never get Pavel’s snatch technique to work for me with dropping the bell on my wrist at the top of the movement.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;kettlebell-clean&quot;&gt;Kettlebell Clean&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;&lt;a href=&quot;https://www.jensinkler.com/fix-your-kettlebell-clean/&quot;&gt;Fix Your Kettlebell Clean&lt;/a&gt;&lt;/strong&gt; Another Light Dawns on Marblehead moment for yours truly—I never quite got how to clean without landing the bell heavily on my arm until I tried out Jen’s cues.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;changelog&quot;&gt;&lt;a name=&quot;changelog&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#changelog&quot;&gt;Changelog&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;2018-03-03&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Added Podcast section&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;2017-06-24&lt;/strong&gt;:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Fixed link to Phrack’s Greyskull variant&lt;/li&gt;
  &lt;li&gt;Used better link to Cody’s GZCLP reddit post&lt;/li&gt;
  &lt;li&gt;Removed Starting Strength&lt;/li&gt;
  &lt;li&gt;Clarified thoughts on 5/3/1 and Greyskull&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;2017-03-12&lt;/strong&gt;:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Added Jen Sinkler’s “Fix Your Kettlebell Clean”&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;2017-02-05&lt;/strong&gt;:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Added Greg Nuckols’ bench and deadlift guides&lt;/li&gt;
  &lt;li&gt;Added Brian Alsruhe’s bench weakpoints guide&lt;/li&gt;
  &lt;li&gt;Added Quinn Henoch’s squat stance assessments.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;2016-05-28&lt;/strong&gt;:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Original Post&lt;/li&gt;
&lt;/ul&gt;

  &lt;p&gt;&lt;a href=&quot;https://thegreata.pe/articles/2016/05/28/fitness-resources-megapost/&quot;&gt;Fitness Resources Megapost&lt;/a&gt; was originally published by Thomas Mayfield at &lt;a href=&quot;https://thegreata.pe&quot;&gt;Duct Tape and Turing Machines&lt;/a&gt; on May 28, 2016.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[Customizing The Clojure REPL]]></title>
  <link rel="alternate" type="text/html" href="https://thegreata.pe/articles/2016/05/01/customizing-the-clojure-repl/" />
  <id>https://thegreata.pe/articles/2016/05/01/customizing-the-clojure-repl</id>
  <published>2016-05-01T00:00:00-04:00</published>
  <updated>2016-05-01T00:00:00-04:00</updated>
  <author>
    <name>Thomas Mayfield</name>
    <uri>https://thegreata.pe</uri>
    <email>Thomas.Mayfield@gmail.com</email>
  </author>
  <content type="html">&lt;p&gt;One of the things that makes Clojure great is its fantastic REPL. “REPL” stands for “read eval print loop”—it’s a command-line console where you can type in Clojure code and run it. It’s a great way to experiment and learn; I’ll often prototype a piece of code in the REPL before moving it back over to my editor to save in my project.&lt;/p&gt;

&lt;h3 id=&quot;less-typing-required&quot;&gt;Less typing required&lt;/h3&gt;

&lt;p&gt;My Clojure REPL sessions tend to be pretty long-lived, and I’ll often build up a mini-library of helper functions and imported namespaces as I go. This can get a little jarring when I have to restart the REPL session; I’ll hit the up arrow to repeat my last command, only to not have it work because the code references something I’d defined in the last session that’s now gone.&lt;/p&gt;

&lt;p&gt;As a partial solution, it turns out you can customize the environment the Clojure REPL starts up with. By default, &lt;code class=&quot;highlighter-rouge&quot;&gt;lein repl&lt;/code&gt; starts using the &lt;code class=&quot;highlighter-rouge&quot;&gt;user&lt;/code&gt; namespace, but it’s not any different than any other Clojure namespace. You can customize it by create a file in your project that describes the &lt;code class=&quot;highlighter-rouge&quot;&gt;user&lt;/code&gt; namespace. For example, if I always want to have &lt;a href=&quot;https://github.com/marick/Midje&quot;&gt;Midje&lt;/a&gt;’s testing functions loaded, I can add it to the &lt;code class=&quot;highlighter-rouge&quot;&gt;require&lt;/code&gt; part of the namespace’s &lt;code class=&quot;highlighter-rouge&quot;&gt;ns&lt;/code&gt; macro:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-clojure&quot; data-lang=&quot;clojure&quot;&gt;&lt;span class=&quot;c1&quot;&gt;; user.clj&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;ns&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
 &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;:require&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;midje.repl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]))&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Now whenever I start a REPL session, all the functions from &lt;code class=&quot;highlighter-rouge&quot;&gt;korma.core&lt;/code&gt; will be automatically required and ready to use. We can do the same thing with all the Clojure code-loading mechanisms: require, refer, alias, and use. The &lt;code class=&quot;highlighter-rouge&quot;&gt;user&lt;/code&gt; namespace works the same as any other Clojure namespace; it just happens to be the one that our REPL loads by default.&lt;/p&gt;

&lt;h3 id=&quot;helper-functions&quot;&gt;Helper functions&lt;/h3&gt;

&lt;p&gt;This means we can also define helper functions in our &lt;code class=&quot;highlighter-rouge&quot;&gt;user&lt;/code&gt; namespace. For example, if I want to stop and start my &lt;a href=&quot;https://github.com/tolitius/mount&quot;&gt;mount components&lt;/a&gt; easily, I might define some helpers to do that (like the &lt;a href=&quot;http://www.luminusweb.net/&quot;&gt;Luminus&lt;/a&gt; project does in its generated starter application):&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-clojure&quot; data-lang=&quot;clojure&quot;&gt;&lt;span class=&quot;c1&quot;&gt;; user.clj&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;ns&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
 &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;:require&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;midje.repl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
           &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mount.core&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;:as&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mount&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]))&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;

&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;defn&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;mount/start&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;

&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;defn&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stop&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;mount/stop&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;

&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;defn&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;restart&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;stop&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Now those functions are available every time I start my REPL:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;restart&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;2016-05-01 13:46:22,647][INFO][luminus.http-server] starting HTTP server on port 3000&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h3 id=&quot;keeping-this-stuff-out-of-production&quot;&gt;Keeping this stuff out of production&lt;/h3&gt;

&lt;p&gt;You probably don’t want to have development-only code like REPL customization loaded in your production application. If you’re using Leiningen to manage your project, you can define directories that are only loaded when the development profile is used:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-clojure&quot; data-lang=&quot;clojure&quot;&gt;&lt;span class=&quot;c1&quot;&gt;; project.clj&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;:profiles&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;:dev&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
 &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;:source-paths&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;env/development/clj&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Now, we can move our &lt;code class=&quot;highlighter-rouge&quot;&gt;user.clj&lt;/code&gt; from above into &lt;code class=&quot;highlighter-rouge&quot;&gt;env/development/clj/user.clj&lt;/code&gt;, and it’ll only be loaded when we start up a REPL session in our development environment.&lt;/p&gt;

  &lt;p&gt;&lt;a href=&quot;https://thegreata.pe/articles/2016/05/01/customizing-the-clojure-repl/&quot;&gt;Customizing The Clojure REPL&lt;/a&gt; was originally published by Thomas Mayfield at &lt;a href=&quot;https://thegreata.pe&quot;&gt;Duct Tape and Turing Machines&lt;/a&gt; on May 01, 2016.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[How Slack Could Respect Your Time And Attention (Better)]]></title>
  <link rel="alternate" type="text/html" href="https://thegreata.pe/articles/2016/04/16/how-slack-could-respect-your-time-and-attention-better/" />
  <id>https://thegreata.pe/articles/2016/04/16/how-slack-could-respect-your-time-and-attention-better</id>
  <published>2016-04-16T00:00:00-04:00</published>
  <updated>2016-04-16T00:00:00-04:00</updated>
  <author>
    <name>Thomas Mayfield</name>
    <uri>https://thegreata.pe</uri>
    <email>Thomas.Mayfield@gmail.com</email>
  </author>
  <content type="html">&lt;p&gt;Slack, like any communication tool, can function anywhere on a spectrum from “effective medium” to “weapon of mass distraction”. Where your team’s experience falls depends mostly on how deliberately you set up your expectations of each other. But no tool is truly neutral and I think there are changes that Slack could make to help prevent chat fatigue and encourage longer periods of attention and focus.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;The default notification settings are invasive. If I told you to install software that let anyone in your company flash a notice onto your screen, sliding it over whatever you’re working on at any time—well, you’d probably think I was loony. But that’s exactly what Slack’s default notification settings do, plus playing a little noise in case you managed to keep your attention off the thing flickering at the edge of your vision. Organizations default to the path of least resistance, so software defaults are incredibly powerful. Let users opt into more interrupt-y preferencs if they want.&lt;/li&gt;
  &lt;li&gt;Do Not Disturb mode is a good idea, but has some problems in practice.
    &lt;ul&gt;
      &lt;li&gt;Anyone who tries to DM someone in DND mode gets warned that this person has enabled DND and asks if you’re sure you want to interrupt them. That’s great! But… it doesn’t seem to do this if you already have a conversation ongoing with someone. So if I’m chatting with a coworker and then turn on DND mode to buckle down and focus for a while, if they DM me again within some unspecified period of time, they don’t get any sort of notice that I’ve changed my availability (unless they’re eagle-eyed and see the tiny icon next to me change).&lt;/li&gt;
      &lt;li&gt;It still shows unread rooms highlighed; if you open up Slack for any reason at all while in DND mode, then you’re confronted with all the things you might be Missing Out On. Ideally, DND mode would quiet &lt;em&gt;all&lt;/em&gt; unread notices until you disable it.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;There’s no way to differentiate a DM meant to interrupt someone right now (“hi the site is burning down”) vs something that can be read whenever (“check out this link next time you’re taking a break”). This is doubly problematic because there’s no way to turn off the unread count for DMs anywhere it appears; even with notifications turned down to their lowest possible settings, privately messaging someone is an attention grab even if you want to it be an asynchronous ping.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Complaining is easy and product design is hard. But I’d still like to see more decisions that move Slack towards being a tool that focuses time and attention instead of tending to consume them.&lt;/p&gt;

  &lt;p&gt;&lt;a href=&quot;https://thegreata.pe/articles/2016/04/16/how-slack-could-respect-your-time-and-attention-better/&quot;&gt;How Slack Could Respect Your Time And Attention (Better)&lt;/a&gt; was originally published by Thomas Mayfield at &lt;a href=&quot;https://thegreata.pe&quot;&gt;Duct Tape and Turing Machines&lt;/a&gt; on April 16, 2016.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[2015 Year End Notes]]></title>
  <link rel="alternate" type="text/html" href="https://thegreata.pe/articles/2015/12/27/2015-year-end-notes/" />
  <id>https://thegreata.pe/articles/2015/12/27/2015-year-end-notes</id>
  <published>2015-12-27T00:00:00-05:00</published>
  <updated>2015-12-27T00:00:00-05:00</updated>
  <author>
    <name>Thomas Mayfield</name>
    <uri>https://thegreata.pe</uri>
    <email>Thomas.Mayfield@gmail.com</email>
  </author>
  <content type="html">&lt;p&gt;Even if New Year’s resolutions are a terrible way to make lasting habit changes, I like using the end of the year as a reminder to take stock of how I did with respect to &lt;a href=&quot;http://thegreata.pe/2014-year-end-notes/&quot;&gt;last year’s goals&lt;/a&gt; and see what I want to change.&lt;/p&gt;

&lt;h2 id=&quot;reading&quot;&gt;Reading&lt;/h2&gt;

&lt;p&gt;This was the first year in four years that I missed my &lt;a href=&quot;https://www.goodreads.com/challenges/3082-2015-reading-challenge&quot;&gt;50 book reading challenge&lt;/a&gt;, having only read 44 books in 2015.&lt;/p&gt;

&lt;p&gt;What happened? Mostly, life. My wife and I bought a house in August and for those that haven’t gone through that process, house-buying will happily hoover up all your free time and then some. I also changed jobs in April, resulting in a shorter commute from then until August, when we moved into the new place. I do a significant chunk of my reading on the bus and subway, and even a commute just three stops shorter made a difference in my reading time when compounded twice a day, five times a week.&lt;/p&gt;

&lt;p&gt;That’s not to say that 44 books in a year isn’t respectable; I’m still pleased by how I’ve maintained my rebuilt reading habit. I just need to make sure I stay on track at this point.&lt;/p&gt;

&lt;p&gt;The breakdown of what I read by genre:&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;Genre / Subject&lt;/th&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;Count&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Fantasy&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;19&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Science Fiction&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;12&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Technical/Business&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;4&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Fitness&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;3&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Other Non-Fiction&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;6&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;I also set two specific reading goals last year:&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Read more books by women&lt;/em&gt;: Last year, only 5 out of the 53 books I read were by women. This year, it was 14 out of 44—from 9% to 30% is a improvement, but this is still something I need to pay more attention to.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Read 8 technical books&lt;/em&gt;: This was an outright fail: I read 4 technical books, of which 3 could be more accurately described as books on tech cultural/business/careers.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Favorite Books This Year&lt;/em&gt;:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.amazon.com/gp/product/0765325535&quot;&gt;The Half-Made World&lt;/a&gt; by Felix Gilman&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.amazon.com/Nemesis-Games-Expanse-James-Corey/dp/0316217581&quot;&gt;Nemesis Games&lt;/a&gt; by James S.A. Corey&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.amazon.com/Traitor-Baru-Cormorant-Seth-Dickinson/dp/0765380722&quot;&gt;The Traitor Baru Cormorant&lt;/a&gt; by Seth Dickison&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.amazon.com/Cinder-Spires-Aeronauts-Windlass/dp/0451466802&quot;&gt;The Aeronaut’s Windlass&lt;/a&gt; by Jim Butcher&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.amazon.com/Internet-Garbage-Sarah-Jeong-ebook/dp/B011JAV030/&quot;&gt;The Internet of Garbage&lt;/a&gt; by Sarah Jeong&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;2016-plans&quot;&gt;2016 Plans&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Try for 50 books / year again. Commute reading from the new place seems to put me roughly on track for this by itself, so I don’t think I’ll be stretching for this one.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Do better in terms of reading non-fiction more broadly. This is important for creative work and being a well-rounded person. I’ve noticed that my non-fiction / fiction ratio skews towards fiction in direct correlation with my chronic stress levels, so hopefully not changing jobs and buying a house will help push me in the right direction.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;lifting&quot;&gt;Lifting&lt;/h2&gt;

&lt;p&gt;After having failed to hit any of my lifting goals for 2014, I set what I thought were a set of more conversative and balanced goals for 2015.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Last Year’s Goals&lt;/em&gt;:&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;Lift&lt;/th&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;Goal 1RM&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Deadlift&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;405 lbs&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Overhead Press&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;170 lbs&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Kettlebell Swing&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;200 x 53 lbs in 10 minutes&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;How’d I do?&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Deadlift&lt;/em&gt;: Nailed it. Hit a 415lbs pull in October. Might have had more in the tank—that was at the tail end of a workout, after the regular working sets.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Overhead Press&lt;/em&gt;: Remember how I moved? Now I’ve got a squat rack and bar in my basement! It’s wonderful—except that the ceilings are too low for me to overhead press a loaded barbell. I didn’t beat my OHP PR (160lbs) before I moved, and I’m now focusing on rebuilding my bench press instead (which I’d neglected to focus on overhead. sigh.)&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Kettlebell Swing&lt;/em&gt;: In retrospect, this was a misguided goal. I wanted a goal that’d encourage me to improve my cardiovascular conditioning, but this proved very challenging to try and improve at the same time as improving my deadlift. Both are the same kind of fundamental human movement (hip hinge) and both are super taxing to the same parts of the body. I’d consistently feel beat up and under-recovered when trying to improve the swing and the deadlift concurrently. I got to 150 swings in 7:30 sometime in early November, but have since decided to back off pushing the swings. More on this in next year’s goals.&lt;/p&gt;

&lt;p&gt;But!&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Bringing Back Squatting Back&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;An unexpected bit of awesome this year is that I’ve resumed back squatting, pain-free! A couple things contributed to this:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Consistent mobility work on my hips and ankles have slowly had lasting effects.&lt;/li&gt;
  &lt;li&gt;I got a pair of Olympic lifting shoes: the stable, raised heel helps compensate for some of the missing dorsiflexion in my ankles.&lt;/li&gt;
  &lt;li&gt;Getting a lifting belt helped teach me to brace my core correctly.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;2016-goals&quot;&gt;2016 Goals&lt;/h4&gt;

&lt;p&gt;Strength is my main focus, and I’m going to set my 2016 goals accordingly. Here’s what my powerlifting total looks like right now:&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;Lift&lt;/th&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;Current 1RM&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Deadlift&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;415 lbs&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Squat&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;300 lbs (est)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Bench Press&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;230 lbs (est)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;&lt;em&gt;Total&lt;/em&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;&lt;em&gt;945 lbs (est)&lt;/em&gt;&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;By next year, I want to total over 1000 lbs. That’s 20 lbs on each lift, on average. I think that’s doable if I’m focused on strength and avoid getting hurt.&lt;/p&gt;

&lt;p&gt;I don’t want to neglect conditioning while doing this, but I want to train it in a way that’s more complimentary to my strength training. I want to be in good shape cardio-wise for general health, improved recovery, and to avoid going completely bearmode in the winter. So I’m just going to shoot for consistency: I want to average 2 cardio-centric workouts a week. If I’m feeling great, this can be HIIT-style swings, complexes, burpees, whatever. If I’m beat up or low on recovery budget, it’ll be LISS-style running or stationary bike. Hopefully the freedom to adjust the style and intensity of my conditioning will make this easier to run along a serious strength training program.&lt;/p&gt;

&lt;h2 id=&quot;programming&quot;&gt;Programming&lt;/h2&gt;

&lt;p&gt;In terms of my outside-work projects, this year was almost exclusively devoted to mucking about in functional languages.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;I &lt;a href=&quot;https://github.com/thegreatape/lyeberry&quot;&gt;rewrote the library scraping backend&lt;/a&gt; of Literate Minuteman in Clojure and wound up building a &lt;a href=&quot;https://github.com/thegreatape/ring-raygun&quot;&gt;Ring middleware error-tracking wrapper&lt;/a&gt; for &lt;a href=&quot;raygun.io&quot;&gt;Raygun.io&lt;/a&gt;. I haven’t done much with Clojure since, but I’ve love a chance to try out ClojureScript at some point.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;I wrote a &lt;a href=&quot;https://github.com/thegreatape/conway&quot;&gt;multiplayer Conway’s Game of Life&lt;/a&gt; implementation in Elixir using the Phoenix framework. Elixir is a really delightful language with great tooling. I love the idea of building in primitive-level features for what happens when things crash at the language and VM level.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;I experimented with using Emacs (using modal editing via &lt;a href=&quot;https://bitbucket.org/lyro/evil/wiki/Home&quot;&gt;evil&lt;/a&gt; as my editor full-time from August to November. Ultimately, I learned that I do want to be able to deeply customize my editor, I found that the Emacs ideal seems to be trying to integration all of your tools into Emacs itself, binding them together with lisp. I found that for me, I wanted instead to compose my tools using the shell. For example, &lt;a href=&quot;http://magit.vc/&quot;&gt;Magit&lt;/a&gt; is a pretty amazing interface to Git for Emacs, but while using it I missed the history and easy composition with other basic unix tools that command-line git offered. I’m now back to tmux and vim, but I could see pulling emacs out again if I started working on a project where Emacs has superior IDE-like tooling, though—&lt;a href=&quot;http://www.alchemist-elixir.org/&quot;&gt;Alchemist&lt;/a&gt; for Elixir and &lt;a href=&quot;https://github.com/clojure-emacs/cider&quot;&gt;CIDER&lt;/a&gt; for Clojure come to mind. I’m glad I’ve got a ready-to-go evil config set up if that happens.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;2016-plans-1&quot;&gt;2016 Plans&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Dive deeper into Elixir / OTP and learn enough Erlang to read libraries written in it.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Try out &lt;a href=&quot;http://elm-lang.org/&quot;&gt;Elm&lt;/a&gt;. I’m fascinated by the idea of a type system that helps you instead of fights you. Plus, any project whose goals is to have the best compiler error messages of any language has their priorities straight. And it has a time-traveling debugger. This I’ve got to see.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Up my relational database game. What I know about SQL and relational database use has always been picked up just-in-time to solve whatever issues were in front of me. I want to go deeper into theory and best practices to get ahead of the curve here, as my job right now regularly involves writing, tuning and debugging queries against medium-large tables (tens of millions of rows). I’m going to start by reading &lt;a href=&quot;http://www.amazon.com/Art-SQL-Stephane-Faroult/dp/0596008945&quot;&gt;The Art of SQL&lt;/a&gt; early in the new year.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

  &lt;p&gt;&lt;a href=&quot;https://thegreata.pe/articles/2015/12/27/2015-year-end-notes/&quot;&gt;2015 Year End Notes&lt;/a&gt; was originally published by Thomas Mayfield at &lt;a href=&quot;https://thegreata.pe&quot;&gt;Duct Tape and Turing Machines&lt;/a&gt; on December 27, 2015.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[Setting Up Evil-Mode Friendly Ctags in Emacs]]></title>
  <link rel="alternate" type="text/html" href="https://thegreata.pe/articles/2015/10/24/setting-up-evil-mode-friendly-ctags-in-emacs/" />
  <id>https://thegreata.pe/articles/2015/10/24/setting-up-evil-mode-friendly-ctags-in-emacs</id>
  <published>2015-10-24T00:00:00-04:00</published>
  <updated>2015-10-24T00:00:00-04:00</updated>
  <author>
    <name>Thomas Mayfield</name>
    <uri>https://thegreata.pe</uri>
    <email>Thomas.Mayfield@gmail.com</email>
  </author>
  <content type="html">&lt;p&gt;Despite my &lt;a href=&quot;/emacs-and-evil-mode-field-notes/&quot;&gt;failed experiment&lt;/a&gt; with evil-mode back in January, I wound up switching over to evil-powered Emacs full time earlier this summer. I love having modal editing combined with truly deep extensibility, and I’ve been focusing my tweaking on changes that let Emacs help me explore and understand code faster.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://ctags.sourceforge.net/&quot;&gt;Ctags&lt;/a&gt; is a program that can parse code in many different language and generate an index of defined symbols—stuff like class names, method names, constants and so on. Text editors can be configured to use this index to do things like jump to where a particular symbol is defined (instead of just grepping for where the symbol occurs).&lt;/p&gt;

&lt;p&gt;Here’s how I set up Ctags in Emacs.&lt;/p&gt;

&lt;h2 id=&quot;install-ctags&quot;&gt;Install Ctags&lt;/h2&gt;

&lt;p&gt;OS X ships with an older version of Ctags that can’t generate a tags index in the format that Emacs expects. I installed the latest version via Homebrew:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;brew install ctags&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h2 id=&quot;tag-generation&quot;&gt;Tag Generation&lt;/h2&gt;

&lt;p&gt;Tags can be generated on the command line pretty easily—&lt;code class=&quot;highlighter-rouge&quot;&gt;ctags -Re&lt;/code&gt; will recursively parse and index all files below the current directory, in Emacs format. However, it’s handy to be able to regenerate them from within Emacs, especially if you’re switching git branches and want to quickly purge stale tags. The following lets me that do for the current &lt;a href=&quot;http://batsov.com/projectile/&quot;&gt;projectile&lt;/a&gt; project with &lt;code class=&quot;highlighter-rouge&quot;&gt;M-x regenerate-tags&lt;/code&gt;:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-emacs-lisp&quot; data-lang=&quot;emacs-lisp&quot;&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;defun&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;regenerate-tags&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;interactive&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;tags-directory&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;directory-file-name&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;projectile-project-root&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))))&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;shell-command&lt;/span&gt;
     &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;format&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;ctags -f %s -e -R %s&quot;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;tags-file-name&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;tags-directory&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))))&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Rather than re-running this on the entire project whenever a file changes, I used the &lt;code class=&quot;highlighter-rouge&quot;&gt;ctags-update&lt;/code&gt; package to do so incrementally on save. I’m just enabling it for when I’m in &lt;code class=&quot;highlighter-rouge&quot;&gt;enhanced-ruby-mode&lt;/code&gt; right now.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-emacs-lisp&quot; data-lang=&quot;emacs-lisp&quot;&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;use-package&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;ctags-update&lt;/span&gt;
  &lt;span class=&quot;ss&quot;&gt;:ensure&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;t&lt;/span&gt;
  &lt;span class=&quot;ss&quot;&gt;:config&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;progn&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;add-hook&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;'enh-ruby-mode-hook&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;'turn-on-ctags-auto-update-mode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h2 id=&quot;tag-navigation&quot;&gt;Tag Navigation&lt;/h2&gt;

&lt;p&gt;Now that we can generate and update a tags file, we can start using it to explore our code faster. I’ve found the following keys in normal mode:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;gf&lt;/code&gt; goes to the first match for the tag under the cursor. If I’ve got the symbol &lt;code class=&quot;highlighter-rouge&quot;&gt;User&lt;/code&gt; under the cursor, I can hit &lt;code class=&quot;highlighter-rouge&quot;&gt;gf&lt;/code&gt; and go to where the &lt;code class=&quot;highlighter-rouge&quot;&gt;User&lt;/code&gt; class or module is defined.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;gn&lt;/code&gt; goes to the next match—if there are multiple matching tags (e.g. I’ve got multiple &lt;code class=&quot;highlighter-rouge&quot;&gt;User&lt;/code&gt; classes in the same project), this cycles to the next one.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;gb&lt;/code&gt; pops me back to where I was before jumping.&lt;/li&gt;
&lt;/ul&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-emacs-lisp&quot; data-lang=&quot;emacs-lisp&quot;&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;define-key&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;evil-normal-state-map&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;kbd&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;gf&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;lambda&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;interactive&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;find-tag&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;find-tag-default-as-regexp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))))&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;define-key&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;evil-normal-state-map&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;kbd&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;gb&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;'pop-tag-mark&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;define-key&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;evil-normal-state-map&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;kbd&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;gn&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;lambda&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;interactive&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;find-tag&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;last-tag&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h2 id=&quot;tag-search&quot;&gt;Tag Search&lt;/h2&gt;

&lt;p&gt;Using a fuzzy matcher to search through the tags index is a great way to zip around a codebase. I use &lt;a href=&quot;https://emacs-helm.github.io/helm/&quot;&gt;Helm&lt;/a&gt; for as-you-type filtering for all sorts of things—emacs functions, project files, and now, tags! I bound Helm’s built-in tag filter to &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;leader&amp;gt;y&lt;/code&gt;:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-emacs-lisp&quot; data-lang=&quot;emacs-lisp&quot;&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;evil-leader/set-key&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;y&quot;&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;'helm-etags-select&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The default behavior of the filtering left something to be desired, however. Matching tag candidate were sorted alphabetically, which mean that if I was looking for the module Searchable, the results would look like this (with the top item selected):&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;AuthorSearchable&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;
BookSearchable
Searchable&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;What I really wanted was the closest item to my search to be on top. As it turns out, the shortest string that still matches the filtering text winds up being a decent hueristic for this. I did a bit of poking around in the helm-etags source, and found an empty function that’s meant to allow users to define their own custom behavior for Helm sources. Perfect!&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-emacs-lisp&quot; data-lang=&quot;emacs-lisp&quot;&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;defun&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;my-etags-sort-function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;candidates&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;source&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sort&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;candidates&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;lambda&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;length&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;length&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))))&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;defmethod&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;helm-setup-user-source&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;source&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;helm-source&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;when&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;equal&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;oref&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;source&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Etags&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;oset&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;source&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:filtered-candidate-transformer&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;'my-etags-sort-function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Now, when I run the above search, the module I was looking for is on top and selected by default:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;Searchable&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;
BookSearchable
AuthorSearchable&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;There’s still more to tweak—the Emacs motto, I think—but I’m pretty pleased with my tags setup so far.&lt;/p&gt;

  &lt;p&gt;&lt;a href=&quot;https://thegreata.pe/articles/2015/10/24/setting-up-evil-mode-friendly-ctags-in-emacs/&quot;&gt;Setting Up Evil-Mode Friendly Ctags in Emacs&lt;/a&gt; was originally published by Thomas Mayfield at &lt;a href=&quot;https://thegreata.pe&quot;&gt;Duct Tape and Turing Machines&lt;/a&gt; on October 24, 2015.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[Extracting Testable Javascript From jQuery Soup]]></title>
  <link rel="alternate" type="text/html" href="https://thegreata.pe/articles/2015/06/03/extracting-testable-javascript-from-jquery-soup/" />
  <id>https://thegreata.pe/articles/2015/06/03/extracting-testable-javascript-from-jquery-soup</id>
  <published>2015-06-03T00:00:00-04:00</published>
  <updated>2015-06-03T00:00:00-04:00</updated>
  <author>
    <name>Thomas Mayfield</name>
    <uri>https://thegreata.pe</uri>
    <email>Thomas.Mayfield@gmail.com</email>
  </author>
  <content type="html">&lt;p&gt;I’m not sure where the phrase “jQuery Soup” originated, but it’s an apt description of a failure mode that Javascript code can fall into as it grows. It’s characterized by code that has little structure and no separation of concerns, mixing together HTTP calls, DOM manipulation, user event handling and business logic into a big pile of callbacks.&lt;/p&gt;

&lt;p&gt;Beyond just looking ugly, soupy Javascript has a high carrying cost because it tends to be hard to change and expensive to test. With its lack of structure, code written this way can be tested only by high-level end-to-end tests, using tools like &lt;a href=&quot;http://www.seleniumhq.org/&quot;&gt;Selenium&lt;/a&gt; or &lt;a href=&quot;https://github.com/teampoltergeist/poltergeist&quot;&gt;Poltergeist&lt;/a&gt;. Full-stack integration tests are important to have, but in moderation: they tend to be slow and provide very indirect feedback when something breaks.&lt;/p&gt;

&lt;p&gt;If we want to turn our soup into something easier to change, we need to restructure it so we can write isolated unit tests against it.&lt;/p&gt;

&lt;h2 id=&quot;why&quot;&gt;Why?&lt;/h2&gt;

&lt;p&gt;Correctly written unit tests using modern JS testing frameworks like &lt;a href=&quot;http://mochajs.org/&quot;&gt;Mocha&lt;/a&gt; or &lt;a href=&quot;http://jasmine.github.io/&quot;&gt;Jasmine&lt;/a&gt; are really freaking fast: a typical unit test should be executable in a small fraction of second and a suite of hundreds should take a handful of seconds to run. The productivity impact of speedy tests on the development feedback loop really cannot be understated: it’s a lot easier to stay focused and in the zone when your tests can finish running before you switch windows from text editor to browser.&lt;/p&gt;

&lt;p&gt;Beyond speed, isolated tests provide better locality of errors; when unit tests fail they’re more likely than end-to-end tests to point you to the specific area of code that’s gone wrong. They also encourage better testing of edge cases and failure modes; well-isolated tests mean there’s less setup for each scenario, and so less friction for writing new test cases.&lt;/p&gt;

&lt;h2 id=&quot;how&quot;&gt;How?&lt;/h2&gt;

&lt;p&gt;Luckily, writing unit-testable Javascript is mostly a matter of following good object-oriented design principals.&lt;/p&gt;

&lt;p&gt;Let’s look at some jQuery code that’s powering a search against a JSON API. It’s pretty pedestrian code, but can’t be unit tested as-is. This is a very simple example so as to fit comfortably in a blog post; imagine hundreds of lines structured in the same fashion as we go along.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-coffeescript&quot; data-lang=&quot;coffeescript&quot;&gt;&lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;#search&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;on&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;click&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;ajax&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;/users/search&quot;&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;q&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;#query&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;val&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()}&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;success&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;users&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;resultHtml&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;&quot;&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;each&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;users&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;
          &lt;span class=&quot;nx&quot;&gt;resultHtml&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;&amp;lt;div&amp;gt;&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;lt;/div&amp;gt;&quot;&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;.results&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;html&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;resultHtml&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Let’s refactor this code to get it under test.&lt;/p&gt;

&lt;h3 id=&quot;make-your-code-instantiable-in-a-test-harness&quot;&gt;Make Your Code Instantiable In A Test Harness&lt;/h3&gt;

&lt;p&gt;The minimum requirement for testable code is to be able to run the code itself inside a test harness. Our jQuery code above is a function that’s executed once upon page load: how do we run it inside something like Jasmine or Mocha?&lt;/p&gt;

&lt;p&gt;As a first step, we can extract the function’s behavior wholesale to a new object that we can create in our tests. There’s more decomposing of the behavior we could do, but the objective right now is just to it running inside a test harness.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-coffeescript&quot; data-lang=&quot;coffeescript&quot;&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;vi&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;UserSearch&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;bindForm&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;#search&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;on&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;click&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;ajax&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;/users/search&quot;&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;q&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;#query&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;val&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()}&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;success&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;users&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;
          &lt;span class=&quot;nx&quot;&gt;resultHtml&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;&quot;&lt;/span&gt;
          &lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;each&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;users&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;nx&quot;&gt;resultHtml&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;&amp;lt;div&amp;gt;&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;lt;/div&amp;gt;&quot;&lt;/span&gt;
          &lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;.results&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;html&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;resultHtml&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Now the code that’s run on page load can simply create an instance of &lt;code class=&quot;highlighter-rouge&quot;&gt;UserSearch&lt;/code&gt; and call &lt;code class=&quot;highlighter-rouge&quot;&gt;bindForm&lt;/code&gt;:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-coffeescript&quot; data-lang=&quot;coffeescript&quot;&gt;&lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;UserSearch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;bindForm&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;We can now create instances of &lt;code class=&quot;highlighter-rouge&quot;&gt;UserSearch&lt;/code&gt; inside our test harness:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-coffeescript&quot; data-lang=&quot;coffeescript&quot;&gt;&lt;span class=&quot;nx&quot;&gt;describe&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;UserSearch&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;it&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;can be created&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;UserSearch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;to&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;not&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;be&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;undefined&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Wahoo! But we can’t test anything useful yet.&lt;/p&gt;

&lt;h3 id=&quot;mock-external-dependencies&quot;&gt;Mock External Dependencies&lt;/h3&gt;

&lt;p&gt;Our code has two external dependencies we need to deal with before we can test anything useful: the DOM and the HTTP search API.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;DOM Fixtures&lt;/em&gt;: Our &lt;code class=&quot;highlighter-rouge&quot;&gt;UserSearch&lt;/code&gt; class depends on three elements being present on the page: a input to read the search query from, a button to click to submit the query, and a container to fill with search results. We can use jQuery to construct a minimal set of elements that fulfill this contract and insert it into the test runner’s DOM in the &lt;code class=&quot;highlighter-rouge&quot;&gt;beforeEach&lt;/code&gt; hook.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;HTTP search API&lt;/em&gt;: &lt;code class=&quot;highlighter-rouge&quot;&gt;UserSearch&lt;/code&gt; also depends on being able to retrieve JSON search results by hitting &lt;code class=&quot;highlighter-rouge&quot;&gt;/users/search&lt;/code&gt; with an Ajax request. We can use &lt;a href=&quot;http://sinonjs.org/&quot;&gt;SinonJS’s&lt;/a&gt; excellent high-level Ajax request mocking to build out a mock server that responds with fake search results.&lt;/p&gt;

&lt;p&gt;With tools for mocking both our external dependencies, we can finally write a meaningful test:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-coffeescript&quot; data-lang=&quot;coffeescript&quot;&gt;&lt;span class=&quot;nx&quot;&gt;describe&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;UserSearch&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;beforeEach&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;vi&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;el&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'&amp;lt;div&amp;gt;
               &amp;lt;input id=&quot;query&quot; /&amp;gt;
               &amp;lt;button id=&quot;search&quot;&amp;gt;Search&amp;lt;/button&amp;gt;
               &amp;lt;div class=&quot;results&quot;&amp;gt;&amp;lt;/div&amp;gt;
             &amp;lt;/div&amp;gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'body'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;vi&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;el&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;vi&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;server&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;sinon&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;fakeServer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;create&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

  &lt;span class=&quot;nx&quot;&gt;afterEach&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;vi&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;el&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;remove&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;vi&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;server&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;restore&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

  &lt;span class=&quot;nx&quot;&gt;it&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;displays matching users&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;users&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Furiosa&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Max&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;vi&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;server&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;respondWith&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
      &lt;span class=&quot;s&quot;&gt;&quot;GET&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;sr&quot;&gt;/users\/search/&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;200&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Content-Type&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;application/json&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;JSON&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;stringify&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;users&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)])&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;UserSearch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;bindForm&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;#query&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;val&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;a&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;#search&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;trigger&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;click&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;vi&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;server&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;respond&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

    &lt;span class=&quot;nx&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;.results div&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;to&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;have&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;$text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Furiosa&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;.results div&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;to&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;have&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;$text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Max&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h3 id=&quot;follow-the-single-responsibility-principal&quot;&gt;Follow The Single-Responsibility Principal&lt;/h3&gt;

&lt;p&gt;The above test requires a lot of mocking for single test. It’s also not great object-oriented design: we’ve just taken procedural code and wrapped an object around it for encapsulation. The Single-Responsibility Principal says that it’s a good idea to have an object be responsible for a single thing. What if we split &lt;code class=&quot;highlighter-rouge&quot;&gt;UserSearch&lt;/code&gt; into two classes: one for talking to the search API and one for managing the DOM?&lt;/p&gt;

&lt;p&gt;Let’s create a &lt;code class=&quot;highlighter-rouge&quot;&gt;UserStore&lt;/code&gt; class to abstract away the details of fetching our search results. It’ll just be responsible for talking to the backend and passing the search results along to the caller.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-coffeescript&quot; data-lang=&quot;coffeescript&quot;&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;vi&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;UserStore&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;/users/search&quot;&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;search&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;query&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;callback&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;ajax&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;vi&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;url&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;q&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;query&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;success&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;users&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;callback&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;users&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;We can test this by just mocking out the server Ajax response:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-coffeescript&quot; data-lang=&quot;coffeescript&quot;&gt;&lt;span class=&quot;nx&quot;&gt;describe&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;UserStore&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;beforeEach&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;vi&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;server&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;sinon&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;fakeServer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;create&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

  &lt;span class=&quot;nx&quot;&gt;afterEach&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;vi&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;server&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;restore&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

  &lt;span class=&quot;nx&quot;&gt;it&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;displays matching users&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;users&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Furiosa&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Max&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;vi&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;server&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;respondWith&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
      &lt;span class=&quot;s&quot;&gt;&quot;GET&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;sr&quot;&gt;/users\/search/&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;200&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Content-Type&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;application/json&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;JSON&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;stringify&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;users&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)])&lt;/span&gt;

    &lt;span class=&quot;nx&quot;&gt;callback&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;sinon&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;spy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;store&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;UserStore&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;store&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;search&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;a&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;callback&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;callback&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;calledWith&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;users&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;to&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;be&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;truthy&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h3 id=&quot;inject-js-dependencies&quot;&gt;Inject JS Dependencies&lt;/h3&gt;

&lt;p&gt;Our &lt;code class=&quot;highlighter-rouge&quot;&gt;UserSearch&lt;/code&gt; class now only manages the DOM and delegates the details of actually fetching the search results to its &lt;code class=&quot;highlighter-rouge&quot;&gt;UserStore&lt;/code&gt;. Let’s rename it to &lt;code class=&quot;highlighter-rouge&quot;&gt;UserSearchForm&lt;/code&gt; to reflect its new responsibilities and take a look:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-coffeescript&quot; data-lang=&quot;coffeescript&quot;&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;vi&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;UserSearchForm&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;constructor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;vi&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;store&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;UserStore&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

  &lt;span class=&quot;na&quot;&gt;bindForm&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;#search&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;on&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;click&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;vi&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;store&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;search&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;#query&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;val&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;users&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;resultHtml&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;&quot;&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;each&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;users&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;
          &lt;span class=&quot;nx&quot;&gt;resultHtml&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;&amp;lt;div&amp;gt;&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;lt;/div&amp;gt;&quot;&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;.results&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;html&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;resultHtml&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;But there’s a problem here. Our tests for this class still have to include our fake Ajax server or they won’t work—even though the code under test has nothing to do with HTTP requests now.&lt;/p&gt;

&lt;p&gt;To solve this, we’ll use dependency injection to pass our store in as a constructor argument. Frameworks like AngularJS makes “dependency injection” sound really complicated, but it doesn’t have to be. We’re just changing &lt;code class=&quot;highlighter-rouge&quot;&gt;UserSearchForm&lt;/code&gt;’s constructor from one that creates a new instance of a specific class of store to one that takes a store as an argument:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-coffeescript&quot; data-lang=&quot;coffeescript&quot;&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;vi&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;UserSearchForm&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;constructor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;store&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;vi&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;store&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;store&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;And the code to instantiate the form on the actual page becomes:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-coffeescript&quot; data-lang=&quot;coffeescript&quot;&gt;&lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;UserSearchForm&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;UserStore&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;bindForm&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Now we can use a fake collaborator in our test instead of a real &lt;code class=&quot;highlighter-rouge&quot;&gt;UserStore&lt;/code&gt;; we’ll just use a plain Javascript object that implements the same contract that the real store honors, but (like our Ajax server mock) returns stock data.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-coffeescript&quot; data-lang=&quot;coffeescript&quot;&gt;&lt;span class=&quot;nx&quot;&gt;describe&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;UserSearchForm&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;beforeEach&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;vi&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;el&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'&amp;lt;div&amp;gt;
               &amp;lt;input id=&quot;query&quot; /&amp;gt;
               &amp;lt;button id=&quot;search&quot;&amp;gt;Search&amp;lt;/button&amp;gt;
               &amp;lt;div class=&quot;results&quot;&amp;gt;&amp;lt;/div&amp;gt;
             &amp;lt;/div&amp;gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'body'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;vi&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;el&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

  &lt;span class=&quot;nx&quot;&gt;afterEach&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;vi&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;el&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;remove&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

  &lt;span class=&quot;nx&quot;&gt;it&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;displays matching users&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;FakeStore&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;search&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;query&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;callback&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;callback&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;
          &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Furiosa&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
          &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Max&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;UserSearchForm&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;FakeStore&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;bindForm&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;#query&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;val&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;a&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;#search&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;trigger&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;click&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;nx&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;.results div&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;to&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;have&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;$text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Furiosa&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;.results div&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;to&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;have&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;$text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Max&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h2 id=&quot;better&quot;&gt;Better&lt;/h2&gt;

&lt;p&gt;The code we wound up at the end of this refactoring isn’t perfect, but that’s not the point. What’s most important is that we’ve established a beachhead of tests to watch our backs while we keep improving it. All by just applying some of the simple object oriented design principals we already knew!&lt;/p&gt;

  &lt;p&gt;&lt;a href=&quot;https://thegreata.pe/articles/2015/06/03/extracting-testable-javascript-from-jquery-soup/&quot;&gt;Extracting Testable Javascript From jQuery Soup&lt;/a&gt; was originally published by Thomas Mayfield at &lt;a href=&quot;https://thegreata.pe&quot;&gt;Duct Tape and Turing Machines&lt;/a&gt; on June 03, 2015.&lt;/p&gt;</content>
</entry>

</feed>