<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en">
<title type="text">Duct Tape and Turing Machines</title>
<subtitle type="text"></subtitle>
<generator uri="https://github.com/mojombo/jekyll">Jekyll</generator>
<link rel="self" type="application/atom+xml" href="/feed.xml" />
<link rel="alternate" type="text/html" href="" />
<updated>2022-05-09T19:36:49-04:00</updated>
<id>/</id>
<author>
  <name>Thomas Mayfield</name>
  <uri>/</uri>
  <email>Thomas.Mayfield@gmail.com</email>
</author>


<entry>
  <title type="html"><![CDATA[Using pihole for time of day based per-client site blocking]]></title>
  <link rel="alternate" type="text/html" href="/articles/2021/02/28/pihole/" />
  <id>/articles/2021/02/28/pihole</id>
  <published>2021-02-28T00:00:00-05:00</published>
  <updated>2021-02-28T00:00:00-05:00</updated>
  <author>
    <name>Thomas Mayfield</name>
    <uri></uri>
    <email>Thomas.Mayfield@gmail.com</email>
  </author>
  <content type="html">&lt;p&gt;I’ve recently been trying a new tactic to reform my relationship with news and social media, and it’s been going pretty well. Specially, I’m using &lt;a href=&quot;https://pi-hole.net/&quot;&gt;pihole&lt;/a&gt; to block distracting sites and apps at certain times of day on my wifi network. This allows for a limited window of time to engage with the ones I still get some value out of, but keeps them blocked while I’m trying to work or unwind. The blocking is limited to a list of my personal devices on the network—while Instagram might be a distraction for me, it’s a part of business for my wife, and this allows me to have a separate set of blocking rules.&lt;/p&gt;

&lt;h2 id=&quot;how-pihole-works&quot;&gt;How Pihole works&lt;/h2&gt;

&lt;p&gt;Pi-hole is a &lt;a href=&quot;https://en.wikipedia.org/wiki/DNS_sinkhole&quot;&gt;DNS sinkhole&lt;/a&gt; - it runs as a DNS server on my network and returns a non-routable result for any domain on its blocklists. While designed for ad blocking, it can also be used to block whatever domains you want: in addition to attention span protection, I’ve even used it to simulate remote outages when testing software at work! It’s designed to run fast on very limited hardware; I’m running it on a &lt;a href=&quot;https://www.raspberrypi.org/products/raspberry-pi-4-model-b/&quot;&gt;Raspberry Pi 4 Model B&lt;/a&gt; that cost me about $70 with a power adapter, SD card and case.&lt;/p&gt;

&lt;h2 id=&quot;setup&quot;&gt;Setup&lt;/h2&gt;

&lt;p&gt;Almost all the setup here can be done through the pihole’s web admin interface, but I definitely recommend reading the &lt;a href=&quot;https://docs.pi-hole.net/&quot;&gt;full pihole docs&lt;/a&gt; so you understand what’s going on.&lt;/p&gt;

&lt;p&gt;I first &lt;a href=&quot;https://github.com/pi-hole/pi-hole/#one-step-automated-install&quot;&gt;set up pihole&lt;/a&gt; running on the raspberry pi with the default installation settings. I then set pihole as both the DNS server and DHCP server; this was simply a matter of disabling both DNS and DHCP functions on my router, then clicking Settings -&amp;gt; DHCP -&amp;gt; “DHCP server enabled” in the pihole web admin. Pihole needs to act as the DHCP server in order to distinguish clients from each other; if we let the router act as the DHCP server, it’ll forward all the DNS requests to the pihole and each request will look like it’s coming from the router instead of individual computers.&lt;/p&gt;

&lt;p&gt;After a restart, each computer on my network got its IP address from the pihole and starting using it to make DNS requests. As they connected, I added each client connecting to the pi into a new group: either Thomas’s Computers or Elizabeth’s Computers. They were also added to the default group for ad blocking.&lt;/p&gt;

&lt;p&gt;After this, I set up two new Adlists. These are a pair of files hosted on GitHub with list of domains to sinkhole, divided into two categories:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/thegreatape/pihole-blocklists/main/thomas/always-blocked.hosts&quot;&gt;Always Blocked&lt;/a&gt;: sites that never have a positive signal to noise ratio, and I’ve found to be a net negative in any quantity.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/thegreatape/pihole-blocklists/main/thomas/always-blocked.hosts&quot;&gt;Distracting&lt;/a&gt;: sites I get some utility out of, but will be timesucks if I let them be available all the time.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;I assigned each of these new adlists to the Thomas’s Computers group, but &lt;em&gt;not&lt;/em&gt; the default group, so it won’t affect my wife’s devices. The urls above point at the &lt;code class=&quot;highlighter-rouge&quot;&gt;main&lt;/code&gt; branch, so when I update the files to add or remove domains, I only need to run Update Gravity through the pihole admin (or &lt;code class=&quot;highlighter-rouge&quot;&gt;pihole -g&lt;/code&gt; via an ssh session) to pull in the new lists.&lt;/p&gt;

&lt;p&gt;And finally, the last piece: to block and unblock the Distracting list at various times of day. While pihole doesn’t have a cli command to enable or disable adlists dynamically, they do have &lt;a href=&quot;https://docs.pi-hole.net/database/gravity/&quot;&gt;documentation on how its internal SQLite db is laid out&lt;/a&gt;. You can connect to it by running &lt;code class=&quot;highlighter-rouge&quot;&gt;sqlite3 /etc/pihole/gravity.db&lt;/code&gt;. I grabbed the id of each adlist with &lt;code class=&quot;highlighter-rouge&quot;&gt;select * from adlist&lt;/code&gt;, which let me toggle the adlist on and off with the query &lt;code class=&quot;highlighter-rouge&quot;&gt;update adlist set enabled = false where id = &amp;lt;adlistid&amp;gt;;&lt;/code&gt;  To make this happen automatically at the right times of day, I added the following cron commands (using &lt;code class=&quot;highlighter-rouge&quot;&gt;sudo crontab -e&lt;/code&gt;) to run a simple block and unblock script:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-crontab&quot; data-lang=&quot;crontab&quot;&gt;# m h dom mon dow command
0 17 * * * bash -lc /home/pi/unblock-distractions.sh
0 19 * * * bash -lc /home/pi/block-distractions.sh
0 6 * * *  bash -lc /home/pi/unblock-distractions.sh
0 9 * * *  bash -lc /home/pi/block-distractions.sh&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;c&quot;&gt;#!/bin/bash&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# block-distractions.sh&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'blocking distractions...'&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;export &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;PATH&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$PATH&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;:/usr/sbin:/usr/local/bin/&quot;&lt;/span&gt;
sqlite3 /etc/pihole/gravity.db &lt;span class=&quot;s2&quot;&gt;&quot;update adlist set enabled = true where id = 5;&quot;&lt;/span&gt;
pihole restartdns&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;c&quot;&gt;#!/bin/bash&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# unblock-distractions.sh&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'unblocking distractions...'&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;export &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;PATH&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$PATH&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;:/usr/sbin:/usr/local/bin/&quot;&lt;/span&gt;
sqlite3 /etc/pihole/gravity.db &lt;span class=&quot;s2&quot;&gt;&quot;update adlist set enabled = false where id = 5;&quot;&lt;/span&gt;
pihole restartdns&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Yes, the scripts are nearly identical and could be parameterized, but cron and arguments are fussy, so—I didn’t.&lt;/p&gt;

&lt;p&gt;And that’s it! This unblocks sites in my distractions list from 6-9am and again from 5-7pm; outside of that, they’re blocked on all the computers I own. I’ve been running this setup for about two weeks now, and it’s nice: no third party programs to install on my devices and works across laptop, phone and tablet with no extra work.&lt;/p&gt;

  &lt;p&gt;&lt;a href=&quot;/articles/2021/02/28/pihole/&quot;&gt;Using pihole for time of day based per-client site blocking&lt;/a&gt; was originally published by Thomas Mayfield at &lt;a href=&quot;&quot;&gt;Duct Tape and Turing Machines&lt;/a&gt; on February 28, 2021.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[2020 Year End Notes]]></title>
  <link rel="alternate" type="text/html" href="/articles/2020/12/31/2020-year-end-notes/" />
  <id>/articles/2020/12/31/2020-year-end-notes</id>
  <published>2020-12-31T00:00:00-05:00</published>
  <updated>2020-12-31T00:00:00-05:00</updated>
  <author>
    <name>Thomas Mayfield</name>
    <uri></uri>
    <email>Thomas.Mayfield@gmail.com</email>
  </author>
  <content type="html">&lt;p&gt;This was another year I waffled on writing this review. 2020 has been a shitshow for everyone, myself included, but I’ve had some tremendous privilege and luck in how I’ve weathered the worst of it. It feels ungrateful to be writing very inward-looking reflections at the year’s close, but I think I’ll be glad I did later on.&lt;/p&gt;

&lt;h2 id=&quot;lifting&quot;&gt;Lifting&lt;/h2&gt;

&lt;p&gt;Having spent the last five years outfitting my basement gym was certainly my personal “accidentally prepped for the pandemic” moment. Lifting is a big part of my mental health care and I’m grateful to have been able to avoid the scramble for space and equipment when it became clear things weren’t going back to normal any time soon.&lt;/p&gt;

&lt;p&gt;I still started the year in a pretty lousy place. I’d been dealing with some mysterious underarm pain since late 2019 and I had to cut out all overhead work, heavy deadlifting and most rowing for a while. It all turned out to be trigger points in my rotator cuff, but it took until late spring to diagnose and address. I didn’t deadlift from the floor until June, and didn’t cross off the last movement off the Avoid list until early fall.&lt;/p&gt;

&lt;p&gt;Training since getting that ironed out has been great. I’ve been doing the kind of submaximal accumulate-lots-of-volume training that’s worked well in the past, specifically the &lt;a href=&quot;https://www.strongerbyscience.com/program-bundle/&quot;&gt;Stronger by Science framework&lt;/a&gt; (née Average to Savage). I’ve hit a bunch of rep PRs and even some new year-end 1RMs: 180 strict press, 245 bench press, 265 front squat, and 455 deadlift. Great to clock some new 1RMs for once! And even better to hit them at the year-end pause in the middle of a low specificity hypertrophy block and after only a few months of not training around an injury.&lt;/p&gt;

&lt;p&gt;The only notable new thing this year training-wise has been starting each session with an overwarm heavy single: usually something like ~90% of 1RM, with the goal to have two more good reps in reserve. The bulk of my training was submax, and I was suprised how even just a little practice with those singles kept me acclimated to heavy weights without much extra fatigue.&lt;/p&gt;

&lt;p&gt;The plan for next year is “more of the same”:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Don’t get hurt.&lt;/li&gt;
  &lt;li&gt;Stick to the structure that’s worked so far.&lt;/li&gt;
  &lt;li&gt;Keep working on filling out my frame.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;reading&quot;&gt;Reading&lt;/h2&gt;

&lt;p&gt;I moved away from tracking my reading in Goodreads to my &lt;a href=&quot;https://thegreata.pe/articles/2020/02/17/building-a-custom-reading-list-with-airtable/&quot;&gt;custom Airtable-powered system&lt;/a&gt; early this year. I’m still very pleased with it. It also made the by-the-numbers part of this review a matter of copy and paste!&lt;/p&gt;

&lt;div class=&quot;reading&quot;&gt;
&lt;div class=&quot;columns&quot;&gt;
&lt;div class=&quot;column&quot;&gt;
&lt;div class=&quot;box stats-box has-text-centered&quot;&gt;
&lt;h3 class=&quot;title is-5&quot;&gt;Read&lt;/h3&gt;
&lt;div class=&quot;title read-count is-1&quot;&gt;44&lt;/div&gt;
books of a 35 book goal.
&lt;div id=&quot;progress-to-date&quot;&gt;Goal met!&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;column&quot;&gt;
&lt;div class=&quot;box stats-box&quot;&gt;
&lt;h3 class=&quot;has-text-centered title is-5&quot;&gt;Author Background&lt;/h3&gt;
&lt;table class=&quot;table is-fullwidth&quot;&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;by-men&lt;/td&gt;
&lt;td&gt;24&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;by-women&lt;/td&gt;
&lt;td&gt;16&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;by-lgbtq-author&lt;/td&gt;
&lt;td&gt;9&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;by-people-of-color&lt;/td&gt;
&lt;td&gt;7&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;by-non-binary-authors&lt;/td&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;column&quot;&gt;
&lt;div class=&quot;box stats-box&quot;&gt;
&lt;h3 class=&quot;has-text-centered title is-5&quot;&gt;Genres&lt;/h3&gt;
&lt;table class=&quot;table is-fullwidth&quot;&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;fantasy&lt;/td&gt;
&lt;td&gt;25&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;nonfiction&lt;/td&gt;
&lt;td&gt;8&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;sci-fi&lt;/td&gt;
&lt;td&gt;8&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;fitness&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;tech&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/p&gt;

&lt;p&gt;The full book list for the year is on the &lt;a href=&quot;https://thegreata.pe/reading/&quot;&gt;yearly reading page&lt;/a&gt;. I clocked more re-reads than recent years, at nine re-read books. I think that my “forgotten enough details to enjoy again” horizon is at least 2 years; this was the first time some of the re-reads felt too close to the previous ones.&lt;/p&gt;

&lt;p&gt;Only a few notable reads to call out:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;&lt;a href=&quot;https://www.portersquarebooks.com/book/9780393339758&quot;&gt;The Shallows&lt;/a&gt; by Nicholas Carr&lt;/strong&gt;: I expected an &lt;em&gt;internet bad&lt;/em&gt; thinkpiece and instead got a nuanced take on media, technology and cognition’s relationship. Written in 2010, and holds up better than it has a right to (outside of some whiffs on where books themselves were heading).&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;&lt;a href=&quot;https://www.portersquarebooks.com/book/9780451464415&quot;&gt;Peace Talks&lt;/a&gt; and &lt;a href=&quot;https://www.portersquarebooks.com/book/9780593199305&quot;&gt;Battle Ground&lt;/a&gt; by Jim Butcher&lt;/strong&gt;: The Dresden Files was the series that helped me restart my reading habit a decade ago, and it always feels like coming home (problematic bits and all).&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;career&quot;&gt;Career&lt;/h2&gt;

&lt;p&gt;I’ve been working at BookBub for more than half a decade now. One of the things that’s kept me there—second only to the wonderful crew of humans I work alongside—is the ability to move between teams periodically and work on a totally new domain. I’d spent the last year and a half on our data engineering team, caretaking a data warehouse and building a self-serve ETL platform for other engineering teams. In the fall, I did an entire 180 (or 540?) and switched to a team working on our audiobooks mobile app. Going from databases and analytics to mobile dev has definitely kept my professional life from feeling stale. We’re using React Native and coming up to speed on all the JS tooling from the last three-ish years—without actually doing web dev—somehow feels very on-brand for me.&lt;/p&gt;

&lt;h2 id=&quot;time--attention&quot;&gt;Time &amp;amp; Attention&lt;/h2&gt;

&lt;p&gt;This is always where I struggle the most, and surprising exactly no one, this year was not an exception. 2020 took all of last year’s progress in habits and just sorta bulldozed it.&lt;/p&gt;

&lt;p&gt;Most of the things I have tried before to curb bad internet habits—like &lt;a href=&quot;https://thegreata.pe/articles/2020/05/07/attentional-homesteading/&quot;&gt;auto-scrubbing of browser history&lt;/a&gt; and &lt;a href=&quot;https://thegreata.pe/articles/2016/08/28/defusing-distracting-defaults/&quot;&gt;automatic site blocking upon laptop wake&lt;/a&gt;—have not truly made much of a dent. I wanted to push more on this area in 2020 but pandemic isolation/fear and election anxiety well and truly torpedoed that. I’m giving myself until Jan 20 of 2021 before I start trying to figure out the right way to pull myself out of scrolling again, doom or otherwise.&lt;/p&gt;

&lt;p&gt;I will say I’m currently experimenting with &lt;a href=&quot;https://mailbrew.com/&quot;&gt;Mailbrew&lt;/a&gt; as a way to keep up with news and some folks on Twitter on a once-a-day cadence. We’ll see if it turns into something helpful or another failed experiment.&lt;/p&gt;

  &lt;p&gt;&lt;a href=&quot;/articles/2020/12/31/2020-year-end-notes/&quot;&gt;2020 Year End Notes&lt;/a&gt; was originally published by Thomas Mayfield at &lt;a href=&quot;&quot;&gt;Duct Tape and Turing Machines&lt;/a&gt; on December 31, 2020.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[Vim syntax highlighting for SQL strings inside Python code]]></title>
  <link rel="alternate" type="text/html" href="/articles/2020/07/11/vim-syntax-highlighting-for-sql-strings-inside-python-code/" />
  <id>/articles/2020/07/11/vim-syntax-highlighting-for-sql-strings-inside-python-code</id>
  <published>2020-07-11T00:00:00-04:00</published>
  <updated>2020-07-11T00:00:00-04:00</updated>
  <author>
    <name>Thomas Mayfield</name>
    <uri></uri>
    <email>Thomas.Mayfield@gmail.com</email>
  </author>
  <content type="html">&lt;p&gt;A few years ago, I shared a bit of Vimscript for &lt;a href=&quot;https://thegreata.pe/articles/2018/01/01/vim-syntax-highlighting-for-sql-strings-inside-ruby-code/&quot;&gt;highlighting SQL strings inside Ruby code&lt;/a&gt;. Fast forward to today: I’ve been doing a bunch of ETL work recently using &lt;a href=&quot;https://airflow.apache.org/&quot;&gt;Apache Airflow&lt;/a&gt;, which is written in Python. That means a bunch of SQL queries embedded in Python strings, and I wanted to see about getting some highlighting on them for easier visual parsing.&lt;/p&gt;

&lt;p&gt;In the Ruby version, I relied on the convention of using &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;&amp;lt;-SQL&lt;/code&gt; heredoc strings to differentiate  between regular strings and ones containing SQL queries. In Python, I had to get slightly more clever: this will treat any triple quotes-delimited string as SQL if it starts with a valid SQL keyword (e.g. &lt;code class=&quot;highlighter-rouge&quot;&gt;select&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;alter&lt;/code&gt;, etc). That might not always be true in your case, but it works pretty well for the very SQL-heavy Python work I’ve been doing.&lt;/p&gt;

&lt;p&gt;Drop this in &lt;code class=&quot;highlighter-rouge&quot;&gt;~/.vim/after/syntax/python.vim&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;language-vim highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;unlet &lt;span class=&quot;nv&quot;&gt;b:current_syntax&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;syn&lt;/span&gt; include @SQL syntax/sql&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;vim&lt;/span&gt;
syntax region sqlPythonString 
&lt;span class=&quot;se&quot;&gt;      \&lt;/span&gt; matchgroup&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;SpecialComment 
&lt;span class=&quot;se&quot;&gt;      \&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=~&lt;/span&gt;\z&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;''&lt;/span&gt;'\&lt;span class=&quot;p&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&quot;&lt;/span&gt;&quot;\&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;\_s*\&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;ALTER\&lt;span class=&quot;p&quot;&gt;|&lt;/span&gt;BEGIN\&lt;span class=&quot;p&quot;&gt;|&lt;/span&gt;CALL\&lt;span class=&quot;p&quot;&gt;|&lt;/span&gt;COMMENT\&lt;span class=&quot;p&quot;&gt;|&lt;/span&gt;COMMIT\&lt;span class=&quot;p&quot;&gt;|&lt;/span&gt;CONNECT\&lt;span class=&quot;p&quot;&gt;|&lt;/span&gt;CREATE\&lt;span class=&quot;p&quot;&gt;|&lt;/span&gt;DELETE\&lt;span class=&quot;p&quot;&gt;|&lt;/span&gt;DROP\&lt;span class=&quot;p&quot;&gt;|&lt;/span&gt;END\&lt;span class=&quot;p&quot;&gt;|&lt;/span&gt;EXPLAIN\&lt;span class=&quot;p&quot;&gt;|&lt;/span&gt;EXPORT\&lt;span class=&quot;p&quot;&gt;|&lt;/span&gt;GRANT\&lt;span class=&quot;p&quot;&gt;|&lt;/span&gt;IMPORT\&lt;span class=&quot;p&quot;&gt;|&lt;/span&gt;INSERT\&lt;span class=&quot;p&quot;&gt;|&lt;/span&gt;LOAD\&lt;span class=&quot;p&quot;&gt;|&lt;/span&gt;LOCK\&lt;span class=&quot;p&quot;&gt;|&lt;/span&gt;MERGE\&lt;span class=&quot;p&quot;&gt;|&lt;/span&gt;REFRESH\&lt;span class=&quot;p&quot;&gt;|&lt;/span&gt;RENAME\&lt;span class=&quot;p&quot;&gt;|&lt;/span&gt;REPLACE\&lt;span class=&quot;p&quot;&gt;|&lt;/span&gt;REVOKE\&lt;span class=&quot;p&quot;&gt;|&lt;/span&gt;ROLLBACK\&lt;span class=&quot;p&quot;&gt;|&lt;/span&gt;SELECT\&lt;span class=&quot;p&quot;&gt;|&lt;/span&gt;SET\&lt;span class=&quot;p&quot;&gt;|&lt;/span&gt;TRUNCATE\&lt;span class=&quot;p&quot;&gt;|&lt;/span&gt;UNLOAD\&lt;span class=&quot;p&quot;&gt;|&lt;/span&gt;UNSET\&lt;span class=&quot;p&quot;&gt;|&lt;/span&gt;UPDATE\&lt;span class=&quot;p&quot;&gt;|&lt;/span&gt;UPSERT\&lt;span class=&quot;p&quot;&gt;|&lt;/span&gt;WITH\&lt;span class=&quot;p&quot;&gt;)~&lt;/span&gt; 
&lt;span class=&quot;se&quot;&gt;      \&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=+&lt;/span&gt;\z1&lt;span class=&quot;p&quot;&gt;+&lt;/span&gt; 
&lt;span class=&quot;se&quot;&gt;      \&lt;/span&gt; contains&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;@SQL

&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;b:current_syntax&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'python'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Results:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/sql-python-screenshot.png&quot; alt=&quot;Python string with SQL syntax highlighting applied&quot; /&gt;&lt;/p&gt;

  &lt;p&gt;&lt;a href=&quot;/articles/2020/07/11/vim-syntax-highlighting-for-sql-strings-inside-python-code/&quot;&gt;Vim syntax highlighting for SQL strings inside Python code&lt;/a&gt; was originally published by Thomas Mayfield at &lt;a href=&quot;&quot;&gt;Duct Tape and Turing Machines&lt;/a&gt; on July 11, 2020.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[Attentional Homesteading]]></title>
  <link rel="alternate" type="text/html" href="/articles/2020/05/07/attentional-homesteading/" />
  <id>/articles/2020/05/07/attentional-homesteading</id>
  <published>2020-05-07T00:00:00-04:00</published>
  <updated>2020-05-07T00:00:00-04:00</updated>
  <author>
    <name>Thomas Mayfield</name>
    <uri></uri>
    <email>Thomas.Mayfield@gmail.com</email>
  </author>
  <content type="html">&lt;p&gt;It’s funny. When people talk about how technology distracts us or hijacks our attention, the first thing that comes up is smartphones. Which, sure: they’re a hotbed of dings for your attention and apps with weaponized endless scrolling competing for a slice of your eyeballs’ time. But for me, my phone isn’t attention span enemy number one. I have push notifications nearly globally disabled and it’s pretty easy for me to leave it out of sight and reach when I want to sit down and focus. My nemesis is a little different.&lt;/p&gt;

&lt;p&gt;It’s that damn desktop web browser url autocomplete.&lt;/p&gt;

&lt;p&gt;I can’t do large swathes of my work without the internet; forget looking up APIs, it’s where my email client, Github, Trello etc all live. With all that necessarily happening in a browser, all the worst distractions for me are just a keystroke away. The autocomplete in most browsers sorts by most visited, so if I hit &lt;code class=&quot;highlighter-rouge&quot;&gt;Option-l t&lt;/code&gt; and bam—there’s Twitter one &lt;code class=&quot;highlighter-rouge&quot;&gt;Enter&lt;/code&gt; away at the top of the list.&lt;/p&gt;

&lt;p&gt;There’s a plethora of site blocking/limiting apps out there, of course. Or just the &lt;a href=&quot;https://lifehacker.com/how-to-really-block-distracting-websites-with-your-ho-1831493194&quot;&gt;good old /etc/hosts trick&lt;/a&gt;. I’ve tried them, and they usually have a backfiring effect: I don’t even like cake all that much, but if you told me I could &lt;em&gt;never&lt;/em&gt; have it again, I’m gonna start wanting some cake.&lt;/p&gt;

&lt;p&gt;So, I tried a different strategy. Instead of outright blocking, I wrote a &lt;a href=&quot;https://github.com/thegreatape/homestead&quot;&gt;small Firefox extension&lt;/a&gt; to automatically prune a list of distracting domains from my history.  Now when I focus that browser address bar, hitting a single letter doesn’t pull up a list of distractions. I can still visit them anytime I want; I just have to type out the full url, every time. That little bit of friction goes a long way towards making visiting a particular site into a decision rather than a reflex.&lt;/p&gt;

&lt;p&gt;Why’d I write my own? There’s a plethora of extensions that purport to do the same history scrubbing. But there’s always a risk with a third-party extension that it’ll do something malicious, like harvesting your info for sale.&lt;/p&gt;

&lt;p&gt;It wasn’t hard. Most of the code here was readily adaptable from the tutorials, and I know Javascript moderately well. And now I’ve got a simple thing that makes the information environment that I spend a great deal of time in a bit more habitable. To me, this is software at its best: something uniquely fitted to an individual, amplifying a positive or toning down a negative. A humble Jobsian bicycle for the mind. I love the idea of individualized fleets of this kind of thing: small, personalized bits of code to help each of us live our digital lives a little more deliberately.&lt;/p&gt;

&lt;p&gt;And this is where that ideal runs into the reality of modern platforms.&lt;/p&gt;

&lt;p&gt;I think about the essay &lt;a href=&quot;https://www.robinsloan.com/notes/home-cooked-app/&quot;&gt;An App Can Be A Home-Cooked Meal&lt;/a&gt; a lot. I love the idea of little purpose-built mobile apps for myself or my friends and family. But Apple can remove an app at any time: certainly by removing it from the store or tools like Testflight, and potentially by yanking it from running devices (&lt;a href=&quot;https://techcrunch.com/2019/07/10/apple-silent-update-zoom-app/&quot;&gt;they did it on the Mac platform when Zoom was misbehaving&lt;/a&gt;). Android is a little more open, but anything using Google Play has to cede a similar level of control. I just can’t get excited about working in an environment where someone else can just say “nope, you don’t get to do that- even just for yourself.”&lt;/p&gt;

&lt;p&gt;The same is true for my new browser extension. If I want to not have to manually load my extension every time I open Firefox anew, I have to get it signed by Mozilla, which does have an approval process. They can revoke it at any time, and the extension will stop working. This is for security. I get it: I literally wrote my own because of the risk of someone else’s extension doing something bad. Being able to blacklist bad actors is pretty important in the modern day and age. And Mozilla has zero reason to blacklist my little one-person extension.&lt;/p&gt;

&lt;p&gt;But still, someone else has ultimate control over the tools I’m using to carve out better headspace for myself.&lt;/p&gt;

&lt;p&gt;And yes: Firefox is open source, so I could in theory fork it, patch it and build a version of it just for me without these limitations. But the effort involved in doing so, let alone the ongoing effort to maintain those patches against upstream releases (which, again, security) is absolutely not worth it.&lt;/p&gt;

&lt;p&gt;I’m acutely aware of the tradeoffs here. But it still makes a part of me sad.&lt;/p&gt;


  &lt;p&gt;&lt;a href=&quot;/articles/2020/05/07/attentional-homesteading/&quot;&gt;Attentional Homesteading&lt;/a&gt; was originally published by Thomas Mayfield at &lt;a href=&quot;&quot;&gt;Duct Tape and Turing Machines&lt;/a&gt; on May 07, 2020.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[Bootstrapping a Rails app with Nix]]></title>
  <link rel="alternate" type="text/html" href="/articles/2020/04/20/bootstrap-a-rails-app-with-nix/" />
  <id>/articles/2020/04/20/bootstrap-a-rails-app-with-nix</id>
  <published>2020-04-20T00:00:00-04:00</published>
  <updated>2020-04-20T00:00:00-04:00</updated>
  <author>
    <name>Thomas Mayfield</name>
    <uri></uri>
    <email>Thomas.Mayfield@gmail.com</email>
  </author>
  <content type="html">&lt;p&gt;We’ve started using &lt;a href=&quot;https://nixos.org/nix/&quot;&gt;Nix&lt;/a&gt; at work for our development environments, and I wanted to spend some time learning how to use it for my own projects. So I set up a &lt;a href=&quot;https://github.com/thegreatape/nix-rails-template&quot;&gt;minimal template for a new Rails app&lt;/a&gt; to help me learn.&lt;/p&gt;

&lt;p&gt;I’m not going to go into depth about how Nix works: I’d rather highlight why I think it’s cool and worth learning with a template to get running and experiment on. Jean-Philippe Cugnet wrote &lt;a href=&quot;https://ejpcmac.net/blog/about-using-nix-in-my-development-workflow/&quot;&gt;a great in-depth article here&lt;/a&gt; about how Nix works and how to use it as a general-purpose development environment manager, so check out his writing if you want to dive in deep.&lt;/p&gt;

&lt;p&gt;To me, Nix is interesting for development environments because of two things:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Dependency Isolation&lt;/strong&gt;: Nix allows multiple versions of a package to co-exist on the same computer. Ever tried running multiple apps on your laptop? Maybe one requires an older version of libxml2, another a specific revision of postgres. Huge pain to deal with, and what can be a huge time sink to manage by hand is removed entirely by Nix’s dependency resolution. Think of it like &lt;code class=&quot;highlighter-rouge&quot;&gt;chroot&lt;/code&gt; with package management superpowers.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Runs Natively&lt;/strong&gt;: Lots of people use Docker to solve the dependecy isolation issue. But I work on a Mac, so Docker means running a linux VM and having to deal with slower filesystem performance between the native host and the containers running on the VM. Nix involves no virtualization, so there’s no speed penalty and all my native tools are available.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I use Rails by default for most of my web project work, so I made a &lt;a href=&quot;https://github.com/thegreatape/nix-rails-template&quot;&gt;small Rails app generation template that uses Nix&lt;/a&gt;. The specific instructions are on the &lt;a href=&quot;https://github.com/thegreatape/nix-rails-template/blob/master/README.md&quot;&gt;README&lt;/a&gt;, but in short: it sets up an isolated Ruby and Postgres install, configures a Rails app to use them, then gives you a shell with those dependencies available. From there, you can run the database (using &lt;a href=&quot;https://github.com/DarthSim/overmind&quot;&gt;overmind&lt;/a&gt; for process management) and all your normal Rails commands inside that shell. Enjoy!&lt;/p&gt;

  &lt;p&gt;&lt;a href=&quot;/articles/2020/04/20/bootstrap-a-rails-app-with-nix/&quot;&gt;Bootstrapping a Rails app with Nix&lt;/a&gt; was originally published by Thomas Mayfield at &lt;a href=&quot;&quot;&gt;Duct Tape and Turing Machines&lt;/a&gt; on April 20, 2020.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[Building A Custom Reading List With Airtable]]></title>
  <link rel="alternate" type="text/html" href="/articles/2020/02/17/building-a-custom-reading-list-with-airtable/" />
  <id>/articles/2020/02/17/building-a-custom-reading-list-with-airtable</id>
  <published>2020-02-17T00:00:00-05:00</published>
  <updated>2020-02-17T00:00:00-05:00</updated>
  <author>
    <name>Thomas Mayfield</name>
    <uri></uri>
    <email>Thomas.Mayfield@gmail.com</email>
  </author>
  <content type="html">&lt;p&gt;I built a custom &lt;a href=&quot;https://airtable.com/shrklkcdOzAPEO7S5/tbldD4SKQaINX1gxw/viwWA7YHSRBL7AxL8?blocks=hide&quot;&gt;book tracker&lt;/a&gt; and &lt;a href=&quot;https://thegreata.pe/reading/&quot;&gt;reading history page&lt;/a&gt;, and now I’m kind of in love with &lt;a href=&quot;https://airtable.com/&quot;&gt;Airtable&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;airtable&quot;&gt;Airtable&lt;/h2&gt;
&lt;p&gt;Airtable is an online spreadsheet app with a relational database’s heart and wonderful first-class API support. You can build a huge array of useful stuff using their tools: &lt;a href=&quot;https://airtable.com/product&quot;&gt;their product page&lt;/a&gt; and &lt;a href=&quot;https://airtable.com/universe&quot;&gt;example universe&lt;/a&gt; are a good showcase of what Airtable can do. They’ve got an incredibly generous free plan, too: everything detailed here fits in a free account!&lt;/p&gt;

&lt;p&gt;For hobby-stage products, I think Airtable is a lift in productivity on par with hosting platforms like Heroku. It’s a huge force multiplier for prototyping or &lt;a href=&quot;https://www.robinsloan.com/notes/home-cooked-app/&quot;&gt;building home-cooked apps&lt;/a&gt; tightly fitted to your own workflows. The first stage of this reading list was up and running on its own in a couple minutes after just setting up the fields in my Airtable base: a spreadsheet-like interface to my data that was powerful and visually pleasing.  More importantly, it &lt;em&gt;was already useful and useable&lt;/em&gt;. I used this first stage of the project as-is for a week, to track my read books and note ones I’d like to read in the future. I got a sense of what working with the modeling was like, and could remove and alter fields with no ceremony. Before I imported my full reading history or wrote a single line of code, I knew the structure was well set up for my personal use.&lt;/p&gt;

&lt;p&gt;This is all heavily inspired by Simon Hørup Eskildsen’s work, both &lt;a href=&quot;https://sirupsen.com/minimum-viable-airtable/&quot;&gt;Minimum Viable Airtable&lt;/a&gt; and his excellent &lt;a href=&quot;https://github.com/sirupsen/airrecord&quot;&gt;airrecord&lt;/a&gt; Ruby gem. Big thanks to him for the spark that made me start all this.&lt;/p&gt;

&lt;h2 id=&quot;book-tracking&quot;&gt;Book Tracking&lt;/h2&gt;
&lt;p&gt;Why build my own reading tracker, after a decade or so on Goodreads? I wanted:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;An easier way to filter my to-read list by author background. Specifically, reading a lot of authors with diverse backgrounds is important to me, so I wanted my to read list to be able to show me a single page of all the books that aren’t by straight white dudes.&lt;/li&gt;
  &lt;li&gt;The flexibility to show reading history and stats on my personal site exactly how I wanted them.  I do a summary of author backgrounds among the year’s books in my yearly review posts. This was a somewhat manual process, and I wanted to have the breakdowns automatically tracked and summarized for current and past years.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I only wrote code here for the second part: the reading history page. Just building a &lt;a href=&quot;https://airtable.com/shrklkcdOzAPEO7S5/tbldD4SKQaINX1gxw/viwavLuE5fkC10RCp?blocks=hide&quot;&gt;filtered Airtable view&lt;/a&gt; was good enough for the to-read list by author background, and I didn’t need to go any further than that!&lt;/p&gt;

&lt;p&gt;For the reading history page, a little context: this site is written in &lt;a href=&quot;https://jekyllrb.com/&quot;&gt;Jekyll&lt;/a&gt; and hosted on Github Pages. There’s a limited set of plugins you can use with Pages’ basic Jekyll integration, so I use two repos: a &lt;a href=&quot;https://github.com/thegreatape/thegreata.pe-source&quot;&gt;source repo&lt;/a&gt; with the Jekyll code and markdown for blog posts, and a &lt;a href=&quot;https://github.com/thegreatape/thegreatape.github.io&quot;&gt;built files repo&lt;/a&gt; with the compiled HTML to be served. I use a simple &lt;a href=&quot;https://github.com/thegreatape/thegreata.pe-source/blob/master/publish.sh&quot;&gt;publish script&lt;/a&gt; to sync content between them.&lt;/p&gt;

&lt;p&gt;The reading page is built with a relatively small amount of code. I have &lt;a href=&quot;https://github.com/thegreatape/thegreata.pe-source/blob/master/sync_reading.rb&quot;&gt;a Ruby script&lt;/a&gt; to query my Airtable’s API for my reading history, to which it does some light processing and dumps the results out to a single JSON file. The &lt;a href=&quot;https://github.com/thegreatape/thegreata.pe-source/blob/master/_layouts/reading.haml&quot;&gt;template for the reading page&lt;/a&gt; simply loads that file and renders the page with some straightforward Haml. This process is run on my laptop right now—maybe someday I’ll automate it, but at a couple books a month, remembering to run a single shell script after updating my Airtable reading records isn’t exactly a huge burden.&lt;/p&gt;

  &lt;p&gt;&lt;a href=&quot;/articles/2020/02/17/building-a-custom-reading-list-with-airtable/&quot;&gt;Building A Custom Reading List With Airtable&lt;/a&gt; was originally published by Thomas Mayfield at &lt;a href=&quot;&quot;&gt;Duct Tape and Turing Machines&lt;/a&gt; on February 17, 2020.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[2019 Year End Notes]]></title>
  <link rel="alternate" type="text/html" href="/articles/2019/12/31/2019-year-end-notes/" />
  <id>/articles/2019/12/31/2019-year-end-notes</id>
  <published>2019-12-31T00:00:00-05:00</published>
  <updated>2019-12-31T00:00:00-05:00</updated>
  <author>
    <name>Thomas Mayfield</name>
    <uri></uri>
    <email>Thomas.Mayfield@gmail.com</email>
  </author>
  <content type="html">&lt;p&gt;Another trip around the sun, another time to reflect on the way it went.&lt;/p&gt;

&lt;h2 id=&quot;lifting&quot;&gt;Lifting&lt;/h2&gt;

&lt;h3 id=&quot;what-went-well&quot;&gt;What Went Well&lt;/h3&gt;

&lt;p&gt;Even if they weren’t earthshatteringly huge, I did set a bunch of PRs in a bunch of rep ranges across all my main lifts. Progress is progress, and progress is good. Knowing this was aided by wrapping up a project where I went through my old pen and paper training logs and made a spreadsheet tracking rep PRs by date for each lift. SUPER helpful for making sure I’m making progress without needing to test 1RMs.&lt;/p&gt;

&lt;p&gt;I also finally figured out how to fit in cardio consistently and without taking away from my lifting unduly. Two factors: getting an airbike for a low-impact, all-weather indoor option and following the protocols in the &lt;a href=&quot;https://www.amazon.com/Tactical-Barbell-II-Conditioning-Black-ebook-dp-B0143HDCWS/dp/B0143HDCWS/&quot;&gt;Tactical Barbell Conditioning book&lt;/a&gt;. It worked: my rest times are down in between sets, and I’ve been able to build up a good “yup, can do that” level of endurance. Certainly nothing like what serious endurance athletes do (or even enthusiasts), but really great for keeping the wheels on health and general fitness wise while I put more energy into lifting-specific goals.&lt;/p&gt;

&lt;p&gt;As silly as it sounds, dropping a little money on a second barbell and power rack for the basement this year was also a huge win. Liz and I are both pretty busy, and not having to play schedule-Tetris around lifting time has been a big help.&lt;/p&gt;

&lt;h3 id=&quot;what-didnt-go-well&quot;&gt;What Didn’t Go Well&lt;/h3&gt;

&lt;p&gt;I’m observing more and more that high intensity, lower rep training seems to beat me up. Every dedicated strength block I ran this year banged me up somehow: I got stronger for sure, but I also wound up accumulating way more tweaks / injury precursors than when I did more hypertrophy-oriented blocks. Some degree of injuries is just part of this (as with, well, life), but the rate that issues cropped up just skyrocketed when I was pushing on heavy low-rep, powerlifting-style training.&lt;/p&gt;

&lt;p&gt;And back squatting and my elbows, man. I tried all kinds of different hand positions, and even moderately heavy loads seemed to aggravate it. I just ditched them entirely over the summer and have been front and SSB squatting exclusively since then. At least those are going well.&lt;/p&gt;

&lt;h3 id=&quot;whats-next&quot;&gt;What’s Next&lt;/h3&gt;

&lt;p&gt;Looking back, the periods where I’m able to consistently put in work and improve are when I’m training more like a bodybuilder than a powerlifter.&lt;/p&gt;

&lt;p&gt;I &lt;em&gt;do&lt;/em&gt; have long-term strength goals, but maybe I should listen to &lt;a href=&quot;https://thegreata.pe/articles/2016/12/31/2016-year-end-notes/&quot;&gt;me circa 2016&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Generally, I want to: feel good, look good, and be strong, in that order.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I’m feeling like it’s time to take the long way around to those strength goals. Progressing with more moderate to high rep training will sure take me longer to put 500lbs on a deadlift, but if I’m pulling it for five with reps left in the tank, I think that’ll sure feel “strong” to me. Or even simpler: maybe just taking a conservative max attempt here and there, but not spending much time training with heavy singles/doubles/triples.&lt;/p&gt;

&lt;h2 id=&quot;reading&quot;&gt;Reading&lt;/h2&gt;

&lt;p&gt;I hit my goal of 40 books! Not sure if I’ll aim for the same amount next year or a little less- I did have to deliberately pick a couple novellas off my TBR list in December to hit that one. Might be nice to have a little more slack to do stuff like working through tougher material where I want to go slowly and take notes.&lt;/p&gt;

&lt;h3 id=&quot;rough-breakdown&quot;&gt;Rough breakdown&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Science fiction: 18&lt;/li&gt;
  &lt;li&gt;Fantasy: 11&lt;/li&gt;
  &lt;li&gt;Nonfiction: 7&lt;/li&gt;
  &lt;li&gt;Fitness: 2&lt;/li&gt;
  &lt;li&gt;Tech: 2&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;On the diversity-of-authors front: of 40 books read, 16 were by women, 5 were by people of color and 9 were by publicly LGBTQ authors.&lt;/p&gt;

&lt;h3 id=&quot;notable-books-from-2019&quot;&gt;Notable books from 2019&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.goodreads.com/book/show/39863237-the-ruin-of-kings&quot;&gt;Ruin of Kings&lt;/a&gt;: One of the fresher fantasy books I’ve read recently: compelling characters, worldbuilding, and occasionally laugh out loud funny.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.goodreads.com/book/show/37794149-a-memory-called-empire&quot;&gt;A Memory Called Empire&lt;/a&gt;: A moving space opera that I found a beautiful and heartbreaking exploration of empire and colonialism.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.goodreads.com/book/show/41721879-children-of-ruin&quot;&gt;Children of Ruin&lt;/a&gt;: A sequel to one of my favorite reads from 2016, this book and &lt;a href=&quot;https://www.goodreads.com/book/show/23524779-guns-of-the-dawn&quot;&gt;Guns of the Dawn&lt;/a&gt; have cemented Adrian Tchaikovsky as one of my new favorite writers. It’s high concept space opera with intelligent octopuses and some genuine alien horror.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.goodreads.com/book/show/40672036-digital-minimalism&quot;&gt;Digital Minimalism&lt;/a&gt;: Cal Newport’s work consistently clicks with me. I &lt;em&gt;really&lt;/em&gt; liked a couple of the takehomes here: use only the technology that best supports your deeply held values and that intentionality can be satisfying in and of itself.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.goodreads.com/book/show/35382044-the-rust-programming-language&quot;&gt;Learning Rust&lt;/a&gt;: A well-written introduction to the Rust programming language, but mainly notable because I’d bounced off finishing this earlier in the year due to lack of focus. Finishing it was a good signal that I’m moving in a better direction.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;attention--intentionality-experiments&quot;&gt;Attention / Intentionality Experiments&lt;/h2&gt;

&lt;p&gt;From &lt;a href=&quot;https://thegreata.pe/articles/2018/12/30/2018-year-end-notes/&quot;&gt;last year&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;for 2018, I’m going to run a bunch of experiments to see what I can get to stick, maybe one a month or so. I might share the results, but probably not until year’s end when I’ve had a long time to see how the successful tests play out.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;In no particular order:&lt;/p&gt;

&lt;h3 id=&quot;taking-more-notes&quot;&gt;Taking More Notes&lt;/h3&gt;

&lt;p&gt;I read &lt;a href=&quot;https://www.goodreads.com/book/show/34507927-how-to-take-smart-notes&quot;&gt;How To Take Smart Notes&lt;/a&gt; in January, and it got me thinking more about how writing and note taking &lt;em&gt;are&lt;/em&gt; thinking. I didn’t adopt the Zettlekasten system that the book discusses, but I’ve taken &lt;em&gt;way&lt;/em&gt; more notes this year both at work and at home.&lt;/p&gt;

&lt;p&gt;Results: I feel like it’s made a difference in my ability to pull together thoughts quickly into something coherent.&lt;/p&gt;

&lt;h3 id=&quot;digital-declutter&quot;&gt;Digital Declutter&lt;/h3&gt;

&lt;p&gt;From Cal Newport’s Digital Minimalism, above: I took a month away from non-essential technology. In my case, that was reddit, instagram, news and any other damn thing that I’d find myself opening in a browser tab before I realized I was doing it.&lt;/p&gt;

&lt;p&gt;Results: I found it helpful to force me to flat out break some bad habits: just trying to reduce the time spent on these was much tougher than just banning them entirely for a while, then re-establishing a better relationship.&lt;/p&gt;

&lt;h3 id=&quot;no-booze&quot;&gt;No Booze&lt;/h3&gt;

&lt;p&gt;Abstaining April? Anyway, I was starting to notice in the morning how I felt if I had a drink before bed, and &lt;em&gt;really&lt;/em&gt; how I felt if I had more than one. I gave myself a month dry to see how it affected overall energy and sleep, and honestly just to make sure I &lt;em&gt;could&lt;/em&gt; and that my relationship with alcohol wasn’t becoming problematic.&lt;/p&gt;

&lt;p&gt;Results: noticeably fewer “blah” mornings, and in the months afterwards, less having an evening drink out of habit.&lt;/p&gt;

&lt;h3 id=&quot;emacs--org-mode&quot;&gt;Emacs / Org-Mode&lt;/h3&gt;

&lt;p&gt;Having tried a bunch of different note-taking apps and TODO trackers (notably Ulysses and Habitica), I still had a bunch of ideas about what the ideal note taking / personal information management system would look like. I figured that I’d try org-mode for a bit before taking the plunge and writing my own thing. Turns out it’s just about as customizable as I needed. Tried spacemacs and doom-emacs, but the learning curve of (re)learning emacs, org-mode AND their own systems/opinions on configuration wound up a bit much. I finally just resurrected my old emacs config from the last time I tried using it (hooray git) and got something workable going from there.&lt;/p&gt;

&lt;p&gt;Results: still using org-mode for note-taking, but I never really got it set up for TODO tracking in a way that worked long-term for me.&lt;/p&gt;

&lt;h3 id=&quot;mornings-for-creative-work&quot;&gt;Mornings For Creative Work&lt;/h3&gt;

&lt;p&gt;I found I was still struggling (as I had for years) to fit creative work into my life: writing, personal coding, art, etc. So, combining a few observations from the last year:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;My wakeup times are earlier and way more consistent due to Her Imperial Dogbutt needing to be let out and walked.&lt;/li&gt;
  &lt;li&gt;I’ve been lifting weights for almost seven years, and that habit is SOLID. Especially with a home gym for the last three years, I don’t miss workouts outside of sickness / injury / etc. I’ve always lifted in the mornings, before work.&lt;/li&gt;
  &lt;li&gt;On my rest days or weekends, I’d find that mornings were now my best time for getting code written. A couple cups of coffee after walking the dog and things would flow really easily.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So I tried shifting my workouts to the evening (which take ~1 - 1.5 hours), getting to work a bit earlier on days I’m in the office and shooting for 30-60 minutes of creative work in the morning before I hop on a bus or up to the home office to get working.&lt;/p&gt;

&lt;p&gt;Results: the creative work in the morning didn’t really pan out, but having my work schedule an hour earlier actually wound up fitting me nicely. And I’ve kept the evening workouts because it’s been nice to be able to take an extra few minutes of rest when needed without feeling rushed or stressing about missing the bus.&lt;/p&gt;

&lt;h3 id=&quot;bullet-journaling-again&quot;&gt;Bullet Journaling (Again)&lt;/h3&gt;

&lt;p&gt;I tried using a &lt;a href=&quot;https://bulletjournal.com/&quot;&gt;Bullet Journal&lt;/a&gt; pen and paper system to track TODOs and habits last year, and fell out of it after about a month. But the idea of keeping that tracking and thinking process away from my computer has an enduring appeal, so I gave it another shot in the hopes that it’d lend some calm and deliberateness to my planning.&lt;/p&gt;

&lt;p&gt;Results: I found the morning and evening review much easier to stick to with paper, and quite valuable. But for daily use, the continual scanning of pages needed to pick out what needs attention just made me worry about all of it, instead of feeling like I could offload what’s in my head.&lt;/p&gt;

&lt;h3 id=&quot;new-keyboard---accidental-better-habits&quot;&gt;New Keyboard -&amp;gt; Accidental Better Habits&lt;/h3&gt;

&lt;p&gt;This was an unintentional experiment. In the fall, I was getting some early RSI wrist strain issues, and decided to take the plunge on getting an &lt;a href=&quot;https://ergodox-ez.com/&quot;&gt;Ergodox EZ&lt;/a&gt; to reduce the lateral hand movement during typing that seems to piss my wrists off. When I got the keyboard, I committed to only using that keyboard for a month (rather than alternating with my laptop’s keyboard) to speed up motor learning.&lt;/p&gt;

&lt;p&gt;Results / unexpected bonus: a big time-wasting trigger for me was opening my laptop on a comfortable chair and “just relaxing for a few minutes” (e.g. feeding an hour into derping on internet). Removing the sitting down with laptop trigger actually did a really good job of reducing the amount of time I’d burn this way!&lt;/p&gt;

&lt;p&gt;Also: the keyboard is dope as hell.&lt;/p&gt;

&lt;h3 id=&quot;accountability-buddy&quot;&gt;Accountability Buddy&lt;/h3&gt;

&lt;p&gt;Last, but definitely not least: I think this one’s moved the needle more on spending my time intentionally than anything else on this list. In late fall, after discussing with a friend how we were both struggling to make progress on projects, we committed to a simple accountability pact: each Sunday, we email each other about what we accomplished the last week.&lt;/p&gt;

&lt;p&gt;Results: It’s been huge for me so far. I starting keeping a worklog/diary for my projects, first just to make the weekly email easier to compose, but that as well has turned out to give me some valuable mid-week deliberateness. Especially on days where I don’t work on my chosen project, it’s helped me immensely to write down “taking the evening off to recharge”. And knowing I’ll be sending that to a friend later helps me be honest with myself.&lt;/p&gt;

  &lt;p&gt;&lt;a href=&quot;/articles/2019/12/31/2019-year-end-notes/&quot;&gt;2019 Year End Notes&lt;/a&gt; was originally published by Thomas Mayfield at &lt;a href=&quot;&quot;&gt;Duct Tape and Turing Machines&lt;/a&gt; on December 31, 2019.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[Quickly publishing notes from Ulysses with Alfred and JXA]]></title>
  <link rel="alternate" type="text/html" href="/articles/2019/02/23/publishing-ulysses-notes/" />
  <id>/articles/2019/02/23/publishing-ulysses-notes</id>
  <published>2019-02-23T00:00:00-05:00</published>
  <updated>2019-02-23T00:00:00-05:00</updated>
  <author>
    <name>Thomas Mayfield</name>
    <uri></uri>
    <email>Thomas.Mayfield@gmail.com</email>
  </author>
  <content type="html">&lt;p&gt;One of the things I’ve been working on for a few months now is taking more notes. Being intentional and systematic about writing down material I’m reading or learning has felt like a nice boost to my ability to make progress on a number of projects.&lt;/p&gt;

&lt;p&gt;I’m using &lt;a href=&quot;https://ulysses.app/&quot;&gt;Ulysses&lt;/a&gt; on OS X as my main note taking program and it’s a really fantastic writing environment, but it’s slightly cumbersome to share my notes with other people. While Ulysses can export writing in a variety of file formats, I missed &lt;a href=&quot;https://www.notion.so/&quot;&gt;Notion&lt;/a&gt;’s ability to generate a public url for sharing a note with a single click. So, I built something to do that for Ulysses!&lt;/p&gt;

&lt;p&gt;It’s an &lt;a href=&quot;https://www.alfredapp.com/&quot;&gt;Alfred 3&lt;/a&gt; workflow—all I have to do is hit Cmd-Space, type “pun” and hit Enter. The workflow then takes the currently open Ulysses note, automates the steps of exporting it to nicely formatted HTML, publishes it to a url on my site, and copies that url to the clipboard. It looks like this:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/pun-demo.gif&quot; alt=&quot;demo&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;details&quot;&gt;Details&lt;/h2&gt;
&lt;p&gt;Building this involved digging into a bunch of stuff I haven’t used before, and there are more than a couple moving parts:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.alfredapp.com/help/workflows/&quot;&gt;Alfred workflows&lt;/a&gt; are a way to extend Alfred to be way more than an application launcher. They let you string together scripts (written in shell, Python, Ruby, or whatever) with user input from Alfred in really powerful ways. The workflow is what glues all these pieces together.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://developer.apple.com/library/archive/documentation/LanguagesUtilities/Conceptual/MacAutomationScriptingGuide/index.html&quot;&gt;JXA: Javascript For Automation&lt;/a&gt;: as it turns out, Ulysses &lt;a href=&quot;https://ulysses.app/kb/x-callback-url/&quot;&gt;does have an API&lt;/a&gt;, but there’s no support for programmatically triggering an export of a sheet. So I needed a way to automate the actual button and menu clicking that you do in Ulysses to export as sheet as HTML. Luckily, Mac OS has long had good accessibility baked into its UI toolkits and you can script interactions with them via AppleScript and (since Yosemite) via Javascript! The docs on the JS specific side of things were a little sparse and most of the examples I found were in AppleScript (since it’s been around much longer), but I was able to cobble together something working. The JXA part looks like this:&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;ObjC&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'stdlib'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  
  &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;notesPath&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getenv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'notes_repository_path'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;app&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Application&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Ulysses&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;system&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Application&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;System Events&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;window&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;system&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;processes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;byName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Ulysses&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;windows&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;currentlyOpenNotes&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;window&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;scrollAreas&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;textAreas&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;folderName&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;currentlyOpenNotes&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;split&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;n&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;replace&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;^#&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\s&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;*|&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\/)&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/g&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;''&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;toLowerCase&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;replace&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\s&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;+/g&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'-'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;exportTargetPath&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;notesPath&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;folderName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;system&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'rm -rf '&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;exportTargetPath&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;system&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'mkdir '&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;exportTargetPath&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;exportNotes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;exportTargetPath&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  
  &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;exportNotes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;activate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
  
    &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;exportButton&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;window&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;toolbars&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;buttons&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;whose&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;description&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Quick Export&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;})[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;exportButton&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;actions&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'AXPress'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;perform&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;exportButton&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;popOvers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;buttons&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;whose&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;description&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Save to location&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;actions&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'AXPress'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;perform&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
      &lt;span class=&quot;c1&quot;&gt;// even though this works and opens the button, it also seems to &lt;/span&gt;
      &lt;span class=&quot;c1&quot;&gt;// raise a &quot;message not understood&quot; error. damned if I know why.&lt;/span&gt;
      &lt;span class=&quot;c1&quot;&gt;// we seem to be able to just ignore it and move on.&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;toString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;());&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;delay&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;system&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;keystroke&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;g&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;using&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;shift down&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;command down&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]});&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// bring up path entry dialog&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;delay&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;system&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;keystroke&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// enter path&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;system&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;keyCode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;36&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// press return to select path&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;delay&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;system&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;keyCode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;36&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// press return to begin export&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;exportTargetPath&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Some resources I found helpful while figuring this part out:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/JXA-Cookbook/JXA-Cookbook&quot;&gt;JXA Cookbook&lt;/a&gt; Great general resource for getting started with JXA.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://forum.keyboardmaestro.com/t/os-x-accessibility-inspector-uielementinspector-tool-for-ui-scripting/3443&quot;&gt;UIElementInspector&lt;/a&gt; for examining the UI element hierarchy inside Ulysses so I could figure how to drill down to the buttons and menus I needed to interact with.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.deanishe.net/post/2018/10/workflow-environment-variables-in-alfred/&quot;&gt;Workflow/environment variables in Alfred&lt;/a&gt; Alfred exposes the variable you set to each script environment a little differently, this is a great guide to each one, including JXA.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;With the HTML exported, the rest is a fairly simple shell script. I use &lt;a href=&quot;https://pages.github.com/&quot;&gt;Github Pages&lt;/a&gt; to host this blog, so publishing new pages is just a matter of committing them and pushing to Github. The script adds the exported files, pushes them to Github, generates the url where they’ll be accessible and copies it to the clipboard.&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;#!/bin/bash&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;pushd&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$notes_repository_path&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; /dev/null

git status | &lt;span class=&quot;nb&quot;&gt;grep&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'nothing to commit'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; /dev/null
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$?&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-eq&lt;/span&gt; 0 &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then
  &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;No changes to publish&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;else
	&lt;/span&gt;git add &lt;span class=&quot;nb&quot;&gt;.&lt;/span&gt;
	git commit &lt;span class=&quot;nt&quot;&gt;-m&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Ulysses note publish &lt;/span&gt;&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;date&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; /dev/null
	git push origin HEAD &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; /dev/null
	git show HEAD | &lt;span class=&quot;nb&quot;&gt;grep&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;+++ b.*index.html&quot;&lt;/span&gt; | sed &lt;span class=&quot;s2&quot;&gt;&quot;s/&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\+\+\+&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; b&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\/&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;//&quot;&lt;/span&gt; | sed &lt;span class=&quot;s2&quot;&gt;&quot;s/index.html//&quot;&lt;/span&gt; | xargs &lt;span class=&quot;nt&quot;&gt;-I&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;{}&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$site_domain&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;/{}&quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;fi&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;setup-instructions&quot;&gt;Setup Instructions&lt;/h2&gt;
&lt;p&gt;Want to try this yourself?&lt;/p&gt;

&lt;p&gt;Setup:&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;If you don’t already have one, &lt;a href=&quot;https://pages.github.com/&quot;&gt;set up your Github pages site&lt;/a&gt; and make sure &lt;a href=&quot;https://git-scm.com/&quot;&gt;git&lt;/a&gt; is installed on your computer.&lt;/li&gt;
  &lt;li&gt;Install the workflow (via &lt;a href=&quot;http://www.packal.org/workflow/publish-ulysses-notes&quot;&gt;Packal&lt;/a&gt;)&lt;/li&gt;
  &lt;li&gt;Configure the environment variables in the workflow:
    &lt;ol&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;notes_repository_path&lt;/code&gt;: set to the absolute path of your Github pages repo where you want the notes html to be published.&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;site_domain&lt;/code&gt;: set to the domain where the notes are hosted—this will be used to construct the url that’s copied to the clipboard after exporting.&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;With the Ulysses note you want to publish open, bring up Alfred, type “pun” and hit enter.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Something broken for you? &lt;a href=&quot;https://github.com/thegreatape/publish-ulysses-notes/issues&quot;&gt;Report a bug&lt;/a&gt; on the project’s Github page!&lt;/p&gt;

  &lt;p&gt;&lt;a href=&quot;/articles/2019/02/23/publishing-ulysses-notes/&quot;&gt;Quickly publishing notes from Ulysses with Alfred and JXA&lt;/a&gt; was originally published by Thomas Mayfield at &lt;a href=&quot;&quot;&gt;Duct Tape and Turing Machines&lt;/a&gt; on February 23, 2019.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[2018 Year End Notes]]></title>
  <link rel="alternate" type="text/html" href="/articles/2018/12/30/2018-year-end-notes/" />
  <id>/articles/2018/12/30/2018-year-end-notes</id>
  <published>2018-12-30T00:00:00-05:00</published>
  <updated>2018-12-30T00:00:00-05:00</updated>
  <author>
    <name>Thomas Mayfield</name>
    <uri></uri>
    <email>Thomas.Mayfield@gmail.com</email>
  </author>
  <content type="html">&lt;p&gt;At the end of 2018, looking inwards. How did that go?&lt;/p&gt;

&lt;h2 id=&quot;dog&quot;&gt;Dog&lt;/h2&gt;
&lt;p&gt;In April, my wife and I adopted a puppy! This is &lt;a href=&quot;https://www.instagram.com/ripleyromps/&quot;&gt;Ripley&lt;/a&gt;—she’s a German Shepherd / Basset Hound / ¯\_(ツ) /¯ mix that we adopted through &lt;a href=&quot;https://www.gdrne.com/&quot;&gt;Great Dog Rescue New England&lt;/a&gt;. (For the record, that’s “Lieutenant Ellen” not “Believe It Or Not”.)&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/ripley-winter.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;She’s been a wonderful addition to the household, and we’ve spend much of the year learning how to Life With Dog.&lt;/p&gt;

&lt;h2 id=&quot;fitness&quot;&gt;Fitness&lt;/h2&gt;
&lt;p&gt;From last year:&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;I have one simple goal for next year: commit to running &lt;a href=&quot;https://www.strongerbyscience.com/training-toolkit/&quot;&gt;Average to Savage&lt;/a&gt; for the whole year.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I did this! And it worked pretty well. Over the course of three runs through the program, I put 45 lbs on my squat and deadlift training maxes, 22.5 lbs on bench press, and maybe 5 lbs on overhead press. I haven’t tested true 1RMs all year, but rep maxes have all been moving in the right direction. Most importantly for my goals: I got modestly more jacked, definitely can handle more volume, and &lt;em&gt;didn’t get hurt&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;For 2019, I’d like to take the base I built this year and push my top-end strength up to make progress towards my long-term 2/3/4/5 plate goals for press/bench/squat/deadlift. I’ll definitely be committing to another single program for a long stretch of time, at least six months. Maybe a year. The leading candidate is something &lt;a href=&quot;http://swoleateveryheight.blogspot.com/2014/07/the-gzcl-method-simplified_13.html&quot;&gt;GZCL method&lt;/a&gt;-based. I’m giving myself until I get back from visiting family in the second week of January to firmly commit to the specifics.&lt;/p&gt;

&lt;h2 id=&quot;reading&quot;&gt;Reading&lt;/h2&gt;
&lt;p&gt;I read less than my usual this year, only finishing 31 books. Seven of these were over 700 page fantasy doorstoppers, so that’s not &lt;em&gt;quite&lt;/em&gt; as low as sounds, but it’s still substantially less than last year. I think a gentle nudge to spend a few more evenings reading is in order here.&lt;/p&gt;

&lt;p&gt;Rough breakdown by genre:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Fantasy: 15&lt;/li&gt;
  &lt;li&gt;Nonfiction: 7&lt;/li&gt;
  &lt;li&gt;Scifi: 5&lt;/li&gt;
  &lt;li&gt;Fitness: 4&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;On the diversity-of-authors front: of 31 books read, 14 were by women, 3 were by people of color and 4 were by publicly LGBTQ authors.&lt;/p&gt;

&lt;p&gt;Notable books from 2018:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.goodreads.com/book/show/34466963-why-we-sleep&quot;&gt;Why We Sleep&lt;/a&gt; An eye-opening book on shuteye (sorry). I’ve been on the sleep-is-super-important train for a while, but this absolutely underscored how critical good sleep is to a live well-lived.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;om/book/show/7743175-a-memory-of-light&quot;&gt;A Memory Of Light&lt;/a&gt; As a teenager, I must have read and re-read what had been published of the Wheel of Time maybe three or four times. Re-reading the series beginning last year felt like visiting old friends; finally reading the end two decades later was quite emotional.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.goodreads.com/book/show/35957157-thinking-in-bets&quot;&gt;Thinking In Bets&lt;/a&gt; A great read on decision making and risk; “resulting” has permanently entered my vocabulary at this point.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;software&quot;&gt;Software&lt;/h2&gt;
&lt;p&gt;I &lt;a href=&quot;https://twitter.com/thegreatape/status/972995638794358784&quot;&gt;quit using Twitter&lt;/a&gt; in March. My reasons at the time were time and attention-based, but I think what’s kept me from coming back is how much better it’s been for my mental health. I miss some of the connections I had with people there, but I don’t miss taking a cortisol bath every time I opened Tweetdeck.&lt;/p&gt;

&lt;p&gt;I’ve spent a lot of time this year trying out different tools and techniques for organizing notes and todos.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;I used &lt;a href=&quot;https://bear.app/&quot;&gt;Bear&lt;/a&gt; as my primary notes and todo app for a lot of the year. I really really loved its polished markdown editing, but I had to abandon it after I ran into some ugly/mysterious syncing problems (showing up to 1:1s with team members and having the last few months of notes gone is &lt;em&gt;not&lt;/em&gt; fun).&lt;/li&gt;
  &lt;li&gt;I tried &lt;a href=&quot;https://bulletjournal.com/&quot;&gt;Bullet Journaling&lt;/a&gt; for a month or so. I liked the self-reflection habit it enabled, but needing to continually scan pages for loose ends wasn’t for me and a physical notebook isn’t good for ubiquitous capture of ideas, especially on public transit.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://notion.so&quot;&gt;Notion&lt;/a&gt; has a lot going for it as notes / todo / personal wiki app, but it didn’t quite all hang together after a few weeks of use. The typography / layout were a little awkward, it was difficult to use without touching the mouse, and it was slow and laggy in that just-enough-to-be-annoying way that Electron apps often have. I think I’d happily use it as a part of a team at work, though.&lt;/li&gt;
  &lt;li&gt;I’m currently trying out &lt;a href=&quot;https://ulysses.app/&quot;&gt;Ulysses&lt;/a&gt; for notes and writing: this post has been largely written using it.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://habitica.com&quot;&gt;Habitica&lt;/a&gt; has been surprisingly (and slightly embarrassingly) effective at helping me stick to daily / weekly habits. I’m also using it for todo tracking, not because it’s super great at that, but because the habit part makes sure I’m actually looking at my lists daily.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I don’t have a ton of time to play games, and tend to go all-in on a single game at a time. I played a lot of &lt;a href=&quot;https://playoverwatch.com/&quot;&gt;Overwatch&lt;/a&gt; early in the year, but found it was only really fun when playing with friends I actually knew. Switched over to playing &lt;a href=&quot;https://www.warframe.com/&quot;&gt;Warframe&lt;/a&gt; since, and it’s been a blast.&lt;/p&gt;

&lt;h2 id=&quot;learning--attention&quot;&gt;Learning / Attention&lt;/h2&gt;
&lt;p&gt;Last year, I said:&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;…in 2018, I’m going to try averaging one post a week here about something I’m learning, practicing or building.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;That did not go well. Right off the bat, I had trouble hitting that weekly cadence. Working through &lt;a href=&quot;https://www.nand2tetris.org/&quot;&gt;nand2tetris&lt;/a&gt; was slow and trying to get a weekly piece written on it felt more like producing a grade school book report than sharing the joy and satisfaction of learning. I disliked how these pieces read enough to &lt;a href=&quot;https://thegreata.pe/logbook/&quot;&gt;push them off the front page&lt;/a&gt; of this blog.&lt;/p&gt;

&lt;p&gt;Falling further and further behind added stress and guilt instead of getting me excited. When my wife and I adopted Ripley at eight weeks old in April, my free time and sleep schedule got put in a blender for most of the summer. I never really got back on track, aside from a brief burst of hilariously overestimating my time and mental energy in &lt;a href=&quot;https://thegreata.pe/logbooks/2018-06-24-15/&quot;&gt;starting a learn to draw course&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;There are a lot of stories out there about people using methods like this to accomplish great creative endeavors (famously, Jerry Seinfeld’s daily &lt;a href=&quot;https://www.writersstore.com/dont-break-the-chain-jerry-seinfeld/&quot;&gt;don’t break the chain&lt;/a&gt;). I wouldn’t rule out this approach from ever working for me, but this particular implementation was clearly a very poor fit.&lt;/p&gt;

&lt;p&gt;What can I take away from this failure? It may have come down to this: learning is not a linear process. You go through through long periods of struggling to absorb and integrate new information before any breakthroughs happen. In setting that concrete writing goal, I trying to graft a nonlinear progression onto a strict schedule. Maybe it shouldn’t be surprising that it backfired on me.&lt;/p&gt;

&lt;p&gt;I still need to find a process that works for me. I still think a lot about &lt;a href=&quot;http://calnewport.com/books/deep-work/&quot;&gt;Deep Work&lt;/a&gt; and want to push towards a place where that kind of deep, meaningful focus and work is a regular part of my life. So: for 2018, I’m going to run a bunch of experiments to see what I can get to stick, maybe one a month or so. I might share the results, but probably not until year’s end when I’ve had a long time to see how the successful tests play out.&lt;/p&gt;

  &lt;p&gt;&lt;a href=&quot;/articles/2018/12/30/2018-year-end-notes/&quot;&gt;2018 Year End Notes&lt;/a&gt; was originally published by Thomas Mayfield at &lt;a href=&quot;&quot;&gt;Duct Tape and Turing Machines&lt;/a&gt; on December 30, 2018.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[Clojure, vim, and tmux: using your editor as a repl scratchpad]]></title>
  <link rel="alternate" type="text/html" href="/articles/2018/02/11/clojure-vim-and-tmux-using-your-editor-as-a-repl-scratchpad/" />
  <id>/articles/2018/02/11/clojure-vim-and-tmux-using-your-editor-as-a-repl-scratchpad</id>
  <published>2018-02-11T00:00:00-05:00</published>
  <updated>2018-02-11T00:00:00-05:00</updated>
  <author>
    <name>Thomas Mayfield</name>
    <uri></uri>
    <email>Thomas.Mayfield@gmail.com</email>
  </author>
  <content type="html">&lt;p&gt;I use Clojure at work, but the frequency varies—I’ll sometimes go months in between working on a project that uses it. Whenever I come back to using the language after some time away, I try to file a few sharp edges off the tooling I use around it.&lt;/p&gt;

&lt;p&gt;Today’s goal: a better vim to repl flow for when:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;I don’t want to simply save and source an entire file into a repl session’s memory (via &lt;a href=&quot;https://github.com/tpope/vim-fireplace&quot;&gt;vim-fireplace&lt;/a&gt;’s &lt;code class=&quot;highlighter-rouge&quot;&gt;cpr&lt;/code&gt;)&lt;/li&gt;
  &lt;li&gt;I’m mucking around with some exploratory-type coding and the expression is getting too large to edit comfortable in the repl window itself.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Vim-fireplace has a “quasi-repl” that’s intended to let you do this kind of scratchpad code-and-eval, but it’s never worked very well for me. I usually write code inside of a &lt;a href=&quot;https://robots.thoughtbot.com/a-tmux-crash-course&quot;&gt;tmux&lt;/a&gt; session, with a vim window beside with a window with a shell I’m using for a repl or test running. When writing Ruby, I use &lt;a href=&quot;https://github.com/pgr0ss/vimux-ruby-test&quot;&gt;pgr0ss/vimux-ruby-test&lt;/a&gt; to quickly start the test for the file or line my cursor’s on. It’s super simple: rather than trying to run the test as subcommand in Vim and then show the results inside the editor, it just figures out the appropriate shell command, jams it over into the other window, and hits Enter.&lt;/p&gt;

&lt;p&gt;I wanted more or less this same workflow for evaluating Clojure code. If could just get Vim to send a Clojure s-expression over to a running repl wholesale at a keystroke, I could stay over in Vim editing away and run the code I’m writing without even switching windows. Lo and behold, the author of &lt;a href=&quot;https://github.com/benmills/vimux&quot;&gt;vimux&lt;/a&gt; had the same idea—there’s even an example config for setting this up in the project’s docs!&lt;/p&gt;

&lt;p&gt;I’ve tweaked &lt;a href=&quot;https://github.com/benmills/vimux/blob/37f41195e6369ac602a08ec61364906600b771f1/doc/vimux.txt#L245-L273&quot;&gt;the original documentation here slightly&lt;/a&gt;, as it had what I think was a mistake in the function (I opened a PR to change it) and I wanted to put the mappings in an autocmd group so they were only set up for Clojure files. What I would up with:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-vim&quot; data-lang=&quot;vim&quot;&gt;&lt;span class=&quot;k&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;!&lt;/span&gt; VimuxSlime&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;call&lt;/span&gt; VimuxRunCommand&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;@&lt;span class=&quot;k&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;endfunction&lt;/span&gt;

augroup clojure
  autocmd&lt;span class=&quot;p&quot;&gt;!&lt;/span&gt;
  &lt;span class=&quot;c&quot;&gt;&quot; In visual mode, send the currently visually selected text to the repl with &amp;lt;leader&amp;gt;sl&lt;/span&gt;
  autocmd &lt;span class=&quot;nb&quot;&gt;BufEnter&lt;/span&gt; *&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;cljs&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;*&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;clj&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;*&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;cljs&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;hl vmap &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;Leader&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;sl&lt;/span&gt; &quot;vy &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;call&lt;/span&gt; VimuxSlime&lt;span class=&quot;p&quot;&gt;()&amp;lt;&lt;/span&gt;CR&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;c&quot;&gt;&quot; In normal mode, send the current block of code (that's surrounded by empty lines) to the repl with &amp;lt;leader&amp;gt;sl&lt;/span&gt;
  autocmd &lt;span class=&quot;nb&quot;&gt;BufEnter&lt;/span&gt; *&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;cljs&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;*&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;clj&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;*&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;cljs&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;hl nmap &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;Leader&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;sl&lt;/span&gt; vip&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;Leader&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;sl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;CR&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
augroup END&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Simple enough to use that hopefully I’ll remember it in between bouts with Clojure projects.&lt;/p&gt;

  &lt;p&gt;&lt;a href=&quot;/articles/2018/02/11/clojure-vim-and-tmux-using-your-editor-as-a-repl-scratchpad/&quot;&gt;Clojure, vim, and tmux: using your editor as a repl scratchpad&lt;/a&gt; was originally published by Thomas Mayfield at &lt;a href=&quot;&quot;&gt;Duct Tape and Turing Machines&lt;/a&gt; on February 11, 2018.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[Generating Randomized Color Palettes (That Aren’t Clown Vomit)]]></title>
  <link rel="alternate" type="text/html" href="/articles/2018/02/04/generating-randomized-color-palettes/" />
  <id>/articles/2018/02/04/generating-randomized-color-palettes</id>
  <published>2018-02-04T00:00:00-05:00</published>
  <updated>2018-02-04T00:00:00-05:00</updated>
  <author>
    <name>Thomas Mayfield</name>
    <uri></uri>
    <email>Thomas.Mayfield@gmail.com</email>
  </author>
  <content type="html">&lt;p&gt;Before we dive into randomized color palette generation, a little context on what brought me here:&lt;/p&gt;

&lt;h2 id=&quot;little-and-often&quot;&gt;Little And Often&lt;/h2&gt;
&lt;p&gt;I’ve been spending some time reviving a project that I’d started and abandoned mid-last year. The idea of using small, frequent periods of work to make progress towards big goals is one that’s stuck with me over the years: basically favoring putting in 20 minutes a day on a task versus dedicating an entire Saturday afternoon. It’s effective for chopping up very large projects into manageable pieces, but also has some notably favorable effects on learning/skill acquisition and exercise-induced physical adaptations.&lt;/p&gt;

&lt;p&gt;It’s also a pattern that has been a real challenge for me to undertake on a regular basis, and I was trying to figure out what I could do to boost my adherence to these kind of relatively short, daily sessions. I decided to try building a visualization of them, plotting the time spent across a calendar view—much like Jerry Seinfeld’s &lt;a href=&quot;https://www.writersstore.com/dont-break-the-chain-jerry-seinfeld/&quot;&gt;Don’t Break the Chain&lt;/a&gt;. I wanted something that I could glance at to see where my time was going over a week, a month, a (gulp) year.&lt;/p&gt;

&lt;p&gt;It’s currently in only-usable-by-me alpha mode, but the project is called &lt;a href=&quot;http://littleandoften.club&quot;&gt;Little And Often&lt;/a&gt;, from strength coach Dan John’s advice to &lt;a href=&quot;http://danjohn.net/2017/01/advice-for-the-general-enthusiast/&quot;&gt;“train little and often over the long haul”&lt;/a&gt;. It looks something like this:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/images/lo-calendar.png&quot;&gt;&lt;img src=&quot;/images/lo-calendar.png&quot; alt=&quot;Little And Often Calendar&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Getting this calendar of activities to be aesthetically pleasing proved more interesting than I thought. I initially picked a color palette by hand (using &lt;a href=&quot;https://coolors.co/fe5f55-f0b67f-d6d1b1-c7efcf-eef5db&quot;&gt;this nifty tool at Coolors.co&lt;/a&gt;) to give each of the activities some contrast with each other. But since the palettes were limited to five colors. as I added new activities to track, I had to start repeating colors and the whole thing became harder to read at a glance. I wanted to be able to add more or less arbitrary numbers of activities, and so it became clear I’d need some way to generate randomized color palettes; hopefully ones that wouldn’t look like an acid trip through the Crayola factory.&lt;/p&gt;

&lt;h2 id=&quot;research&quot;&gt;Research&lt;/h2&gt;
&lt;p&gt;The task at hand, then, was to build a system for picking an arbitrary number of colors to form a harmonious palette, so that when a user adds another new activity to their existing set, it’ll show up on their calendar plot and look nice.&lt;/p&gt;

&lt;p&gt;All the inspiration for the system and visualizations I wound up building came from these two articles:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;http://devmag.org.za/2012/07/29/how-to-choose-colours-procedurally-algorithms/&quot;&gt;How to Choose Colours Procedurally&lt;/a&gt;: A bit focused towards game development, but this was useful for thinking about breaking down color selection into picking a varying set of numeric values, be it RGB values or varying hue, saturation, and luminescence.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;http://www.websiteoptimization.com/speed/tweak/color-harmony/&quot;&gt;Automated Color Harmony Tools&lt;/a&gt;: This got me thinking about different ways of limiting the selection space of the colors I’d be generating, so as to wind up with a set of colors whose relations to each other were pleasing to the human eye.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;What I wound up with was an algorithm that does a decent job, at least for 10-20-ish colors. I wrote this in Ruby, and the code is in the &lt;a href=&quot;https://github.com/thegreatape/little-and-often/blob/master/app/models/palette.rb&quot;&gt;Palette class here&lt;/a&gt;. It works as follows:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Gather our inputs:
    &lt;ul&gt;
      &lt;li&gt;A set of arcs around a color wheel to select hues from: this is defined by up to three starting angles, and up to three corresponding ranges (in degrees) starting from them.&lt;/li&gt;
      &lt;li&gt;An angle offset at which to start the initial arc. This was useful to have as a separate value from the angles themselves, as it made it easier to define a harmonious set of arcs, then use the offset to “spin” the color wheel around for random samples of colors from different areas.&lt;/li&gt;
      &lt;li&gt;Initial values for the saturation and lightness values of the colors produced.&lt;/li&gt;
      &lt;li&gt;“Jitter” values for saturation and lightness: the maximum size of random values added or subtracted from the colors’ saturation and lightness.&lt;/li&gt;
      &lt;li&gt;A minimum geometric distance value that the algorithm would attempt to keep between each color produced in the palette.&lt;/li&gt;
      &lt;li&gt;A count of how many colors to generate, and (optionally) a set of pre-existing colors to comprise the start of the palette.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;If no pre-existing colors were given, pick a starting color from within the angle ranges.&lt;/li&gt;
  &lt;li&gt;Until we’ve generated as many colors as requested, do the following:
    &lt;ol&gt;
      &lt;li&gt;Pick a hue from within the specific angle ranges.&lt;/li&gt;
      &lt;li&gt;Pick a saturation using the initial saturation plus or minus a random value between 0 and the saturation jitter.&lt;/li&gt;
      &lt;li&gt;Pick a lightness using the initial lightness plus or minus a random value between 0 and the lightness jitter.&lt;/li&gt;
      &lt;li&gt;If the resulting HSL color is at least the maximum color distance away from each of the other colors in the palette, add it to the palette.&lt;/li&gt;
      &lt;li&gt;Otherwise, try again (up to 100 times) to generate a sufficiently distant color. If the 101st attempt is still too close to the other already selected colors, add it anyway. This is to prevent a palette with small angle ranges and lots of colors from being unable to generate any new colors at all.&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;visualization&quot;&gt;Visualization&lt;/h2&gt;
&lt;p&gt;This has a ton of parameters, and trying to figure out the best or even reasonable values was tough to arrive at by just playing around in code and applying the result to my activity calendar.  It was also hard to tell the difference between a bug in the code and just parameters that weren’t working very well. So, I decided to build a testing sandbox, where I could put a bunch of parameters into a web form and have it spit out a series of resulting palettes based on them.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/images/lo-color-test.png&quot;&gt;&lt;img src=&quot;/images/lo-color-test.png&quot; alt=&quot;Little And Often Calendar&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The only parameter that isn’t on the form was angle offset—I found it more helpful to use the other parameters to draw the shape of the arcs I wanted, then have a randomized 0 to 360 offset on each sample to see what different arcs of the color wheel would look like when selected.&lt;/p&gt;

&lt;p&gt;It’s also worth noting that I wound up developing the code and visualization concurrently. Being able to see the results of a particular approach not only helped tune the parameters and flush out bugs, but it help me figure out where the approach was falling down aesthetically and led to adding ideas like a minimum color distance and constrained randomization of saturation and lightness.&lt;/p&gt;

&lt;p&gt;Another fun bonus to this approach: I could send the link to the page to other people with better artistic eyes than myself and get them to tool around with it and come up with good parameters. You can &lt;a href=&quot;http://littleandoften.club/color_tests?utf8=%E2%9C%93&amp;amp;palette%5Bfirst_angle%5D=0&amp;amp;palette%5Bfirst_range%5D=90&amp;amp;palette%5Bsecond_angle%5D=210&amp;amp;palette%5Bsecond_range%5D=30&amp;amp;palette%5Bthird_angle%5D=&amp;amp;palette%5Bthird_range%5D=&amp;amp;palette%5Blightness_jitter%5D=20&amp;amp;palette%5Bsaturation_jitter%5D=10&amp;amp;palette%5Binitial_lightness%5D=55&amp;amp;palette%5Binitial_saturation%5D=45&amp;amp;palette%5Bminimum_color_distance%5D=15&amp;amp;commit=Save+Palette&quot;&gt;try it for yourself here&lt;/a&gt;!&lt;/p&gt;

  &lt;p&gt;&lt;a href=&quot;/articles/2018/02/04/generating-randomized-color-palettes/&quot;&gt;Generating Randomized Color Palettes (That Aren’t Clown Vomit)&lt;/a&gt; was originally published by Thomas Mayfield at &lt;a href=&quot;&quot;&gt;Duct Tape and Turing Machines&lt;/a&gt; on February 04, 2018.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[Vim syntax highlighting for SQL strings inside Ruby code]]></title>
  <link rel="alternate" type="text/html" href="/articles/2018/01/01/vim-syntax-highlighting-for-sql-strings-inside-ruby-code/" />
  <id>/articles/2018/01/01/vim-syntax-highlighting-for-sql-strings-inside-ruby-code</id>
  <published>2018-01-01T00:00:00-05:00</published>
  <updated>2018-01-01T00:00:00-05:00</updated>
  <author>
    <name>Thomas Mayfield</name>
    <uri></uri>
    <email>Thomas.Mayfield@gmail.com</email>
  </author>
  <content type="html">&lt;p&gt;Working in Rails, it’s not uncommon to have database queries that are better off expressed without using ActiveRecord. This usually means stuffing the SQL query itself into a string, and then running it against the database using &lt;code class=&quot;highlighter-rouge&quot;&gt;ActiveRecord::Base.connection.execute&lt;/code&gt;. Unfortunately, these queries tend to be on the large and complex side, so having a big blob of un-highlighted SQL in the middle of your Ruby code isn’t the nicest thing.&lt;/p&gt;

&lt;p&gt;However, there’s a loose convention on many Rails projects to denote such queries as &lt;a href=&quot;[https://infinum.co/the-capsized-eight/multiline-strings-ruby-2-3-0-the-squiggly-heredoc&quot;&gt;heredoc&lt;/a&gt; strings starting with &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;&amp;lt;~SQL&lt;/code&gt;. I wanted to see if I could set up Vim to highlight that kind of heredoc in Ruby as SQL instead of a string. Turns out it’s possible!&lt;/p&gt;

&lt;h2 id=&quot;tldr&quot;&gt;TL;DR&lt;/h2&gt;
&lt;p&gt;Put the following in &lt;code class=&quot;highlighter-rouge&quot;&gt;~/.vim/after/syntax/ruby.vim&lt;/code&gt;&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-vim&quot; data-lang=&quot;vim&quot;&gt;unlet &lt;span class=&quot;nv&quot;&gt;b:current_syntax&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;syn&lt;/span&gt; include @SQL syntax/sql&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;vim&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;syn&lt;/span&gt; region sqlHeredoc &lt;span class=&quot;k&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/\v\&amp;lt;\&amp;lt;[-~]SQL/&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/\vSQL/&lt;/span&gt; keepend contains&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;@SQL
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;b:current_syntax&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;ruby&quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Before:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/ruby-sql-before.png&quot; alt=&quot;Without syntax highlighting&quot; /&gt;&lt;/p&gt;

&lt;p&gt;After:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/ruby-sql-after.png&quot; alt=&quot;With syntax highlighting&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;explanation&quot;&gt;Explanation&lt;/h2&gt;
&lt;p&gt;We’re using the vim &lt;a href=&quot;http://learnvimscriptthehardway.stevelosh.com/chapters/42.html#vimafter&quot;&gt;after directory&lt;/a&gt; to run some extra syntax highlight rules for Ruby after the regular &lt;code class=&quot;highlighter-rouge&quot;&gt;syntax/ruby.vim&lt;/code&gt; rules have been run. We load up the sql syntax rules into a syntax group called &lt;code class=&quot;highlighter-rouge&quot;&gt;@SQL&lt;/code&gt;, then tell Vim that any region starting with a SQL heredoc string and ending with the terminating “SQL” should be highlighed by those imported syntax rules. Not bad for a couple of lines.&lt;/p&gt;

&lt;p&gt;So what’s with the &lt;code class=&quot;highlighter-rouge&quot;&gt;unlet&lt;/code&gt; / &lt;code class=&quot;highlighter-rouge&quot;&gt;let&lt;/code&gt; business? Turns out that most Vimscript syntax files have a guard clause at the top that will bail out if &lt;code class=&quot;highlighter-rouge&quot;&gt;b:current_syntax&lt;/code&gt; is already set (&lt;a href=&quot;https://github.com/vim-ruby/vim-ruby/blob/master/syntax/ruby.vim#L13-L15&quot;&gt;here’s the one&lt;/a&gt; from ruby.vim). I think this is to prevent double-sourcing of the files, but I’m not 100% sure. The practical effect here is that since the sql syntax file also contains such a guard, we needed to make sure that variable was unset so that we could properly execute that file for import here. I believe that’s what going on here, anyway—this is the point where I bailed out of digging further down the rabbithole.&lt;/p&gt;

&lt;h2 id=&quot;resources-i-found-handy-while-figuring-this-out&quot;&gt;Resources I found handy while figuring this out&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://vim.wikia.com/wiki/Different_syntax_highlighting_within_regions_of_a_file&quot;&gt;This article on the VimTips wiki&lt;/a&gt; gave me the initial idea for how this should work.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://learnvimscriptthehardway.stevelosh.com/chapters/45.html&quot;&gt;Learn Vimscript The Hard Way&lt;/a&gt; has a couple great intro chapters on how Vim’s syntax highlighting works.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://vimdoc.sourceforge.net/htmldoc/syntax.html&quot;&gt;Vim syntax documentation&lt;/a&gt; is the comprehensive (if dense) manual on the Vim syntax highlighting commands.&lt;/li&gt;
&lt;/ul&gt;

  &lt;p&gt;&lt;a href=&quot;/articles/2018/01/01/vim-syntax-highlighting-for-sql-strings-inside-ruby-code/&quot;&gt;Vim syntax highlighting for SQL strings inside Ruby code&lt;/a&gt; was originally published by Thomas Mayfield at &lt;a href=&quot;&quot;&gt;Duct Tape and Turing Machines&lt;/a&gt; on January 01, 2018.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[2017 Year End Notes]]></title>
  <link rel="alternate" type="text/html" href="/articles/2017/12/30/2017-year-end-notes/" />
  <id>/articles/2017/12/30/2017-year-end-notes</id>
  <published>2017-12-30T00:00:00-05:00</published>
  <updated>2017-12-30T00:00:00-05:00</updated>
  <author>
    <name>Thomas Mayfield</name>
    <uri></uri>
    <email>Thomas.Mayfield@gmail.com</email>
  </author>
  <content type="html">&lt;p&gt;Another year, another time for personal reflection and course adjustments.&lt;/p&gt;

&lt;h2 id=&quot;reading&quot;&gt;Reading&lt;/h2&gt;
&lt;p&gt;I noted last year that I’d read mostly books by men (women made up only 23% of my 2016 reading list), and wanted to change that. This year, I did! 25 of the 50 books I read were by women.&lt;/p&gt;

&lt;p&gt;Rough breakdown by genre:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Fantasy: 23 books&lt;/li&gt;
  &lt;li&gt;Other Non-Fiction: 12 books&lt;/li&gt;
  &lt;li&gt;Science Fiction: 7 books&lt;/li&gt;
  &lt;li&gt;Technical	 / Career: 4 books&lt;/li&gt;
  &lt;li&gt;Fitness: 4 books&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Notable books from 2017:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://www.amazon.com/Mistakes-Were-Made-But-Not-ebook/dp/B003K15IOE/&quot;&gt;Mistakes Were Made (But Not by Me)&lt;/a&gt;: A book about self-justification, cognitive dissonance, and how memory works. This had more impact on how I think about human behavior than anything else I’ve read in the last few years.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://www.amazon.com/Weapons-Math-Destruction-Increases-Inequality-ebook/dp/B019B6VCLO&quot;&gt;Weapons of Math Destruction&lt;/a&gt;: A good, nuanced critique of how big data techniques can contribute to social ills. Far from a “big data BAD!” screed, the author lays out a thoughtful set of criteria that we can use to evaluate the impact of individual algorithms and approaches.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://www.amazon.com/Managers-Path-Leaders-Navigating-Growth-ebook/dp/B06XP3GJ7F/&quot;&gt;The Manager’s Path&lt;/a&gt;: An excellent book on tech leadership, and one that I hope individual contributors will read at least the first few chapters of as well.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://www.amazon.com/Infomocracy-Book-One-Centenal-Cycle-ebook/dp/B0151U75ME/&quot;&gt;Infomocracy&lt;/a&gt;: If William Gibson wrote near-future fiction about governments and elections, it might look something like this.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://www.amazon.com/Wheel-Time-14-Book/dp/B00VZIF6VO&quot;&gt;The Wheel of Time&lt;/a&gt; and &lt;a href=&quot;https://www.amazon.com/Dresden-Files-15-books/dp/B00O3HD47C/&quot;&gt;The Dresden Files&lt;/a&gt;: While I’m not normally a big re-reader, this year was a year for revisiting some old favorites.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I’m generally happy with where my reading habits are right now, but I think next year it might be a good idea to start paying more attention to how many books I’m reading by people of color and publicly LGBTQ+ authors.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Updated 2017-12-31: wound up finishing two more books on New Year’s Eve!&lt;/em&gt;&lt;/p&gt;

&lt;h2 id=&quot;fitness&quot;&gt;Fitness&lt;/h2&gt;
&lt;p&gt;Spending the last year focusing on getting healthy and hypertrophy paid off. I didn’t get hurt again, and definitely got bigger: went from 182lbs to 202lbs from March to December, with relatively mild fat gains. I’ll be cutting that down starting post-vacation in January, aiming to get down to 190lbs or so before I start another muscle gain phase.&lt;/p&gt;

&lt;p&gt;I only did 1RM testing once this year (in mid-July, I think) but I got back to my pre-injury strength levels, with a small deadlift PR. Not bad, considering strength was a secondary focus.&lt;/p&gt;

&lt;p&gt;Good things from 2017 I want to continue doing:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;em&gt;Safety Squat Bar&lt;/em&gt;: I got a &lt;a href=&quot;https://www.roguefitness.com/sb-1-rogue-safety-squat-bar&quot;&gt;safety squat bar&lt;/a&gt; for the home gym when both my wife and I had upper body injuries, and I wound up squatting with it exclusively for about six months. Even though I’m back to regular back squats as a main lift, I’ll still be using the SSB for accessory and supplemental lifts for the foreseeable future. Great purchase.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;em&gt;Meal prep + calorie macro tracking&lt;/em&gt;: A flexible diet framework that still seems to work super well for me on both the physical results and mental health fronts.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;em&gt;Giant sets (for accessory work)&lt;/em&gt;: Giant sets are stringing together 3 or more lifts in sequence, without a pause. They’re A+ for time and mild conditioning. I tried to doing them for a while with my main lifts, and got a few minor tweaks that I think were warning shots. I’ll keep doing giant sets but just for isolation-y accessories and not with the main lifts of the day.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;em&gt;Biking and walking for LISS&lt;/em&gt;: I feel like I have to re-learn this one every year: HIIT is fun and time-efficient, but the recovery tax is too high for what they get me. I /mostly/ stuck to biking and hiking for cardio this year, and it improved my work capacity and got me outside, without beating me all to hell.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I have one simple goal for next year: commit to running &lt;a href=&quot;https://www.strongerbyscience.com/training-toolkit/&quot;&gt;Average to Savage&lt;/a&gt; for the whole year. I program-hopped for the last half of the year too much, and it impacted my strength progress. I know AtS works for my goals, and I should stick to just periodically adjusting accessory work if I need variation.&lt;/p&gt;

&lt;h2 id=&quot;time-and-attention&quot;&gt;Time and Attention&lt;/h2&gt;
&lt;p&gt;Even considering the psychological and emotional weight of the country turning into a flaming dumpster full of garbage fires, I’m still unhappy with the job I did spending my time and attention deliberately in 2017.&lt;/p&gt;

&lt;p&gt;That’s reflected in this being the only post I’ve written in this whole year, the lowest number since I started it in 2011.&lt;/p&gt;

&lt;p&gt;Last year, I said:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;So 2017 will probably see less learning of new tools and more general studying of topics I lack depth in. I’m planning to start with working through The Elements of Computing Systems and we’ll see how it goes from there.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I did approximately jack shit towards that goal, or really anything related to it. I struggled to even read books about things I wanted to learn, about computers or &lt;em&gt;anything&lt;/em&gt;, much less actually building anything. I’ve been underestimating how much of a rut I’ve fallen into here, and I’m really not ok with it. Something’s got to give.&lt;/p&gt;

&lt;p&gt;I’ve tried a lot of things to change my habits here and almost all of it has failed. In the past, I’ve focused on trying to suppress distractions, doing stuff like setting up &lt;a href=&quot;http://thegreata.pe/defusing-distracting-defaults&quot;&gt;automated content-blocking&lt;/a&gt;. I think perhaps I haven’t given enough attention to the flip side: filling up that distraction free time with challenging things I want to do. I’m trying some techniques that I’m hopeful will help (chiefly, &lt;a href=&quot;http://calnewport.com/blog/2013/12/21/deep-habits-the-importance-of-planning-every-minute-of-your-work-day/&quot;&gt;variations on time blocking&lt;/a&gt;), but I feel like I need a more concrete goal that’ll give me a hard push in the right direction.&lt;/p&gt;

&lt;p&gt;So: &lt;em&gt;in 2018, I’m going to try averaging one post a week here about something I’m learning, practicing or building&lt;/em&gt;. These can be about any subject, and any length. I’m expecting this to be tough. I think trying for a rough weekly cadence is a good start, though I expect there will be some variation. I’m also giving myself a pass for any week where I’m on vacation, which might be a good incentive to take more of it!&lt;/p&gt;

&lt;h2 id=&quot;onwards&quot;&gt;Onwards&lt;/h2&gt;
&lt;p&gt;Ok, 2018. Let’s do this.&lt;/p&gt;

  &lt;p&gt;&lt;a href=&quot;/articles/2017/12/30/2017-year-end-notes/&quot;&gt;2017 Year End Notes&lt;/a&gt; was originally published by Thomas Mayfield at &lt;a href=&quot;&quot;&gt;Duct Tape and Turing Machines&lt;/a&gt; on December 30, 2017.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[2016 Year End Notes]]></title>
  <link rel="alternate" type="text/html" href="/articles/2016/12/31/2016-year-end-notes/" />
  <id>/articles/2016/12/31/2016-year-end-notes</id>
  <published>2016-12-31T00:00:00-05:00</published>
  <updated>2016-12-31T00:00:00-05:00</updated>
  <author>
    <name>Thomas Mayfield</name>
    <uri></uri>
    <email>Thomas.Mayfield@gmail.com</email>
  </author>
  <content type="html">&lt;p&gt;I almost didn’t write this. After this year’s US election and the steady global rise of nationalism, well, my usual inward-looking year end review feels a bit trite. But this is the stuff that helps keep me functional and able to take any action at all, so. Here we go.&lt;/p&gt;

&lt;p&gt;I am going to try and set looser goals for next year—more of a direction than specifics. I hope that’ll help me adapt to changes more easily, maybe it’ll just make me lazy. We’ll see.&lt;/p&gt;

&lt;h2 id=&quot;reading&quot;&gt;Reading&lt;/h2&gt;

&lt;p&gt;I read 51 books this year. Hey, I did hit at least one of my &lt;a href=&quot;http://thegreata.pe/2015-year-end-notes&quot;&gt;goals from last year&lt;/a&gt;! Broken down by genre:&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;Genre / Subject&lt;/th&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;Count&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Fantasy&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;28&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Science Fiction&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;9&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Technical&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;5&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Other Non-Fiction&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;5&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Fitness&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;4&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;I’ve joked before that you could plot my chronic stress levels over time by looking at the split of fiction and non-fiction I read. This year, reading mostly fantasy tells the same story: election and post-election stress combined with probably not taking enough vacation tipped me towards reading things that gave my brain a break and good story, instead of challenging it. I’d like to push the ratio a more towards things that make me grow next year, but I don’t regret this year’s choices that helped me not be a rolling emotional breakdown.&lt;/p&gt;

&lt;p&gt;One thing I do regret: I only read 12 books by women, actually doing worse gender ratio-wise than last year. Deciding to start an epic re-read of the Dresden Files after the election accounts for some of the skew here, but not all. I can and should do better next year.&lt;/p&gt;

&lt;p&gt;On a better note, while I’m historically bad at not finishing books even when I’m really disliking them, this year I put down four whole books before the end. That’s almost more than I managed to stop reading in the previous three years combined!&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Favorite Books This Year&lt;/em&gt;:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://www.bookbub.com/books/the-fifth-season-by-n-k-jemisin&quot;&gt;The Fifth Season&lt;/a&gt; / &lt;a href=&quot;https://www.bookbub.com/books/the-obelisk-gate-by-n-k-jemisin&quot;&gt;The Obelisk Gate&lt;/a&gt; by N. K. Jemisin — Absolutely the most powerful works of fiction I read this year. Heartbreaking and mindblowing with great characters, an amazingly realized world, unflinching exploration of empire and oppression, all with brilliantly technically executed storytelling. I can’t wait for The Stone Sky next year.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://www.bookbub.com/books/too-like-the-lightning-by-ada-palmer&quot;&gt;Too Like The Lightning&lt;/a&gt; by Ada Palmer — A wonderful book that I still struggle to &lt;em&gt;describe&lt;/em&gt; well. “Far-future genderqueer Enlightenmentpunk sci-fi” is the closest I can get to an elevator pitch.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://www.bookbub.com/books/children-of-time-by-adrian-tchaikovsky&quot;&gt;Children of Time&lt;/a&gt; by Adrian Tchaikovsky — A great Big Idea sci-fi novel told across the deep time of near-lightspeed travel and the rise and fall of civilizations. Recommended for fans of Vernor Vinge and Charles Stross; NOT recommended for the arachnophobic.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://www.bookbub.com/books/babylon-s-ashes-by-james-s-a-corey&quot;&gt;Babylon’s Ashes&lt;/a&gt; by James S.A. Corey — I truly love when a series I like keeps gets better over time, and The Expanse’s latest entry certainly qualifies. Smart, human-driven space opera.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://www.bookbub.com/books/deep-work-by-cal-newport&quot;&gt;Deep Work&lt;/a&gt; by Cal Newport — A book on the economic and life-statisfaction benefits of developing the ability to deeply focus on hard work for long periods of time. I feel like I’ve been both turning this one over in my head and failing to heed its advice since I read it this January.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Not sure yet whether I won’t set a numeric goal at all for next year or just set a lower one. Either way, I want nudge my brain away from finishing a meh book to hit an arbitrary number and more towards spending time on challenging reads that’ll take longer to digest and work through.&lt;/p&gt;

&lt;h2 id=&quot;fitness&quot;&gt;Fitness&lt;/h2&gt;

&lt;p&gt;A very mixed bag this year.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;First, the bad:&lt;/em&gt; My goal to hit a 1000-pound squat / bench / deadlift total got derailed by injuries in October. I managed to both develop golfer’s elbow and strain an adductor within a week of each other, which sidelined me from training entirely for about a month and a half. Both injuries are slowly improving and I’m back to doing a limited set of movements with low weight and high reps. These were my first serious injuries in about four years of lifting, and not being able to exercise hard around the most of stressful time of the year was not good.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;But, the good:&lt;/em&gt; I think this was the year I figured out how to make nutition work for me. Picking a macro split that’d fuel my training well and tracking what I ate daily via MyFitnessPal actually produced results: I was able to control my weight as I wanted and had much more consistent energy levels. The key is that I’m fine cooking 95% percent of what I eat, and doing so mostly in advance. My wife and I were already in the habit of pre-making dinner ingredients for the week on Sundays (a strategy we picked up from the wonderful Well Fed cookbook series), so our habit changes weren’t huge: just expanding our cookup sessions to include lunches as well. The great thing for me about an &lt;a href=&quot;http://rippedbody.com/clean-eating-vs-iifym-scam/&quot;&gt;IIFYM style of eating&lt;/a&gt; is there’s no food that’s entirely off the table, which is just wonderful psychologically. A slice of pizza or a few drinks out are harder to accurately estimate calorie-wise, so I try to make those a minority of what I consume. But when I do eat them, I just track them with my best guess and keep an eye on the scale to make sure I’m not over or under-estimating my intake.&lt;/p&gt;

&lt;p&gt;Using those strategies, I did my first real cut / bulk cycle, dropping down to about ~14% bodyfat before starting a slow bulk back up. Only downside is that I managed to get hurt right at the peak of said bulk, so I’m carrying a little more body fat than I’d prefer until my weights are back to challenging enough that another cut won’t drop muscle along with fat. So it goes; it bothers me a lot less since I know I’ve got perfectly workable strategies for getting back to where I want to be once I can train harder again.&lt;/p&gt;

&lt;p&gt;Also, I &lt;em&gt;did&lt;/em&gt; get stronger this year. I’d last tested each of the powerlifts in August, winding up with a 425 deadlift, 320 squat and 230 bench, all at a lighter bodyweight than I started the year with. I suspect I’d improved beyond those later, but since I got hurt before I tested again, who knows?&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Lessons for 2017:&lt;/em&gt; I’m really happy with my nutritional strategy; I noted that even when I’d go through periods of not tracking as stringently, the habits I’d developed kept things from going way off the rails. That’s the hallmark of something sustainable, so small adjustments aside, I think batch cooking and calorie/macro tracking are here to stay.&lt;/p&gt;

&lt;p&gt;As far as lifting, getting injured and having to take time off has gotten me to step back a bit and think about what I want out of lifting and how it squares with how I’ve been training. Generally, I want to: feel good, look good, and be strong, in that order. I trained most of last year using programming tailored towards powerlifters; that is, programming designed to specifically increase your one-rep max in the competition lifts: squat, bench, and deadlift. This wasn’t totally unreasonable: performance in those lifts correlates strongly with all of my stated goals, which is why I’d set the 1000-pound total goal in the first place. But I’m not a powerlifter and have no desire to ever actually enter a competition, so while I &lt;em&gt;can&lt;/em&gt; use powerlifting programs to work towards my goals, they might not be the optimal set of risk/reward tradeoffs for them.&lt;/p&gt;

&lt;p&gt;What I’m thinking will be inspiring my training next year:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;http://danjohn.net/&quot;&gt;Dan John&lt;/a&gt; is always right. Focus on the fundamental human movements under load: squat, hinge, push, pull, loaded carry. Emphasize hypertrophy and joint mobility. Spend most of the year doing park bench workouts, not bus bench workouts (seriously, go read &lt;a href=&quot;https://www.amazon.com/Intervention-Course-Corrections-Athlete-Trainer-ebook/dp/B00ABNEN3G/&quot;&gt;Intervention&lt;/a&gt;).&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;http://strengtheory.com/&quot;&gt;Greg Nuckols&lt;/a&gt; agrees that even competitive lifters &lt;a href=&quot;http://strengtheory.com/complete-strength-training-guide/#Implementation&quot;&gt;should get most of their lifting volume from bodybuilding-style hypertrophy training&lt;/a&gt;, because hypertrophy is one of the main predictors of absolute strength (that’s under our control, anyway) and it is a &lt;a href=&quot;https://www.strengthandconditioningresearch.com/2014/07/08/injury-strength-sports/&quot;&gt;remarkably low injury risk style of training&lt;/a&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;I’ve found I really hate it when workouts take over an hour, so I’m going to try to add a lot more circuits/supersetting for my accessory work. Probably will take some ideas from &lt;a href=&quot;https://www.youtube.com/channel/UC8Rt7E2JVz4fPmC8AhjDoaA&quot;&gt;Brian Alsruhe&lt;/a&gt; and &lt;a href=&quot;http://rosstraining.com/&quot;&gt;Ross Enamait&lt;/a&gt; here.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;programming&quot;&gt;Programming&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;Personal:&lt;/em&gt; I didn’t do a great deal of programming in my spare time this year, outside of:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;a toy Clojurescript app&lt;/li&gt;
  &lt;li&gt;some upkeep on Literate Minuteman / lyeberry&lt;/li&gt;
  &lt;li&gt;several fizzled attempts at a lifting tracker&lt;/li&gt;
  &lt;li&gt;a deeper dive into Vimscript&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I think there’s two things going on, neither of which is really a bad thing.&lt;/p&gt;

&lt;p&gt;One, I simply had a challenging year at work (in a good way). Spending most of the day, five days a week pushing my brain and abilities on one thing means I’m not going to have as many cycles for the same thing in my personal time. This is fine and normal.&lt;/p&gt;

&lt;p&gt;Two, for the last decade or so, my model of learning new things tech-wise is to go sideways: I seek out a new spin on something I already know a bit about. This usually manifests itself as learning a new language or framework: a new way to do frontend development, a new high-level concurrency model, a new way to interact with a relational database, and so on. This year, that started to feel a bit flat. It took me a while to realize that I’m feeling a lot more interested in going deep in areas where my knowledge is scattered and ad-hoc: learning about the internals of stuff like operating systems and networking. So 2017 will probably see less learning of new tools and more general studying of topics I lack depth in. I’m planning to start with working through &lt;a href=&quot;https://mitpress.mit.edu/books/elements-computing-systems&quot;&gt;The Elements of Computing Systems
&lt;/a&gt; and we’ll see how it goes from there.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Professional&lt;/em&gt;: I can add Clojure to the list of technologies I’m allowed to complain about, because my team shipped our first production Clojure app this year. Some jumbled thoughts:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Clojure turned out to be a great choice for what we used it for: an API service that had concurrency needs beyond what you could easily do in Ruby (our default language at work). But I’m not sure I want to use it yet for the kind of everyday web development where I’d normally default to Rails. Particularly, I want something more ORM-y for database access than the Clojure community likes (&lt;a href=&quot;http://sqlkorma.com/&quot;&gt;Korma&lt;/a&gt; seems closest) and a better story for full-stack, real-browser web testing (a la Poltergeist/Capybara).&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;If we were using ClojureScript, that’d probably change the calculus a bit, though the JS community seems to be absorbing a lot of the good ideas that ClojureScript trailblazed (immutable global state atoms, live-reloading workflows).&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;core.async is a beautiful way to model concurrency and communication between different parts of a program. It absolutely is in need of a deeper, complete writeup on how to use it, however; the &lt;a href=&quot;http://www.braveclojure.com/core-async/&quot;&gt;CFTBAT chapter on core.async&lt;/a&gt; is great, but you also need to read the entire API docs to really get how to use it.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;I still miss having a debugger.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;The error messages and stacktraces are still way harder to read than they should be. It’s great to see communities like Elixir and Elm making this a priority and it makes me sad that the Cognitect crew don’t seem to feel any urgency about this.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;thats-all-folks&quot;&gt;That’s All, Folks!&lt;/h2&gt;

&lt;p&gt;Let’s whoop 2017’s ass.&lt;/p&gt;

  &lt;p&gt;&lt;a href=&quot;/articles/2016/12/31/2016-year-end-notes/&quot;&gt;2016 Year End Notes&lt;/a&gt; was originally published by Thomas Mayfield at &lt;a href=&quot;&quot;&gt;Duct Tape and Turing Machines&lt;/a&gt; on December 31, 2016.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[Notes On Writing Clojure In Vim]]></title>
  <link rel="alternate" type="text/html" href="/articles/2016/11/25/notes-on-writing-clojure-in-vim/" />
  <id>/articles/2016/11/25/notes-on-writing-clojure-in-vim</id>
  <published>2016-11-25T00:00:00-05:00</published>
  <updated>2016-11-25T00:00:00-05:00</updated>
  <author>
    <name>Thomas Mayfield</name>
    <uri></uri>
    <email>Thomas.Mayfield@gmail.com</email>
  </author>
  <content type="html">&lt;p&gt;There a lot of things I like about Clojure as a language, but it requires a lot of tooling setup to not have a bad time. There’s a big chunk of the Clojure community that uses Emacs and the admittedly fantastic &lt;a href=&quot;https://github.com/clojure-emacs/cider&quot;&gt;CIDER&lt;/a&gt; environment, but Vim salwarts who don’t want to ditch years of editor customization aren’t left out in the cold. It took a little more digging and research, but I managed to put together a Vim/Clojure setup with the fast feedback loop that’s so important to productive Clojure dev.&lt;/p&gt;

&lt;p&gt;What follows is annotated bits from my .vimrc - you can see the (&lt;a href=&quot;https://github.com/thegreatape/dot-files/blob/master/vimrc&quot;&gt;full source here&lt;/a&gt;). I’m using &lt;a href=&quot;https://github.com/VundleVim/Vundle.vim&quot;&gt;Vundle&lt;/a&gt; to manage my plugins.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-vim&quot; data-lang=&quot;vim&quot;&gt;Plugin &lt;span class=&quot;s1&quot;&gt;'tpope/vim-classpath'&lt;/span&gt;
Plugin &lt;span class=&quot;s1&quot;&gt;'tpope/vim-fireplace.git'&lt;/span&gt;
Plugin &lt;span class=&quot;s1&quot;&gt;'guns/vim-clojure-static.git'&lt;/span&gt;

autocmd Filetype clojure nmap &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;buffer&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; gf &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;Plug&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;FireplaceDjump&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;These plugins are the bare minimum you need to get going. They’ll give you syntax highlighting, indentation and a bunch of useful IDE-like tools. To get the most out of these, you’ll want to start a repl session in another window or tab; fireplace will automatically connect to it if present. The shortcuts I use the most:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;K&lt;/code&gt; - show docs for the function under the cursor.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;gf&lt;/code&gt; - go to source for symbol under the cursor. great for zipping around your project or diving down into a libraries source. (remapped above as &lt;code class=&quot;highlighter-rouge&quot;&gt;gf&lt;/code&gt;, it’s &lt;code class=&quot;highlighter-rouge&quot;&gt;[C-d&lt;/code&gt; by default)&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;cpr&lt;/code&gt; - evals the current buffer into the connected repl; if in a clojure.test buffer, runs the tests and prints any failures to the quickfix buffer.&lt;/li&gt;
&lt;/ul&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-vim&quot; data-lang=&quot;vim&quot;&gt;Plugin &lt;span class=&quot;s1&quot;&gt;'guns/vim-sexp'&lt;/span&gt;
Plugin &lt;span class=&quot;s1&quot;&gt;'tpope/vim-sexp-mappings-for-regular-people'&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;I think structural editing of s-expressions is one of the underrated perks of working in a lisp. You can a long ways with Vim’s built-in text objects (like &lt;code class=&quot;highlighter-rouge&quot;&gt;ci(&lt;/code&gt; for change-inside-parenthesis), but these plugins let you do more advanced stuff like pushing symbols in and out of s-expresions and smartly moving expression boundaries.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-vim&quot; data-lang=&quot;vim&quot;&gt;Plugin &lt;span class=&quot;s1&quot;&gt;'guns/vim-slamhound'&lt;/span&gt;

autocmd Filetype clojure nnoremap &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;buffer&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;leader&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;sh&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;Slamhound&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;cr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/technomancy/slamhound&quot;&gt;Slamhound&lt;/a&gt; is an editor agnostic tool for managing Clojure namespaces’ require statements—run it on a file and it’ll remove unused imports and add requires for un-imported symbols. I bound it to &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;leader&amp;gt;sh&lt;/code&gt;.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-vim&quot; data-lang=&quot;vim&quot;&gt;Plugin &lt;span class=&quot;s1&quot;&gt;'dgrnbrg/vim-redl'&lt;/span&gt;
autocmd Filetype clojure imap &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;buffer&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;Up&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;Plug&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;clj_repl_uphist&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;
autocmd Filetype clojure imap &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;buffer&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;Down&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;Plug&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;clj_repl_downhist&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The Clojure community seems a little hostile to breakpoint debuggers for some reason, but I find them really useful. vim-redl gives you two useful things: a pretty good in-Vim repl (start one in the current file’s namespace with &lt;code class=&quot;highlighter-rouge&quot;&gt;:ReplHere&lt;/code&gt;) and actual, factual breakpoint debugging. See the project’s README for the setup, but once included in your lein profile, you can use &lt;code class=&quot;highlighter-rouge&quot;&gt;redl.core/break&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;redl.core/continue&lt;/code&gt; to debug functions run within Vim’s repl session. I rebound &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;Up&amp;gt;&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;Down&amp;gt;&lt;/code&gt; in insert mode to page through the command history.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-vim&quot; data-lang=&quot;vim&quot;&gt;Plugin &lt;span class=&quot;s1&quot;&gt;'kien/rainbow_parentheses.vim'&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;g:rbpt_colorpairs&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
&lt;span class=&quot;se&quot;&gt;  \&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'blue'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;        &lt;span class=&quot;s1&quot;&gt;'#FF6000'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
&lt;span class=&quot;se&quot;&gt;  \&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'cyan'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;        &lt;span class=&quot;s1&quot;&gt;'#00FFFF'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
&lt;span class=&quot;se&quot;&gt;  \&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'darkgreen'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;   &lt;span class=&quot;s1&quot;&gt;'#00FF00'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
&lt;span class=&quot;se&quot;&gt;  \&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'LightYellow'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'#c0c0c0'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
&lt;span class=&quot;se&quot;&gt;  \&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'blue'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;        &lt;span class=&quot;s1&quot;&gt;'#FF6000'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
&lt;span class=&quot;se&quot;&gt;  \&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'cyan'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;        &lt;span class=&quot;s1&quot;&gt;'#00FFFF'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
&lt;span class=&quot;se&quot;&gt;  \&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'darkgreen'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;   &lt;span class=&quot;s1&quot;&gt;'#00FF00'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
&lt;span class=&quot;se&quot;&gt;  \&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'LightYellow'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'#c0c0c0'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
&lt;span class=&quot;se&quot;&gt;  \&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'blue'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;        &lt;span class=&quot;s1&quot;&gt;'#FF6000'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
&lt;span class=&quot;se&quot;&gt;  \&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'cyan'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;        &lt;span class=&quot;s1&quot;&gt;'#00FFFF'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
&lt;span class=&quot;se&quot;&gt;  \&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'darkgreen'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;   &lt;span class=&quot;s1&quot;&gt;'#00FF00'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
&lt;span class=&quot;se&quot;&gt;  \&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'LightYellow'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'#c0c0c0'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
&lt;span class=&quot;se&quot;&gt;  \&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'blue'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;        &lt;span class=&quot;s1&quot;&gt;'#FF6000'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
&lt;span class=&quot;se&quot;&gt;  \&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'cyan'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;        &lt;span class=&quot;s1&quot;&gt;'#00FFFF'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
&lt;span class=&quot;se&quot;&gt;  \&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'darkgreen'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;   &lt;span class=&quot;s1&quot;&gt;'#00FF00'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
&lt;span class=&quot;se&quot;&gt;  \&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'LightYellow'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'#c0c0c0'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
&lt;span class=&quot;se&quot;&gt;  \&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;g:rbpt_max&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;16&lt;/span&gt;

autocmd &lt;span class=&quot;nb&quot;&gt;BufEnter&lt;/span&gt; *&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;cljs&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;*&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;clj&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;*&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;cljs&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;hl RainbowParenthesesActivate
autocmd &lt;span class=&quot;nb&quot;&gt;BufEnter&lt;/span&gt; *&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;cljs&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;*&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;clj&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;*&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;cljs&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;hl RainbowParenthesesLoadRound
autocmd &lt;span class=&quot;nb&quot;&gt;BufEnter&lt;/span&gt; *&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;cljs&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;*&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;clj&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;*&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;cljs&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;hl RainbowParenthesesLoadSquare
autocmd &lt;span class=&quot;nb&quot;&gt;BufEnter&lt;/span&gt; *&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;cljs&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;*&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;clj&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;*&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;cljs&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;hl RainbowParenthesesLoadBraces&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Rainbow parentheses give you different colored parens by depth of nesting, which is a nice way to eyeball when you’ve got inbalanced s-expressions. The default colors didn’t play great with my color scheme (&lt;a href=&quot;https://github.com/nanotech/jellybeans.vim&quot;&gt;jellybeans&lt;/a&gt;), so I customized the colors a bit here.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-vim&quot; data-lang=&quot;vim&quot;&gt;&lt;span class=&quot;k&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;!&lt;/span&gt; IsFireplaceConnected&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; has_key&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;fireplace#platform&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'connection'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;sr&quot;&gt;/Fireplace: :Connect to a REPL or install classpath.vim/&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt; &quot; false
  &lt;span class=&quot;k&quot;&gt;endtry&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;endfunction&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;!&lt;/span&gt; NreplStatusLine&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; IsFireplaceConnected&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'nREPL Connected'&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'No nREPL Connection'&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;endif&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;endfunction&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;!&lt;/span&gt; SetBasicStatusLine&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;set&lt;/span&gt; statusline&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;%&lt;span class=&quot;k&quot;&gt;f&lt;/span&gt;   &quot; path &lt;span class=&quot;k&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;file&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;set&lt;/span&gt; statusline&lt;span class=&quot;p&quot;&gt;+=&lt;/span&gt;\   &quot; separator
  &lt;span class=&quot;k&quot;&gt;set&lt;/span&gt; statusline&lt;span class=&quot;p&quot;&gt;+=&lt;/span&gt;%&lt;span class=&quot;k&quot;&gt;m&lt;/span&gt;  &quot; modified flag
  &lt;span class=&quot;k&quot;&gt;set&lt;/span&gt; statusline&lt;span class=&quot;p&quot;&gt;+=&lt;/span&gt;%&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;  &quot; switch &lt;span class=&quot;k&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;right&lt;/span&gt; side
  &lt;span class=&quot;k&quot;&gt;set&lt;/span&gt; statusline&lt;span class=&quot;p&quot;&gt;+=&lt;/span&gt;%&lt;span class=&quot;k&quot;&gt;y&lt;/span&gt;  &quot; &lt;span class=&quot;k&quot;&gt;filetype&lt;/span&gt; of &lt;span class=&quot;k&quot;&gt;file&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;endfunction&lt;/span&gt;

autocmd Filetype clojure &lt;span class=&quot;k&quot;&gt;call&lt;/span&gt; SetBasicStatusLine&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
autocmd Filetype clojure &lt;span class=&quot;k&quot;&gt;set&lt;/span&gt; statusline&lt;span class=&quot;p&quot;&gt;+=&lt;/span&gt;\ &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;%&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;NreplStatusLine&lt;span class=&quot;p&quot;&gt;()}]&lt;/span&gt;  &quot; REPL connection status
autocmd &lt;span class=&quot;nb&quot;&gt;BufLeave&lt;/span&gt; *&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;cljs&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;*&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;clj&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;*&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;cljs&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;hl  &lt;span class=&quot;k&quot;&gt;call&lt;/span&gt; SetBasicStatusLine&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;And lastly, I did a little customization of the status line to show whether or not Fireplace was connected to a running Clojure repl. All of the tools above will work without being connected to existing repl process—but because of the JVM’s startup time, running one of their commands cold will freeze Vim while a new process is spun up to eval the code to do whatever you just asked. Running the same command with a warm repl connected is basically instant. I added some functions add either &lt;code class=&quot;highlighter-rouge&quot;&gt;nREPL Connected&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;No nREPL Connection&lt;/code&gt; to the status line so that I remember to start a new repl before I hit K to look up some docs… and grind my teeth while Vim freezes for 10 seconds.&lt;/p&gt;

&lt;h2 id=&quot;repl-integration&quot;&gt;REPL integration&lt;/h2&gt;

&lt;p&gt;While vim doesn’t have a true integrated REPL-as-subprocess like Emacs’s CIDER does, you can get a pretty nice setup within tmux by binding some keys to send s-expressions to a repl running an adjacent pane. I &lt;a href=&quot;/clojure-vim-and-tmux-using-your-editor-as-a-repl-scratchpad/&quot;&gt;wrote up my notes on that strategy here&lt;/a&gt;.&lt;/p&gt;

  &lt;p&gt;&lt;a href=&quot;/articles/2016/11/25/notes-on-writing-clojure-in-vim/&quot;&gt;Notes On Writing Clojure In Vim&lt;/a&gt; was originally published by Thomas Mayfield at &lt;a href=&quot;&quot;&gt;Duct Tape and Turing Machines&lt;/a&gt; on November 25, 2016.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[Defusing Distracting Defaults: An Experiment In Automating Better Habits]]></title>
  <link rel="alternate" type="text/html" href="/articles/2016/08/28/defusing-distracting-defaults/" />
  <id>/articles/2016/08/28/defusing-distracting-defaults</id>
  <published>2016-08-28T00:00:00-04:00</published>
  <updated>2016-08-28T00:00:00-04:00</updated>
  <author>
    <name>Thomas Mayfield</name>
    <uri></uri>
    <email>Thomas.Mayfield@gmail.com</email>
  </author>
  <content type="html">&lt;p&gt;Ever have one of those moments where you’re browsing Instagram/Facebook/Twitter/whatever, realize you’ve burned an hour you meant to use working on something else, close the tab in disgust… then realize you’ve reopened the same site without even thinking about it?&lt;/p&gt;

&lt;p&gt;Yeah. Long, uninterrupted blocks of focus are incredibly important for creative work. But for me, good intentions alone ain’t gonna get me there.&lt;/p&gt;

&lt;p&gt;There are plenty of distracting things blockers for OS X out there: StayFocusd, Freedom, Focus, and I’m sure tons more. But none that I tried quite worked for me, and I’ve been trying to think about why:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;em&gt;Permanently blocking distractions&lt;/em&gt;: Absolute blocking works for things that I actually get no value out of (Hacker News, I’m looking at you). But the most insidious stuff are sites that I sometimes get value from: keeping up with friends on Twitter, the good parts of Reddit, and so on. I still want to use them, just… deliberately and not instead of what I mean to be working on.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;em&gt;Fixed amount of time per day&lt;/em&gt;: A fixed time allowance for distraction sounds good in theory, but it doesn’t prevent me from absent-mindedly opening distractions at the start of the day, which is typically when I have the most energy I’d like to spend on something else.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;em&gt;Scheduled blocking&lt;/em&gt;: I could never figure out the right schedule that wound up helping, to be honest.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Upon reflection, I think what I wanted was a mindfulness aid. Ideally, I’d have all distractions blocked by default when I open my laptop, and have a command that I run to be able to access distractions for a set period of time, reverting to blocking everything when done: a break with an enforced time limit. I could run as many of these as I want, but each time has to be a deliberate decision.&lt;/p&gt;

&lt;p&gt;None of the existing tools quite did this, but I was able to wire up something that did. Here’s how:&lt;/p&gt;

&lt;h2 id=&quot;1-install-focus&quot;&gt;1. Install Focus&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://heyfocus.com/&quot;&gt;Focus&lt;/a&gt; is a great distraction blocking app for OS X and well worth your money. It has two modes: scheduled blocking or manually enabled periods of blocking, neither of which are quite what I was after.&lt;/p&gt;

&lt;p&gt;Luckily, it’s scriptable.&lt;/p&gt;

&lt;h2 id=&quot;2-install-hammerspoon-and-start-focus-on-wake&quot;&gt;2. Install Hammerspoon and start Focus on wake&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;http://www.hammerspoon.org/&quot;&gt;Hammerspoon&lt;/a&gt; is an automation tool for OS X that can watch for events and run Lua scripts in response. It’s quite powerful and the APIs are pretty extensive. I set it up to start Focus upon system wake, so even if I’ve disabled Focus earlier or closed my laptop in the middle of a break, when I come back, Focus is running.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-lua&quot; data-lang=&quot;lua&quot;&gt;&lt;span class=&quot;c1&quot;&gt;--&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;-- ~/.hammerspoon/init.lua&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;-- start Focus.app on wake&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;--&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;local&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;wakeCallback&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;nil&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;wakeCallback&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;event&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;caffeinate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;watcher&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;systemDidWake&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;hs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;execute&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'open focus://focus'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;wakeWatcher&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;caffeinate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;watcher&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;wakeCallback&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;wakeWatcher&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h2 id=&quot;3-set-up-unfocus-break-script&quot;&gt;3. Set up unfocus break script&lt;/h2&gt;

&lt;p&gt;The final piece is a script I wrote myself—it turns off blocking for a fixed period, then re-enables it at the end, keeping me from turning what I meant to be 5 minutes of break into a lost hour or two.&lt;/p&gt;

&lt;p&gt;Put the following somewhere on your path and make it executable:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;c1&quot;&gt;#!/usr/bin/env ruby&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;unfocus&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;remaining&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;sb&quot;&gt;`open focus://unfocus`&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;remaining&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&amp;gt;&amp;gt; Unfocused, refocusing in &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;format_time&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;remaining&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;     &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\r&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;remaining&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;sleep&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;format_time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;remaining&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;s2&quot;&gt;&quot;%02d:%02d&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;remaining&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;divmod&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;60&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;refocus&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;Break over!&quot;&lt;/span&gt;
  &lt;span class=&quot;sb&quot;&gt;`open focus://focus`&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;unfocus&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;ARGV&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;15&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;to_i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;60&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;refocus&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;rescue&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Interrupt&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;refocus&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;exit&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The break defaults to 15 minutes, but you can pass a custom number as an argument to the script (so &lt;code class=&quot;highlighter-rouge&quot;&gt;unfocus 5&lt;/code&gt; gives you a 5 minute break). When run, it’ll display a countdown timer of how long your break has remaining, then exit and re-enable Focus. It’ll even re-enable Focus if you accidentally kill the script while it’s running.&lt;/p&gt;

&lt;p&gt;And that’s it! I’ve just gotten this set up today, but I’m pleased with how it’s working so far. Time will tell if it’s a good long-term solution for me.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Updated Feb 26th, 2017: A previous solution here used &lt;a href=&quot;http://www.bernhard-baehr.de/&quot;&gt;sleepwatcher&lt;/a&gt;, but it began starting slowly after upgrading to Sierra. I replaced it with with Hammerspoon.&lt;/em&gt;&lt;/p&gt;

  &lt;p&gt;&lt;a href=&quot;/articles/2016/08/28/defusing-distracting-defaults/&quot;&gt;Defusing Distracting Defaults: An Experiment In Automating Better Habits&lt;/a&gt; was originally published by Thomas Mayfield at &lt;a href=&quot;&quot;&gt;Duct Tape and Turing Machines&lt;/a&gt; on August 28, 2016.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[Fitness Resources Megapost]]></title>
  <link rel="alternate" type="text/html" href="/articles/2016/05/28/fitness-resources-megapost/" />
  <id>/articles/2016/05/28/fitness-resources-megapost</id>
  <published>2016-05-28T00:00:00-04:00</published>
  <updated>2016-05-28T00:00:00-04:00</updated>
  <author>
    <name>Thomas Mayfield</name>
    <uri></uri>
    <email>Thomas.Mayfield@gmail.com</email>
  </author>
  <content type="html">&lt;p&gt;&lt;em&gt;Last updated November 6th, 2021: see &lt;strong&gt;&lt;a href=&quot;#changelog&quot;&gt;changelog&lt;/a&gt;&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;I’m a huge fitness nerd, and I’ll talk your ear off about all aspects of physical training given half a chance. I frequently wind up sending reading recommendations to people who’re interested in knowing more after chatting, and figured it was time to put together a big list of the fitness resources I’ve gotten the most out of.&lt;/p&gt;

&lt;p&gt;Disclaimer: This is my hobby, not my profession. I don’t train people and I’m not remarkably strong, fast, or flexible. But just as a regular person: this stuff has been lifechanging for me. I hope it helps someone else too.&lt;/p&gt;

&lt;h2 id=&quot;strength&quot;&gt;&lt;a name=&quot;strength&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#strength&quot;&gt;Strength&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;Absolute strength is the athletic attribute that has the most carryover into everything else you do, in sports and in life. Everyone should develop a base level of strength, whether your goal getting jacked, running a faster 5k, or just aging gracefully.&lt;/p&gt;

&lt;h3 id=&quot;general-resources&quot;&gt;&lt;a name=&quot;general-resources&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#general-resources&quot;&gt;General Resources&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;Some books for building a conceptual framework to understand what fitness is all about and how to define and progress towards your individual goals:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;http://www.strongerbyscience.com/art-and-science/&quot;&gt;The Art &amp;amp; Science of Lifting&lt;/a&gt;&lt;/strong&gt; by Greg Nuckols and Omar Isof — Two relatively short ebooks that are probably the best introduction to the principals of successful strength training. As the titles suggest, they cover both practical techniques as well as the backing scientific research. For further reading, &lt;a href=&quot;http://www.strongerbyscience.com&quot;&gt;Greg’s Stronger By Science&lt;/a&gt; is a goldmine of good information.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://muscleandstrengthpyramids.com/&quot;&gt;The Muscle and Strength Pyramids&lt;/a&gt;&lt;/strong&gt; by Eric Helms, Andy Morgan, Andrea Valdez - Strength training and nutrition guides that lay out a clear set of priorities for getting results. Truly excellent for helping beginners figure out what’s actually important and what’s trivial details. A little spendy but pure gold.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://www.amazon.com/Intervention-Course-Corrections-Athlete-Trainer-ebook/dp/B00ABNEN3G&quot;&gt;Intervention&lt;/a&gt;&lt;/strong&gt; by Dan John — One of those books I keep coming back to. Enough ideas, philosophy and guidelines to keep you busy for a lifetime. I know I’m due for a re-read because I haven’t been doing my loaded carries…&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;beginner-barbell-programs&quot;&gt;&lt;a name=&quot;beginner-barbell-programs&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#beginner-barbell-programs&quot;&gt;Beginner Barbell Programs&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;When you’re new to strength training, you can progress in strength very rapidly. Beginner programs are tailored to take advantage of that. The ones below are all slightly different, but they’ll all get you strong. Pick one, read it, understand how it works, then run it ‘til it stops working for you. This usually takes between 3-9 months.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;http://www.amazon.com/Greyskull-LP-Second-John-Sheaffer/dp/0615635571&quot;&gt;The Greyskull LP&lt;/a&gt;&lt;/strong&gt; by John Sheaffer — This is the program I ran when I started training with barbells. It’s a three-day-a-week, reasonably customizable program that’s a touch more hypertrophy oriented than a many of the commonly recommended beginner programs. &lt;a href=&quot;https://www.reddit.com/r/Fitness/wiki/phraks-gslp&quot;&gt;Phrack’s variant&lt;/a&gt; is a good base for those unsure of how to customize the program.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://www.reddit.com/r/Fitness/comments/44hnbc/strength_training_using_the_gzcl_method_from/&quot;&gt;GZCLP&lt;/a&gt;&lt;/strong&gt; by Cody Lefever — By the same author of the GZCL Method mentioned below, GZCLP is a version of his training methodology designed for new lifters. I really like how it’s set up and it has some features that in retrospect I could have benefitted from during my beginner days. Namely, it has progression across multiple rep ranges, a ton of extra back work, and actual structure around adding/progressing accessory work. The only downside here I can see is that Cody’s writeup is fairly technical and might be daunting for totally new lifters. You’ll want to read and understand the Tier 1/2/3 system from Cody’s original &lt;a href=&quot;http://swoleateveryheight.blogspot.com/2014/07/the-gzcl-method-simplified_13.html&quot;&gt;GZCL method&lt;/a&gt; first; then hopefully the GZCLP adaptation for newer lifters will make sense.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;intermediate--advanced-barbell-programs&quot;&gt;&lt;a name=&quot;intermediate-advanced-barbell-programs&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#intermediate-advanced-barbell-programs&quot;&gt;Intermediate / Advanced Barbell Programs&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;After you’ve exhausted the strength gains a beginner’s program can provide, you’ll want to switch to something that progresses slower. Here are some I like:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;http://swoleateveryheight.blogspot.com/2014/07/the-gzcl-method-simplified_13.html&quot;&gt;The GZCL Method&lt;/a&gt;&lt;/strong&gt; — This is a powerlifting-focused “method” rather than a “program”: for each lift you want to improve, it gives you guidelines for how many total reps at different intensities you should accumulate over the course of a week. Want to spread your squat work out over three days? Just get the reps in. Want just squat one day a week? Just get the reps in. This makes it super adaptable for whatever life throws at you, and lets you keep your daily schedule a bit more varied from training block to training block (if you want) without program hopping entirely.&lt;/p&gt;

    &lt;p&gt;For a starting point, &lt;a href=&quot;http://swoleateveryheight.blogspot.com/2016/02/gzcl-applications-adaptations.html&quot;&gt;Applications and Adapations&lt;/a&gt; has some example GZCL programs written up, along with a longer treatise on different ways to structure and progress work in the various tiers. Fair warning: it’s a higher volume method than most of the LPs above, so you’ll probably want to take some time ramping up the amount of work you’re doing rather than jumping in with both feet.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;http://www.strongerbyscience.com/resources/&quot;&gt;Average to Savage&lt;/a&gt;&lt;/strong&gt; — My take on what a good intermediate &lt;a href=&quot;https://www.bikejames.com/strength/park-bench-vs-bus-bench-workouts-which-is-best-for-you/&quot;&gt;park bench&lt;/a&gt; program can look like. Bundled in the Training Toolkit from Greg Nuckols, this is a really solid general strength and hypertrophy program. This would be first recommendation if you’re fresh off a beginner program and trying to figure out what’s next; it’ll really help you develop the work capacity you need to make progress as an intermediate. It’s a 4-day-a-week program that runs in 4 week blocks for 16 total weeks, starting with lighter, very high-rep sets and titrating down to heavier, low-rep sets by the end. I’ve found myself returning to this program over and over after experimenting with other approaches.&lt;/p&gt;

    &lt;p&gt;Also useful: the bundle comes with a guide to sticking points in the big lifts; as in, if you get stuck at this certain point in your squat, these are the muscles that likely the issue and how to bring them up to speed.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;http://www.strongerbyscience.com/train-smarter/&quot;&gt;Greg Nuckols Specialty Programs&lt;/a&gt;&lt;/strong&gt; — Yup, another Greg Nuckols joint. Instead of a single program, these are a collection of specialty programs that for building an individual lift (squat, bench, deadlift) that you can combine depending on your goals. Greg has recommendations on effective ways to combine them, but it’s pretty flexible. Well thought out, good stuff.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://www.amazon.com/Simplest-Effective-Training-System-Strength-ebook/dp/B00B1HOZ6G&quot;&gt;5/3/1&lt;/a&gt;&lt;/strong&gt; — I feel like I have to mention this program here for the sake of completeness as it’s sort of all over every training discussion on the internet. I ran the basic version of 5/3/1 when I finished my linear progression, and I think that was a mistake. It was lower frequency and volume than my beginner’s program and didn’t help me develop much work capacity. I think it could be workable with the addition of a bunch of different modifications from the followup &lt;a href=&quot;https://www.amazon.com/Beyond-Simple-Training-Extraordinary-Results-ebook/dp/B00DT5FIYQ&quot;&gt;Beyond 5/3/1&lt;/a&gt; for extra volume and intensity, but you need to have a little experience under your belt to pick the right modifications (I certainly did not when I tried running it). I’ll probably not use this program again unless I need to dial things way down for a weight cut or some kind of unexpected stressful life situation.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;cardiovascular-conditioning&quot;&gt;&lt;a name=&quot;conditioning&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#conditioning&quot;&gt;Cardiovascular Conditioning&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;Yes, &lt;a href=&quot;http://www.strongerbyscience.com/avoiding-cardio-could-be-holding-you-back/&quot;&gt;you should do cardio&lt;/a&gt; even if your goal is just getting stronger.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://www.amazon.com/Tactical-Barbell-II-Conditioning-Black-ebook/dp/B0143HDCWS&quot;&gt;Tactical Barbell&lt;/a&gt;&lt;/strong&gt; — Second in a series about fitness for police/military/fighters, focusing on how to combine cardiovascular fitness with strength training. Very well thought out, sustainable programming and a good guide (along with the &lt;a href=&quot;https://www.amazon.com/Tactical-Barbell-Definitive-Strength-Operational-ebook/dp/B00VB143ZA&quot;&gt;first volume&lt;/a&gt;) on how to productively integrate cardio workout with strength training.&lt;/p&gt;

    &lt;p&gt;This is tailored for professionals who need to be strong and in shape, but can’t be walking around sore all the time. Probably not the first stop for someone who’s looking to increase their powerlifting numbers, get bigger, or lose weight—this is all about pure performance. It’s also not for the absolute couch potato or someone who’s strong but way out of cardio shape. Apparently the author has a new book coming out this year for raw beginners.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;http://rosstraining.com/blog/never-gymless/&quot;&gt;Never Gymless&lt;/a&gt;&lt;/strong&gt; and &lt;strong&gt;&lt;a href=&quot;http://rosstraining.com/blog/infinite-intensity/&quot;&gt;Infinite Intensity&lt;/a&gt;&lt;/strong&gt; — Ross Enamait is a boxing coach and his guides heavily focus on high-intensity conditioning. Never Gymless got me back into fitness after a 3-year layoff after college, and I owe him a huge debt for that. Both are great resources if you don’t have a gym nearby and need to get some low-tech work done. Fair warning: if you aren’t already in exceptional shape, you’ll almost certainly have to scale down Ross’s workouts at first.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;http://www.amazon.com/Kettlebell-Simple-Sinister-Pavel-Tsatsouline/dp/0989892409&quot;&gt;Simple &amp;amp; Sinister&lt;/a&gt;&lt;/strong&gt; and &lt;strong&gt;&lt;a href=&quot;http://www.amazon.com/Kettlebell-Strength-Secret-Soviet-Supermen/dp/0938045695&quot;&gt;Enter the Kettlebell&lt;/a&gt;&lt;/strong&gt; — Pavel Tsatsouline is credited with intoducing the kettlebell to America. Kettlebell are a tremendous high-intensity conditioning tool and both these books are a great intro to using them. Just ignore the macho Russian shtick and do some swings, comrade.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;mobility--fixing-pain-and-injuries&quot;&gt;&lt;a name=&quot;mobility&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#mobility&quot;&gt;Mobility / Fixing Pain and Injuries&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;I’m a notoriously unlimber person and my 20s were full of the kind of problems you hear people complain about in their 40s: RSI in my wrists, constant low back “tweaks”, and intermittent shooting sciatic nerve pain. Two things helped me fix and keep the these problems at bay:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Getting stronger (see above).&lt;/li&gt;
  &lt;li&gt;Mobility work (see below).&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;As it turns out, the tools you need to move well through the full range of motion while lifting have huge overlap with the tools you can use to fix an awful wide variety of chronic musculur pain.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://www.youtube.com/playlist?list=PLB67wXqPqtMcNVA-UndNUy7bahGJzLQbT&quot;&gt;MobilityWOD videos&lt;/a&gt;&lt;/strong&gt; — Kelly Starrett is one of those folks I have to recommend with caveats. He’s got a bunch of inventive stretches and massage techniques that’ve helped me out a ton. But be aware: some of his techniques aren’t very evidence-backed (“voodoo flossing”) and he’s got some weird early-aughts Crossfit dogma in his nutritional advice and lifting technique stuff. Still worth sifting through for the helpful parts. He has a book out that’s a little more organized, called (sigh) &lt;a href=&quot;http://www.amazon.com/Becoming-Supple-Leopard-2nd-Performance/dp/1628600837&quot;&gt;Becoming A Supple Leopard&lt;/a&gt;, but I’d honestly just recommend hitting up that YouTube channel, doing one video a day and see what you learn about how your body reacts to each session.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;http://www.amazon.com/Trigger-Point-Therapy-Workbook-Self-Treatment/dp/1608824942&quot;&gt;The Trigger Point Therapy Workbook&lt;/a&gt;&lt;/strong&gt; — Picked up an earlier edition of this one to help me with an RSI scare almost a decade ago, and it’s been helping me debug my aches and pains ever since. Incredibly valuable just for the referred pain maps.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://romwod.com/&quot;&gt;ROMWOD&lt;/a&gt;&lt;/strong&gt; — Pretty much Yin Yoga marketed at Crossfitters, but I’ve been finding it valuable enough to stay a subscriber. Lots of long holds and has been doing wonders for my hip mobility. Hardly a one-stop solution: everyone’s mobility is messed up in different ways (my ankles need a ton more work than they program). That said, it’s a good 80/20 routine, and has been helping me free up the rest of mobilizing time to focus on my own worst issues.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=iN-FPh7r1yg&quot;&gt;Yoga for Weightlifters&lt;/a&gt;&lt;/strong&gt; — For a little more active stretching, I really love this particular Vinyasa video. Half an hour, targeted at lifters, and always makes me feel like a million bucks.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;nutrition&quot;&gt;&lt;a name=&quot;nutrition&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#nutrition&quot;&gt;Nutrition&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;Getting my diet on point and actually being accountable for what I’m eating has made a huge difference in my energy levels and how much control I feel I have over how I look. Wish I’d taken it more seriously earlier.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;http://rippedbody.jp/complete-diet-nutrition-set-up-guide/&quot;&gt;Andy Morgan’s Diet Guide&lt;/a&gt;&lt;/strong&gt; — An amazingly thorough, evidence-backed guide to setting up, tracking and adjusting your nutrition depending on your goals. Andy Morgan has put an absolute practical ton of information out on his site for free. Start here.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://renaissanceperiodization.com/shop/the-renaissance-diet/&quot;&gt;The Renessiance Diet&lt;/a&gt;&lt;/strong&gt; — Very much a scientific do-this, eat-that guide to diet, focusing on maximum athletic performance.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://www.amazon.com/Fat-Loss-Happens-Monday-Habit-Based-ebook/dp/B00PKPTRWM&quot;&gt;Fat Loss Starts On Monday&lt;/a&gt;&lt;/strong&gt; — A Dan John collaboration with Josh Hillis; where the above two resources focus mainly on what do to, this book has a lot of useful ideas on the psychological side. Good stuff on building the kind of habits to you need to adhere to a good nutrition plan and still have a loving, healthy relationship with food.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://www.amazon.com/Well-Fed-Paleo-Recipes-People-ebook/dp/B0083LX1EU/&quot;&gt;Well Fed&lt;/a&gt;&lt;/strong&gt; and &lt;strong&gt;&lt;a href=&quot;https://www.amazon.com/Well-Fed-Paleo-Recipes-People-ebook/dp/B00HG3XCBS/&quot;&gt;Well Fed 2&lt;/a&gt;&lt;/strong&gt; — A pair of cookbooks that have been instrumental in how my household cooks these days. You can ignore the Paleo ideology stuff (personally, I empirically don’t react to wheat or dairy one way or another), but pay attention to the Weekly Cookup. Doing the bulk of my cooking in advance has been a HUGE part of turning my nutrition around, and Melissa Joulwan has great ideas around how to do that and keep things fresh and interesting at the same time.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;podcasts&quot;&gt;&lt;a name=&quot;#podcasts&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#podcasts&quot;&gt;Podcasts&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;Fitness podcasts I’ve found worth listening to:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://www.sbspod.com/&quot;&gt;Stronger By Science&lt;/a&gt; Greg and Eric from SBS do research reviews, practical coaching/training/nutrition tips, and more dry, mildly nilhilist humor than you might expect.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://ironculture.libsyn.com/&quot;&gt;Iron Culture&lt;/a&gt; Big range of lifting topics and great guests.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;http://revivestronger.com/podcast/&quot;&gt;Revive Stronger&lt;/a&gt; Powerlifting and bodybuilding podcast that does a lot of good interviews with coaches and sports scientists. The Q&amp;amp;A sessions with regular guests (Mike Israetel in particular) are great.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;http://3dmusclejourney.com/podcast/&quot;&gt;3D Muscle Journey&lt;/a&gt; Weekly roundtables from the coaches at 3DMJ, mostly bodybuilding focused.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;specific-exercises-form-guides-cues-and-tips&quot;&gt;&lt;a name=&quot;#form-guides&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#form-guides&quot;&gt;Specific Exercises: Form Guides, Cues, and Tips&lt;/a&gt;&lt;/h2&gt;

&lt;h3 id=&quot;squat&quot;&gt;Squat&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;http://www.strongerbyscience.com/how-to-squat/&quot;&gt;Stronger By Science: How To Squat&lt;/a&gt;&lt;/strong&gt; Greg Nuckols’ novel-length guide on the squat. If you have a question about squatting, it’s probably answered here.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=U5zrloYWwxw&quot;&gt;How to Squat, With Chris Duffin&lt;/a&gt;&lt;/strong&gt; The tips from this video on how to brace and set up correctly really helped me. The trunk bracing cues are applicable to the deadlift as well.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=DrwiddA_8CQ&quot;&gt;How to Squat Max Aita Style&lt;/a&gt;&lt;/strong&gt; Some cues about how to stay upright in a squat that really clicked for me.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=Fob2wWEC72s&quot;&gt;Hip Structure and the Squat&lt;/a&gt;&lt;/strong&gt; Everyone has to squat a little differently due to the structure of their hips. If you’re struggling to figure out a squat stance that works for you, check out some of these assessments.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;bench&quot;&gt;Bench&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;http://www.strongerbyscience.com/how-to-bench/&quot;&gt;Stronger By Science: How To Bench&lt;/a&gt;&lt;/strong&gt; Another Greg Nuckols tome, this time on the bench. As complete a guide as you’ll find.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=hZPYTIPb2To&quot;&gt;How to Bench Press, with Eric Spoto&lt;/a&gt;&lt;/strong&gt; This video helped me out tremendously with my bench setup.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=iuGsGdwb5TM&quot;&gt;Brian Alsruhe: Identifying and Fixing Weak Points in the Bench&lt;/a&gt;&lt;/strong&gt; Good rundown of what various sticking points in the bench mean, and how to fix them.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;deadlift&quot;&gt;Deadlift&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;http://www.strongerbyscience.com/how-to-deadlift/&quot;&gt;Stronger By Science: How To Deadlift&lt;/a&gt;&lt;/strong&gt; Seeing a theme here? Yet again Greg Nuckols pens the most complete guide to a single movement you’ll see.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=oiDczs9j75E&quot;&gt;Deadlift Like The Mad Scientist Chris Duffin&lt;/a&gt;&lt;/strong&gt; Another set of simple form cues from Chris Duffin, this time for the deadlift.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=bv6dJK11zNQ&quot;&gt;Breathing, Abdominal Bracing &amp;amp; Total Tension&lt;/a&gt;&lt;/strong&gt; Cody Lefever, author of the GZCL Method, talks about breathing, bracing and tension in the deadlift.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;overhead-press&quot;&gt;Overhead Press&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;&lt;a href=&quot;https://youtube.com/watch?v=sqKhLR1zRaU&quot;&gt;Justin Lascek: 3 Press Fixes&lt;/a&gt;&lt;/strong&gt; I still credit this video for giving me the tools to make my overpress press into my best proportional lift.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;pullups&quot;&gt;Pullups&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;&lt;a href=&quot;https://youtube.com/watch?v=kHSJwnBPj-Y&quot;&gt;Make Pullups 10x Easier and More Effective&lt;/a&gt;&lt;/strong&gt; Max Shank talks about scapular retration and shoulder position in the chinup. I’ve seen this help people who couldn’t do a single pullup to being able to do one, just by fixing their starting position.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;kettlebell-swing&quot;&gt;Kettlebell Swing&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=GYHbu2LRqD0&quot;&gt;How to Properly Perform and Teach the Kettlebell Swing&lt;/a&gt;&lt;/strong&gt; Good tutorial on how to learn the hinge motion that’s key to the swing (it’s not a squat!).&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;kettlebell-snatch&quot;&gt;Kettlebell Snatch&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=bkeWDzUMVZI&quot;&gt;How to avoid banging your wrist in Kettlebell Snatch&lt;/a&gt;&lt;/strong&gt; This Steve Cotter was one of those “oooooh” moments for me—I could never get Pavel’s snatch technique to work for me with dropping the bell on my wrist at the top of the movement.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;kettlebell-clean&quot;&gt;Kettlebell Clean&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;&lt;a href=&quot;https://www.jensinkler.com/fix-your-kettlebell-clean/&quot;&gt;Fix Your Kettlebell Clean&lt;/a&gt;&lt;/strong&gt; Another Light Dawns on Marblehead moment for yours truly—I never quite got how to clean without landing the bell heavily on my arm until I tried out Jen’s cues.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;changelog&quot;&gt;&lt;a name=&quot;changelog&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#changelog&quot;&gt;Changelog&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;2021-11-06&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Update podcasts: remove Jugglife, add Iron Culture and SBS.&lt;/li&gt;
  &lt;li&gt;Add nuance to Kelly Starrett rec.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;2018-10-14&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Replace &lt;em&gt;Fit&lt;/em&gt; with &lt;em&gt;The Muscle and Strength Pyramids&lt;/em&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;2018-03-03&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Added Podcast section&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;2017-06-24&lt;/strong&gt;:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Fixed link to Phrack’s Greyskull variant&lt;/li&gt;
  &lt;li&gt;Used better link to Cody’s GZCLP reddit post&lt;/li&gt;
  &lt;li&gt;Removed Starting Strength&lt;/li&gt;
  &lt;li&gt;Clarified thoughts on 5/3/1 and Greyskull&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;2017-03-12&lt;/strong&gt;:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Added Jen Sinkler’s “Fix Your Kettlebell Clean”&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;2017-02-05&lt;/strong&gt;:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Added Greg Nuckols’ bench and deadlift guides&lt;/li&gt;
  &lt;li&gt;Added Brian Alsruhe’s bench weakpoints guide&lt;/li&gt;
  &lt;li&gt;Added Quinn Henoch’s squat stance assessments.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;2016-05-28&lt;/strong&gt;:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Original Post&lt;/li&gt;
&lt;/ul&gt;

  &lt;p&gt;&lt;a href=&quot;/articles/2016/05/28/fitness-resources-megapost/&quot;&gt;Fitness Resources Megapost&lt;/a&gt; was originally published by Thomas Mayfield at &lt;a href=&quot;&quot;&gt;Duct Tape and Turing Machines&lt;/a&gt; on May 28, 2016.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[Customizing The Clojure REPL]]></title>
  <link rel="alternate" type="text/html" href="/articles/2016/05/01/customizing-the-clojure-repl/" />
  <id>/articles/2016/05/01/customizing-the-clojure-repl</id>
  <published>2016-05-01T00:00:00-04:00</published>
  <updated>2016-05-01T00:00:00-04:00</updated>
  <author>
    <name>Thomas Mayfield</name>
    <uri></uri>
    <email>Thomas.Mayfield@gmail.com</email>
  </author>
  <content type="html">&lt;p&gt;One of the things that makes Clojure great is its fantastic REPL. “REPL” stands for “read eval print loop”—it’s a command-line console where you can type in Clojure code and run it. It’s a great way to experiment and learn; I’ll often prototype a piece of code in the REPL before moving it back over to my editor to save in my project.&lt;/p&gt;

&lt;h3 id=&quot;less-typing-required&quot;&gt;Less typing required&lt;/h3&gt;

&lt;p&gt;My Clojure REPL sessions tend to be pretty long-lived, and I’ll often build up a mini-library of helper functions and imported namespaces as I go. This can get a little jarring when I have to restart the REPL session; I’ll hit the up arrow to repeat my last command, only to not have it work because the code references something I’d defined in the last session that’s now gone.&lt;/p&gt;

&lt;p&gt;As a partial solution, it turns out you can customize the environment the Clojure REPL starts up with. By default, &lt;code class=&quot;highlighter-rouge&quot;&gt;lein repl&lt;/code&gt; starts using the &lt;code class=&quot;highlighter-rouge&quot;&gt;user&lt;/code&gt; namespace, but it’s not any different than any other Clojure namespace. You can customize it by create a file in your project that describes the &lt;code class=&quot;highlighter-rouge&quot;&gt;user&lt;/code&gt; namespace. For example, if I always want to have &lt;a href=&quot;https://github.com/marick/Midje&quot;&gt;Midje&lt;/a&gt;’s testing functions loaded, I can add it to the &lt;code class=&quot;highlighter-rouge&quot;&gt;require&lt;/code&gt; part of the namespace’s &lt;code class=&quot;highlighter-rouge&quot;&gt;ns&lt;/code&gt; macro:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-clojure&quot; data-lang=&quot;clojure&quot;&gt;&lt;span class=&quot;c1&quot;&gt;; user.clj&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;ns&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
 &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;:require&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;midje.repl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]))&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Now whenever I start a REPL session, all the functions from &lt;code class=&quot;highlighter-rouge&quot;&gt;korma.core&lt;/code&gt; will be automatically required and ready to use. We can do the same thing with all the Clojure code-loading mechanisms: require, refer, alias, and use. The &lt;code class=&quot;highlighter-rouge&quot;&gt;user&lt;/code&gt; namespace works the same as any other Clojure namespace; it just happens to be the one that our REPL loads by default.&lt;/p&gt;

&lt;h3 id=&quot;helper-functions&quot;&gt;Helper functions&lt;/h3&gt;

&lt;p&gt;This means we can also define helper functions in our &lt;code class=&quot;highlighter-rouge&quot;&gt;user&lt;/code&gt; namespace. For example, if I want to stop and start my &lt;a href=&quot;https://github.com/tolitius/mount&quot;&gt;mount components&lt;/a&gt; easily, I might define some helpers to do that (like the &lt;a href=&quot;http://www.luminusweb.net/&quot;&gt;Luminus&lt;/a&gt; project does in its generated starter application):&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-clojure&quot; data-lang=&quot;clojure&quot;&gt;&lt;span class=&quot;c1&quot;&gt;; user.clj&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;ns&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
 &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;:require&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;midje.repl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
           &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mount.core&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;:as&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mount&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]))&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;

&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;defn&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;mount/start&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;

&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;defn&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stop&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;mount/stop&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;

&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;defn&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;restart&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;stop&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Now those functions are available every time I start my REPL:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;restart&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;2016-05-01 13:46:22,647][INFO][luminus.http-server] starting HTTP server on port 3000&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h3 id=&quot;keeping-this-stuff-out-of-production&quot;&gt;Keeping this stuff out of production&lt;/h3&gt;

&lt;p&gt;You probably don’t want to have development-only code like REPL customization loaded in your production application. If you’re using Leiningen to manage your project, you can define directories that are only loaded when the development profile is used:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-clojure&quot; data-lang=&quot;clojure&quot;&gt;&lt;span class=&quot;c1&quot;&gt;; project.clj&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;:profiles&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;:dev&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
 &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;:source-paths&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;env/development/clj&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Now, we can move our &lt;code class=&quot;highlighter-rouge&quot;&gt;user.clj&lt;/code&gt; from above into &lt;code class=&quot;highlighter-rouge&quot;&gt;env/development/clj/user.clj&lt;/code&gt;, and it’ll only be loaded when we start up a REPL session in our development environment.&lt;/p&gt;

  &lt;p&gt;&lt;a href=&quot;/articles/2016/05/01/customizing-the-clojure-repl/&quot;&gt;Customizing The Clojure REPL&lt;/a&gt; was originally published by Thomas Mayfield at &lt;a href=&quot;&quot;&gt;Duct Tape and Turing Machines&lt;/a&gt; on May 01, 2016.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[How Slack Could Respect Your Time And Attention (Better)]]></title>
  <link rel="alternate" type="text/html" href="/articles/2016/04/16/how-slack-could-respect-your-time-and-attention-better/" />
  <id>/articles/2016/04/16/how-slack-could-respect-your-time-and-attention-better</id>
  <published>2016-04-16T00:00:00-04:00</published>
  <updated>2016-04-16T00:00:00-04:00</updated>
  <author>
    <name>Thomas Mayfield</name>
    <uri></uri>
    <email>Thomas.Mayfield@gmail.com</email>
  </author>
  <content type="html">&lt;p&gt;Slack, like any communication tool, can function anywhere on a spectrum from “effective medium” to “weapon of mass distraction”. Where your team’s experience falls depends mostly on how deliberately you set up your expectations of each other. But no tool is truly neutral and I think there are changes that Slack could make to help prevent chat fatigue and encourage longer periods of attention and focus.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;The default notification settings are invasive. If I told you to install software that let anyone in your company flash a notice onto your screen, sliding it over whatever you’re working on at any time—well, you’d probably think I was loony. But that’s exactly what Slack’s default notification settings do, plus playing a little noise in case you managed to keep your attention off the thing flickering at the edge of your vision. Organizations default to the path of least resistance, so software defaults are incredibly powerful. Let users opt into more interrupt-y preferencs if they want.&lt;/li&gt;
  &lt;li&gt;Do Not Disturb mode is a good idea, but has some problems in practice.
    &lt;ul&gt;
      &lt;li&gt;Anyone who tries to DM someone in DND mode gets warned that this person has enabled DND and asks if you’re sure you want to interrupt them. That’s great! But… it doesn’t seem to do this if you already have a conversation ongoing with someone. So if I’m chatting with a coworker and then turn on DND mode to buckle down and focus for a while, if they DM me again within some unspecified period of time, they don’t get any sort of notice that I’ve changed my availability (unless they’re eagle-eyed and see the tiny icon next to me change).&lt;/li&gt;
      &lt;li&gt;It still shows unread rooms highlighed; if you open up Slack for any reason at all while in DND mode, then you’re confronted with all the things you might be Missing Out On. Ideally, DND mode would quiet &lt;em&gt;all&lt;/em&gt; unread notices until you disable it.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;There’s no way to differentiate a DM meant to interrupt someone right now (“hi the site is burning down”) vs something that can be read whenever (“check out this link next time you’re taking a break”). This is doubly problematic because there’s no way to turn off the unread count for DMs anywhere it appears; even with notifications turned down to their lowest possible settings, privately messaging someone is an attention grab even if you want to it be an asynchronous ping.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Complaining is easy and product design is hard. But I’d still like to see more decisions that move Slack towards being a tool that focuses time and attention instead of tending to consume them.&lt;/p&gt;

  &lt;p&gt;&lt;a href=&quot;/articles/2016/04/16/how-slack-could-respect-your-time-and-attention-better/&quot;&gt;How Slack Could Respect Your Time And Attention (Better)&lt;/a&gt; was originally published by Thomas Mayfield at &lt;a href=&quot;&quot;&gt;Duct Tape and Turing Machines&lt;/a&gt; on April 16, 2016.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[2015 Year End Notes]]></title>
  <link rel="alternate" type="text/html" href="/articles/2015/12/27/2015-year-end-notes/" />
  <id>/articles/2015/12/27/2015-year-end-notes</id>
  <published>2015-12-27T00:00:00-05:00</published>
  <updated>2015-12-27T00:00:00-05:00</updated>
  <author>
    <name>Thomas Mayfield</name>
    <uri></uri>
    <email>Thomas.Mayfield@gmail.com</email>
  </author>
  <content type="html">&lt;p&gt;Even if New Year’s resolutions are a terrible way to make lasting habit changes, I like using the end of the year as a reminder to take stock of how I did with respect to &lt;a href=&quot;http://thegreata.pe/2014-year-end-notes/&quot;&gt;last year’s goals&lt;/a&gt; and see what I want to change.&lt;/p&gt;

&lt;h2 id=&quot;reading&quot;&gt;Reading&lt;/h2&gt;

&lt;p&gt;This was the first year in four years that I missed my &lt;a href=&quot;https://www.goodreads.com/challenges/3082-2015-reading-challenge&quot;&gt;50 book reading challenge&lt;/a&gt;, having only read 44 books in 2015.&lt;/p&gt;

&lt;p&gt;What happened? Mostly, life. My wife and I bought a house in August and for those that haven’t gone through that process, house-buying will happily hoover up all your free time and then some. I also changed jobs in April, resulting in a shorter commute from then until August, when we moved into the new place. I do a significant chunk of my reading on the bus and subway, and even a commute just three stops shorter made a difference in my reading time when compounded twice a day, five times a week.&lt;/p&gt;

&lt;p&gt;That’s not to say that 44 books in a year isn’t respectable; I’m still pleased by how I’ve maintained my rebuilt reading habit. I just need to make sure I stay on track at this point.&lt;/p&gt;

&lt;p&gt;The breakdown of what I read by genre:&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;Genre / Subject&lt;/th&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;Count&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Fantasy&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;19&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Science Fiction&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;12&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Technical/Business&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;4&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Fitness&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;3&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Other Non-Fiction&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;6&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;I also set two specific reading goals last year:&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Read more books by women&lt;/em&gt;: Last year, only 5 out of the 53 books I read were by women. This year, it was 14 out of 44—from 9% to 30% is a improvement, but this is still something I need to pay more attention to.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Read 8 technical books&lt;/em&gt;: This was an outright fail: I read 4 technical books, of which 3 could be more accurately described as books on tech cultural/business/careers.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Favorite Books This Year&lt;/em&gt;:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.amazon.com/gp/product/0765325535&quot;&gt;The Half-Made World&lt;/a&gt; by Felix Gilman&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.amazon.com/Nemesis-Games-Expanse-James-Corey/dp/0316217581&quot;&gt;Nemesis Games&lt;/a&gt; by James S.A. Corey&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.amazon.com/Traitor-Baru-Cormorant-Seth-Dickinson/dp/0765380722&quot;&gt;The Traitor Baru Cormorant&lt;/a&gt; by Seth Dickison&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.amazon.com/Cinder-Spires-Aeronauts-Windlass/dp/0451466802&quot;&gt;The Aeronaut’s Windlass&lt;/a&gt; by Jim Butcher&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.amazon.com/Internet-Garbage-Sarah-Jeong-ebook/dp/B011JAV030/&quot;&gt;The Internet of Garbage&lt;/a&gt; by Sarah Jeong&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;2016-plans&quot;&gt;2016 Plans&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Try for 50 books / year again. Commute reading from the new place seems to put me roughly on track for this by itself, so I don’t think I’ll be stretching for this one.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Do better in terms of reading non-fiction more broadly. This is important for creative work and being a well-rounded person. I’ve noticed that my non-fiction / fiction ratio skews towards fiction in direct correlation with my chronic stress levels, so hopefully not changing jobs and buying a house will help push me in the right direction.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;lifting&quot;&gt;Lifting&lt;/h2&gt;

&lt;p&gt;After having failed to hit any of my lifting goals for 2014, I set what I thought were a set of more conversative and balanced goals for 2015.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Last Year’s Goals&lt;/em&gt;:&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;Lift&lt;/th&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;Goal 1RM&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Deadlift&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;405 lbs&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Overhead Press&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;170 lbs&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Kettlebell Swing&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;200 x 53 lbs in 10 minutes&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;How’d I do?&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Deadlift&lt;/em&gt;: Nailed it. Hit a 415lbs pull in October. Might have had more in the tank—that was at the tail end of a workout, after the regular working sets.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Overhead Press&lt;/em&gt;: Remember how I moved? Now I’ve got a squat rack and bar in my basement! It’s wonderful—except that the ceilings are too low for me to overhead press a loaded barbell. I didn’t beat my OHP PR (160lbs) before I moved, and I’m now focusing on rebuilding my bench press instead (which I’d neglected to focus on overhead. sigh.)&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Kettlebell Swing&lt;/em&gt;: In retrospect, this was a misguided goal. I wanted a goal that’d encourage me to improve my cardiovascular conditioning, but this proved very challenging to try and improve at the same time as improving my deadlift. Both are the same kind of fundamental human movement (hip hinge) and both are super taxing to the same parts of the body. I’d consistently feel beat up and under-recovered when trying to improve the swing and the deadlift concurrently. I got to 150 swings in 7:30 sometime in early November, but have since decided to back off pushing the swings. More on this in next year’s goals.&lt;/p&gt;

&lt;p&gt;But!&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Bringing Back Squatting Back&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;An unexpected bit of awesome this year is that I’ve resumed back squatting, pain-free! A couple things contributed to this:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Consistent mobility work on my hips and ankles have slowly had lasting effects.&lt;/li&gt;
  &lt;li&gt;I got a pair of Olympic lifting shoes: the stable, raised heel helps compensate for some of the missing dorsiflexion in my ankles.&lt;/li&gt;
  &lt;li&gt;Getting a lifting belt helped teach me to brace my core correctly.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;2016-goals&quot;&gt;2016 Goals&lt;/h4&gt;

&lt;p&gt;Strength is my main focus, and I’m going to set my 2016 goals accordingly. Here’s what my powerlifting total looks like right now:&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;Lift&lt;/th&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;Current 1RM&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Deadlift&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;415 lbs&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Squat&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;300 lbs (est)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Bench Press&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;230 lbs (est)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;&lt;em&gt;Total&lt;/em&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;&lt;em&gt;945 lbs (est)&lt;/em&gt;&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;By next year, I want to total over 1000 lbs. That’s 20 lbs on each lift, on average. I think that’s doable if I’m focused on strength and avoid getting hurt.&lt;/p&gt;

&lt;p&gt;I don’t want to neglect conditioning while doing this, but I want to train it in a way that’s more complimentary to my strength training. I want to be in good shape cardio-wise for general health, improved recovery, and to avoid going completely bearmode in the winter. So I’m just going to shoot for consistency: I want to average 2 cardio-centric workouts a week. If I’m feeling great, this can be HIIT-style swings, complexes, burpees, whatever. If I’m beat up or low on recovery budget, it’ll be LISS-style running or stationary bike. Hopefully the freedom to adjust the style and intensity of my conditioning will make this easier to run along a serious strength training program.&lt;/p&gt;

&lt;h2 id=&quot;programming&quot;&gt;Programming&lt;/h2&gt;

&lt;p&gt;In terms of my outside-work projects, this year was almost exclusively devoted to mucking about in functional languages.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;I &lt;a href=&quot;https://github.com/thegreatape/lyeberry&quot;&gt;rewrote the library scraping backend&lt;/a&gt; of Literate Minuteman in Clojure and wound up building a &lt;a href=&quot;https://github.com/thegreatape/ring-raygun&quot;&gt;Ring middleware error-tracking wrapper&lt;/a&gt; for &lt;a href=&quot;raygun.io&quot;&gt;Raygun.io&lt;/a&gt;. I haven’t done much with Clojure since, but I’ve love a chance to try out ClojureScript at some point.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;I wrote a &lt;a href=&quot;https://github.com/thegreatape/conway&quot;&gt;multiplayer Conway’s Game of Life&lt;/a&gt; implementation in Elixir using the Phoenix framework. Elixir is a really delightful language with great tooling. I love the idea of building in primitive-level features for what happens when things crash at the language and VM level.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;I experimented with using Emacs (using modal editing via &lt;a href=&quot;https://bitbucket.org/lyro/evil/wiki/Home&quot;&gt;evil&lt;/a&gt; as my editor full-time from August to November. Ultimately, I learned that I do want to be able to deeply customize my editor, I found that the Emacs ideal seems to be trying to integration all of your tools into Emacs itself, binding them together with lisp. I found that for me, I wanted instead to compose my tools using the shell. For example, &lt;a href=&quot;http://magit.vc/&quot;&gt;Magit&lt;/a&gt; is a pretty amazing interface to Git for Emacs, but while using it I missed the history and easy composition with other basic unix tools that command-line git offered. I’m now back to tmux and vim, but I could see pulling emacs out again if I started working on a project where Emacs has superior IDE-like tooling, though—&lt;a href=&quot;http://www.alchemist-elixir.org/&quot;&gt;Alchemist&lt;/a&gt; for Elixir and &lt;a href=&quot;https://github.com/clojure-emacs/cider&quot;&gt;CIDER&lt;/a&gt; for Clojure come to mind. I’m glad I’ve got a ready-to-go evil config set up if that happens.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;2016-plans-1&quot;&gt;2016 Plans&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Dive deeper into Elixir / OTP and learn enough Erlang to read libraries written in it.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Try out &lt;a href=&quot;http://elm-lang.org/&quot;&gt;Elm&lt;/a&gt;. I’m fascinated by the idea of a type system that helps you instead of fights you. Plus, any project whose goals is to have the best compiler error messages of any language has their priorities straight. And it has a time-traveling debugger. This I’ve got to see.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Up my relational database game. What I know about SQL and relational database use has always been picked up just-in-time to solve whatever issues were in front of me. I want to go deeper into theory and best practices to get ahead of the curve here, as my job right now regularly involves writing, tuning and debugging queries against medium-large tables (tens of millions of rows). I’m going to start by reading &lt;a href=&quot;http://www.amazon.com/Art-SQL-Stephane-Faroult/dp/0596008945&quot;&gt;The Art of SQL&lt;/a&gt; early in the new year.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

  &lt;p&gt;&lt;a href=&quot;/articles/2015/12/27/2015-year-end-notes/&quot;&gt;2015 Year End Notes&lt;/a&gt; was originally published by Thomas Mayfield at &lt;a href=&quot;&quot;&gt;Duct Tape and Turing Machines&lt;/a&gt; on December 27, 2015.&lt;/p&gt;</content>
</entry>

</feed>